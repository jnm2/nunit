NUnit.Compatibility.AttributeHelper
NUnit.Compatibility.LongLivedMarshalByRefObject
NUnit.Compatibility.LongLivedMarshalByRefObject.LongLivedMarshalByRefObject() -> void
NUnit.Framework.ActionTargets
NUnit.Framework.ActionTargets.Default = 0 -> NUnit.Framework.ActionTargets
NUnit.Framework.ActionTargets.Suite = 2 -> NUnit.Framework.ActionTargets
NUnit.Framework.ActionTargets.Test = 1 -> NUnit.Framework.ActionTargets
NUnit.Framework.ApartmentAttribute
NUnit.Framework.ApartmentAttribute.ApartmentAttribute(System.Threading.ApartmentState apartmentState) -> void
NUnit.Framework.Api.DefaultTestAssemblyBuilder
NUnit.Framework.Api.DefaultTestAssemblyBuilder.Build(System.Reflection.Assembly assembly, System.Collections.Generic.IDictionary<string, object> options) -> NUnit.Framework.Interfaces.ITest
NUnit.Framework.Api.DefaultTestAssemblyBuilder.Build(string assemblyNameOrPath, System.Collections.Generic.IDictionary<string, object> options) -> NUnit.Framework.Interfaces.ITest
NUnit.Framework.Api.DefaultTestAssemblyBuilder.DefaultTestAssemblyBuilder() -> void
NUnit.Framework.Api.FrameworkController
NUnit.Framework.Api.FrameworkController.Assembly.get -> System.Reflection.Assembly
NUnit.Framework.Api.FrameworkController.AssemblyNameOrPath.get -> string
NUnit.Framework.Api.FrameworkController.Builder.get -> NUnit.Framework.Api.ITestAssemblyBuilder
NUnit.Framework.Api.FrameworkController.CountTests(string filter) -> int
NUnit.Framework.Api.FrameworkController.CountTestsAction
NUnit.Framework.Api.FrameworkController.CountTestsAction.CountTestsAction(NUnit.Framework.Api.FrameworkController controller, string filter, object handler) -> void
NUnit.Framework.Api.FrameworkController.ExploreTests(string filter) -> string
NUnit.Framework.Api.FrameworkController.ExploreTestsAction
NUnit.Framework.Api.FrameworkController.ExploreTestsAction.ExploreTestsAction(NUnit.Framework.Api.FrameworkController controller, string filter, object handler) -> void
NUnit.Framework.Api.FrameworkController.FrameworkController(System.Reflection.Assembly assembly, string idPrefix, System.Collections.IDictionary settings) -> void
NUnit.Framework.Api.FrameworkController.FrameworkController(System.Reflection.Assembly assembly, string idPrefix, System.Collections.IDictionary settings, string runnerType, string builderType) -> void
NUnit.Framework.Api.FrameworkController.FrameworkController(string assemblyNameOrPath, string idPrefix, System.Collections.IDictionary settings) -> void
NUnit.Framework.Api.FrameworkController.FrameworkController(string assemblyNameOrPath, string idPrefix, System.Collections.IDictionary settings, string runnerType, string builderType) -> void
NUnit.Framework.Api.FrameworkController.FrameworkControllerAction
NUnit.Framework.Api.FrameworkController.FrameworkControllerAction.FrameworkControllerAction() -> void
NUnit.Framework.Api.FrameworkController.LoadTests() -> string
NUnit.Framework.Api.FrameworkController.LoadTestsAction
NUnit.Framework.Api.FrameworkController.LoadTestsAction.LoadTestsAction(NUnit.Framework.Api.FrameworkController controller, object handler) -> void
NUnit.Framework.Api.FrameworkController.RunAsyncAction
NUnit.Framework.Api.FrameworkController.RunAsyncAction.RunAsyncAction(NUnit.Framework.Api.FrameworkController controller, string filter, object handler) -> void
NUnit.Framework.Api.FrameworkController.RunTests(System.Action<string> callback, string filter) -> string
NUnit.Framework.Api.FrameworkController.RunTests(string filter) -> string
NUnit.Framework.Api.FrameworkController.RunTestsAction
NUnit.Framework.Api.FrameworkController.RunTestsAction.RunTestsAction(NUnit.Framework.Api.FrameworkController controller, string filter, object handler) -> void
NUnit.Framework.Api.FrameworkController.Runner.get -> NUnit.Framework.Api.ITestAssemblyRunner
NUnit.Framework.Api.FrameworkController.StopRun(bool force) -> void
NUnit.Framework.Api.FrameworkController.StopRunAction
NUnit.Framework.Api.FrameworkController.StopRunAction.StopRunAction(NUnit.Framework.Api.FrameworkController controller, bool force, object handler) -> void
NUnit.Framework.Api.ITestAssemblyBuilder
NUnit.Framework.Api.ITestAssemblyBuilder.Build(System.Reflection.Assembly assembly, System.Collections.Generic.IDictionary<string, object> options) -> NUnit.Framework.Interfaces.ITest
NUnit.Framework.Api.ITestAssemblyBuilder.Build(string assemblyName, System.Collections.Generic.IDictionary<string, object> options) -> NUnit.Framework.Interfaces.ITest
NUnit.Framework.Api.ITestAssemblyRunner
NUnit.Framework.Api.ITestAssemblyRunner.CountTestCases(NUnit.Framework.Interfaces.ITestFilter filter) -> int
NUnit.Framework.Api.ITestAssemblyRunner.ExploreTests(NUnit.Framework.Interfaces.ITestFilter filter) -> NUnit.Framework.Interfaces.ITest
NUnit.Framework.Api.ITestAssemblyRunner.IsTestComplete.get -> bool
NUnit.Framework.Api.ITestAssemblyRunner.IsTestLoaded.get -> bool
NUnit.Framework.Api.ITestAssemblyRunner.IsTestRunning.get -> bool
NUnit.Framework.Api.ITestAssemblyRunner.Load(System.Reflection.Assembly assembly, System.Collections.Generic.IDictionary<string, object> settings) -> NUnit.Framework.Interfaces.ITest
NUnit.Framework.Api.ITestAssemblyRunner.Load(string assemblyName, System.Collections.Generic.IDictionary<string, object> settings) -> NUnit.Framework.Interfaces.ITest
NUnit.Framework.Api.ITestAssemblyRunner.LoadedTest.get -> NUnit.Framework.Interfaces.ITest
NUnit.Framework.Api.ITestAssemblyRunner.Result.get -> NUnit.Framework.Interfaces.ITestResult
NUnit.Framework.Api.ITestAssemblyRunner.Run(NUnit.Framework.Interfaces.ITestListener listener, NUnit.Framework.Interfaces.ITestFilter filter) -> NUnit.Framework.Interfaces.ITestResult
NUnit.Framework.Api.ITestAssemblyRunner.RunAsync(NUnit.Framework.Interfaces.ITestListener listener, NUnit.Framework.Interfaces.ITestFilter filter) -> void
NUnit.Framework.Api.ITestAssemblyRunner.StopRun(bool force) -> void
NUnit.Framework.Api.ITestAssemblyRunner.WaitForCompletion(int timeout) -> bool
NUnit.Framework.Api.NUnitTestAssemblyRunner
NUnit.Framework.Api.NUnitTestAssemblyRunner.CountTestCases(NUnit.Framework.Interfaces.ITestFilter filter) -> int
NUnit.Framework.Api.NUnitTestAssemblyRunner.ExploreTests(NUnit.Framework.Interfaces.ITestFilter filter) -> NUnit.Framework.Interfaces.ITest
NUnit.Framework.Api.NUnitTestAssemblyRunner.IsTestComplete.get -> bool
NUnit.Framework.Api.NUnitTestAssemblyRunner.IsTestLoaded.get -> bool
NUnit.Framework.Api.NUnitTestAssemblyRunner.IsTestRunning.get -> bool
NUnit.Framework.Api.NUnitTestAssemblyRunner.Load(System.Reflection.Assembly assembly, System.Collections.Generic.IDictionary<string, object> settings) -> NUnit.Framework.Interfaces.ITest
NUnit.Framework.Api.NUnitTestAssemblyRunner.Load(string assemblyNameOrPath, System.Collections.Generic.IDictionary<string, object> settings) -> NUnit.Framework.Interfaces.ITest
NUnit.Framework.Api.NUnitTestAssemblyRunner.LoadedTest.get -> NUnit.Framework.Interfaces.ITest
NUnit.Framework.Api.NUnitTestAssemblyRunner.NUnitTestAssemblyRunner(NUnit.Framework.Api.ITestAssemblyBuilder builder) -> void
NUnit.Framework.Api.NUnitTestAssemblyRunner.Result.get -> NUnit.Framework.Interfaces.ITestResult
NUnit.Framework.Api.NUnitTestAssemblyRunner.Run(NUnit.Framework.Interfaces.ITestListener listener, NUnit.Framework.Interfaces.ITestFilter filter) -> NUnit.Framework.Interfaces.ITestResult
NUnit.Framework.Api.NUnitTestAssemblyRunner.RunAsync(NUnit.Framework.Interfaces.ITestListener listener, NUnit.Framework.Interfaces.ITestFilter filter) -> void
NUnit.Framework.Api.NUnitTestAssemblyRunner.StopRun(bool force) -> void
NUnit.Framework.Api.NUnitTestAssemblyRunner.WaitForCompletion(int timeout) -> bool
NUnit.Framework.Api.NUnitTestAssemblyRunner.WrapInNUnitCallContext(System.Action action) -> void
NUnit.Framework.Assert
NUnit.Framework.Assert.Assert() -> void
NUnit.Framework.AssertionException
NUnit.Framework.AssertionException.AssertionException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
NUnit.Framework.AssertionException.AssertionException(string message) -> void
NUnit.Framework.AssertionException.AssertionException(string message, System.Exception inner) -> void
NUnit.Framework.AssertionHelper
NUnit.Framework.AssertionHelper.All.get -> NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.AssertionHelper.AssertionHelper() -> void
NUnit.Framework.AssertionHelper.AssignableFrom(System.Type expectedType) -> NUnit.Framework.Constraints.AssignableFromConstraint
NUnit.Framework.AssertionHelper.AssignableFrom<TExpected>() -> NUnit.Framework.Constraints.AssignableFromConstraint
NUnit.Framework.AssertionHelper.AssignableTo(System.Type expectedType) -> NUnit.Framework.Constraints.AssignableToConstraint
NUnit.Framework.AssertionHelper.AssignableTo<TExpected>() -> NUnit.Framework.Constraints.AssignableToConstraint
NUnit.Framework.AssertionHelper.AtLeast(object expected) -> NUnit.Framework.Constraints.GreaterThanOrEqualConstraint
NUnit.Framework.AssertionHelper.AtMost(object expected) -> NUnit.Framework.Constraints.LessThanOrEqualConstraint
NUnit.Framework.AssertionHelper.Attribute(System.Type expectedType) -> NUnit.Framework.Constraints.ResolvableConstraintExpression
NUnit.Framework.AssertionHelper.Attribute<TExpected>() -> NUnit.Framework.Constraints.ResolvableConstraintExpression
NUnit.Framework.AssertionHelper.BinarySerializable.get -> NUnit.Framework.Constraints.BinarySerializableConstraint
NUnit.Framework.AssertionHelper.Contains(object expected) -> NUnit.Framework.Constraints.SomeItemsConstraint
NUnit.Framework.AssertionHelper.Contains(string expected) -> NUnit.Framework.Constraints.ContainsConstraint
NUnit.Framework.AssertionHelper.ContainsSubstring(string expected) -> NUnit.Framework.Constraints.SubstringConstraint
NUnit.Framework.AssertionHelper.Count.get -> NUnit.Framework.Constraints.ResolvableConstraintExpression
NUnit.Framework.AssertionHelper.DoesNotContain(string expected) -> NUnit.Framework.Constraints.SubstringConstraint
NUnit.Framework.AssertionHelper.DoesNotEndWith(string expected) -> NUnit.Framework.Constraints.EndsWithConstraint
NUnit.Framework.AssertionHelper.DoesNotMatch(string pattern) -> NUnit.Framework.Constraints.RegexConstraint
NUnit.Framework.AssertionHelper.DoesNotStartWith(string expected) -> NUnit.Framework.Constraints.StartsWithConstraint
NUnit.Framework.AssertionHelper.Empty.get -> NUnit.Framework.Constraints.EmptyConstraint
NUnit.Framework.AssertionHelper.EndWith(string expected) -> NUnit.Framework.Constraints.EndsWithConstraint
NUnit.Framework.AssertionHelper.EndsWith(string expected) -> NUnit.Framework.Constraints.EndsWithConstraint
NUnit.Framework.AssertionHelper.EqualTo(object expected) -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.AssertionHelper.EquivalentTo(System.Collections.IEnumerable expected) -> NUnit.Framework.Constraints.CollectionEquivalentConstraint
NUnit.Framework.AssertionHelper.Expect(NUnit.Framework.TestDelegate code, NUnit.Framework.Constraints.IResolveConstraint constraint) -> void
NUnit.Framework.AssertionHelper.Expect(bool condition) -> void
NUnit.Framework.AssertionHelper.Expect(bool condition, string message, params object[] args) -> void
NUnit.Framework.AssertionHelper.Expect<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del, NUnit.Framework.Constraints.IResolveConstraint expr) -> void
NUnit.Framework.AssertionHelper.Expect<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del, NUnit.Framework.Constraints.IResolveConstraint expr, string message, params object[] args) -> void
NUnit.Framework.AssertionHelper.False.get -> NUnit.Framework.Constraints.FalseConstraint
NUnit.Framework.AssertionHelper.GreaterThan(object expected) -> NUnit.Framework.Constraints.GreaterThanConstraint
NUnit.Framework.AssertionHelper.GreaterThanOrEqualTo(object expected) -> NUnit.Framework.Constraints.GreaterThanOrEqualConstraint
NUnit.Framework.AssertionHelper.InRange(object from, object to) -> NUnit.Framework.Constraints.RangeConstraint
NUnit.Framework.AssertionHelper.InnerException.get -> NUnit.Framework.Constraints.ResolvableConstraintExpression
NUnit.Framework.AssertionHelper.InstanceOf(System.Type expectedType) -> NUnit.Framework.Constraints.InstanceOfTypeConstraint
NUnit.Framework.AssertionHelper.InstanceOf<TExpected>() -> NUnit.Framework.Constraints.InstanceOfTypeConstraint
NUnit.Framework.AssertionHelper.Length.get -> NUnit.Framework.Constraints.ResolvableConstraintExpression
NUnit.Framework.AssertionHelper.LessThan(object expected) -> NUnit.Framework.Constraints.LessThanConstraint
NUnit.Framework.AssertionHelper.LessThanOrEqualTo(object expected) -> NUnit.Framework.Constraints.LessThanOrEqualConstraint
NUnit.Framework.AssertionHelper.Map(System.Collections.ICollection original) -> NUnit.Framework.ListMapper
NUnit.Framework.AssertionHelper.Match(string pattern) -> NUnit.Framework.Constraints.RegexConstraint
NUnit.Framework.AssertionHelper.Matches(string pattern) -> NUnit.Framework.Constraints.RegexConstraint
NUnit.Framework.AssertionHelper.Member(object expected) -> NUnit.Framework.Constraints.SomeItemsConstraint
NUnit.Framework.AssertionHelper.Message.get -> NUnit.Framework.Constraints.ResolvableConstraintExpression
NUnit.Framework.AssertionHelper.NaN.get -> NUnit.Framework.Constraints.NaNConstraint
NUnit.Framework.AssertionHelper.Negative.get -> NUnit.Framework.Constraints.LessThanConstraint
NUnit.Framework.AssertionHelper.No.get -> NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.AssertionHelper.None.get -> NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.AssertionHelper.Not.get -> NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.AssertionHelper.Null.get -> NUnit.Framework.Constraints.NullConstraint
NUnit.Framework.AssertionHelper.Ordered.get -> NUnit.Framework.Constraints.CollectionOrderedConstraint
NUnit.Framework.AssertionHelper.Positive.get -> NUnit.Framework.Constraints.GreaterThanConstraint
NUnit.Framework.AssertionHelper.Property(string name) -> NUnit.Framework.Constraints.ResolvableConstraintExpression
NUnit.Framework.AssertionHelper.SameAs(object expected) -> NUnit.Framework.Constraints.SameAsConstraint
NUnit.Framework.AssertionHelper.SamePath(string expected) -> NUnit.Framework.Constraints.SamePathConstraint
NUnit.Framework.AssertionHelper.SamePathOrUnder(string expected) -> NUnit.Framework.Constraints.SamePathOrUnderConstraint
NUnit.Framework.AssertionHelper.Some.get -> NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.AssertionHelper.StartWith(string expected) -> NUnit.Framework.Constraints.StartsWithConstraint
NUnit.Framework.AssertionHelper.StartsWith(string expected) -> NUnit.Framework.Constraints.StartsWithConstraint
NUnit.Framework.AssertionHelper.StringContaining(string expected) -> NUnit.Framework.Constraints.SubstringConstraint
NUnit.Framework.AssertionHelper.StringEnding(string expected) -> NUnit.Framework.Constraints.EndsWithConstraint
NUnit.Framework.AssertionHelper.StringMatching(string pattern) -> NUnit.Framework.Constraints.RegexConstraint
NUnit.Framework.AssertionHelper.StringStarting(string expected) -> NUnit.Framework.Constraints.StartsWithConstraint
NUnit.Framework.AssertionHelper.SubPathOf(string expected) -> NUnit.Framework.Constraints.SubPathConstraint
NUnit.Framework.AssertionHelper.SubsetOf(System.Collections.IEnumerable expected) -> NUnit.Framework.Constraints.CollectionSubsetConstraint
NUnit.Framework.AssertionHelper.SupersetOf(System.Collections.IEnumerable expected) -> NUnit.Framework.Constraints.CollectionSupersetConstraint
NUnit.Framework.AssertionHelper.True.get -> NUnit.Framework.Constraints.TrueConstraint
NUnit.Framework.AssertionHelper.TypeOf(System.Type expectedType) -> NUnit.Framework.Constraints.ExactTypeConstraint
NUnit.Framework.AssertionHelper.TypeOf<TExpected>() -> NUnit.Framework.Constraints.ExactTypeConstraint
NUnit.Framework.AssertionHelper.Unique.get -> NUnit.Framework.Constraints.UniqueItemsConstraint
NUnit.Framework.AssertionHelper.XmlSerializable.get -> NUnit.Framework.Constraints.XmlSerializableConstraint
NUnit.Framework.AssertionHelper.Zero.get -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Assume
NUnit.Framework.Assume.Assume() -> void
NUnit.Framework.AsyncTestDelegate
NUnit.Framework.AuthorAttribute
NUnit.Framework.AuthorAttribute.AuthorAttribute(string name) -> void
NUnit.Framework.AuthorAttribute.AuthorAttribute(string name, string email) -> void
NUnit.Framework.CategoryAttribute
NUnit.Framework.CategoryAttribute.ApplyToTest(NUnit.Framework.Internal.Test test) -> void
NUnit.Framework.CategoryAttribute.CategoryAttribute() -> void
NUnit.Framework.CategoryAttribute.CategoryAttribute(string name) -> void
NUnit.Framework.CategoryAttribute.Name.get -> string
NUnit.Framework.CategoryAttribute.categoryName -> string
NUnit.Framework.CollectionAssert
NUnit.Framework.CollectionAssert.CollectionAssert() -> void
NUnit.Framework.CombinatorialAttribute
NUnit.Framework.CombinatorialAttribute.CombinatorialAttribute() -> void
NUnit.Framework.CombiningStrategyAttribute
NUnit.Framework.CombiningStrategyAttribute.ApplyToTest(NUnit.Framework.Internal.Test test) -> void
NUnit.Framework.CombiningStrategyAttribute.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo method, NUnit.Framework.Internal.Test suite) -> System.Collections.Generic.IEnumerable<NUnit.Framework.Internal.TestMethod>
NUnit.Framework.CombiningStrategyAttribute.CombiningStrategyAttribute(NUnit.Framework.Interfaces.ICombiningStrategy strategy, NUnit.Framework.Interfaces.IParameterDataProvider provider) -> void
NUnit.Framework.CombiningStrategyAttribute.CombiningStrategyAttribute(object strategy, object provider) -> void
NUnit.Framework.Constraints.ActualValueDelegate<TActual>
NUnit.Framework.Constraints.AllItemsConstraint
NUnit.Framework.Constraints.AllItemsConstraint.AllItemsConstraint(NUnit.Framework.Constraints.IConstraint itemConstraint) -> void
NUnit.Framework.Constraints.AllOperator
NUnit.Framework.Constraints.AllOperator.AllOperator() -> void
NUnit.Framework.Constraints.AndConstraint
NUnit.Framework.Constraints.AndConstraint.AndConstraint(NUnit.Framework.Constraints.IConstraint left, NUnit.Framework.Constraints.IConstraint right) -> void
NUnit.Framework.Constraints.AndOperator
NUnit.Framework.Constraints.AndOperator.AndOperator() -> void
NUnit.Framework.Constraints.AnyOfConstraint
NUnit.Framework.Constraints.AnyOfConstraint.AnyOfConstraint(object[] expected) -> void
NUnit.Framework.Constraints.AnyOfConstraint.IgnoreCase.get -> NUnit.Framework.Constraints.AnyOfConstraint
NUnit.Framework.Constraints.AnyOfConstraint.Using(System.Collections.IComparer comparer) -> NUnit.Framework.Constraints.AnyOfConstraint
NUnit.Framework.Constraints.AnyOfConstraint.Using(System.Collections.IEqualityComparer comparer) -> NUnit.Framework.Constraints.AnyOfConstraint
NUnit.Framework.Constraints.AnyOfConstraint.Using<T>(System.Collections.Generic.IComparer<T> comparer) -> NUnit.Framework.Constraints.AnyOfConstraint
NUnit.Framework.Constraints.AnyOfConstraint.Using<T>(System.Collections.Generic.IEqualityComparer<T> comparer) -> NUnit.Framework.Constraints.AnyOfConstraint
NUnit.Framework.Constraints.AnyOfConstraint.Using<T>(System.Comparison<T> comparer) -> NUnit.Framework.Constraints.AnyOfConstraint
NUnit.Framework.Constraints.AnyOfConstraint.Using<T>(System.Func<T, T, bool> comparer) -> NUnit.Framework.Constraints.AnyOfConstraint
NUnit.Framework.Constraints.AssignableFromConstraint
NUnit.Framework.Constraints.AssignableFromConstraint.AssignableFromConstraint(System.Type type) -> void
NUnit.Framework.Constraints.AssignableToConstraint
NUnit.Framework.Constraints.AssignableToConstraint.AssignableToConstraint(System.Type type) -> void
NUnit.Framework.Constraints.AttributeConstraint
NUnit.Framework.Constraints.AttributeConstraint.AttributeConstraint(System.Type type, NUnit.Framework.Constraints.IConstraint baseConstraint) -> void
NUnit.Framework.Constraints.AttributeExistsConstraint
NUnit.Framework.Constraints.AttributeExistsConstraint.AttributeExistsConstraint(System.Type type) -> void
NUnit.Framework.Constraints.AttributeOperator
NUnit.Framework.Constraints.AttributeOperator.AttributeOperator(System.Type type) -> void
NUnit.Framework.Constraints.BinaryConstraint
NUnit.Framework.Constraints.BinaryConstraint.BinaryConstraint(NUnit.Framework.Constraints.IConstraint left, NUnit.Framework.Constraints.IConstraint right) -> void
NUnit.Framework.Constraints.BinaryConstraint.Left -> NUnit.Framework.Constraints.IConstraint
NUnit.Framework.Constraints.BinaryConstraint.Right -> NUnit.Framework.Constraints.IConstraint
NUnit.Framework.Constraints.BinaryOperator
NUnit.Framework.Constraints.BinaryOperator.BinaryOperator() -> void
NUnit.Framework.Constraints.BinarySerializableConstraint
NUnit.Framework.Constraints.BinarySerializableConstraint.BinarySerializableConstraint() -> void
NUnit.Framework.Constraints.CollectionConstraint
NUnit.Framework.Constraints.CollectionConstraint.CollectionConstraint() -> void
NUnit.Framework.Constraints.CollectionConstraint.CollectionConstraint(object arg) -> void
NUnit.Framework.Constraints.CollectionContainsConstraint
NUnit.Framework.Constraints.CollectionContainsConstraint.CollectionContainsConstraint(object expected) -> void
NUnit.Framework.Constraints.CollectionContainsConstraint.Expected.get -> object
NUnit.Framework.Constraints.CollectionContainsConstraint.Using<TCollectionType, TMemberType>(System.Func<TCollectionType, TMemberType, bool> comparison) -> NUnit.Framework.Constraints.CollectionContainsConstraint
NUnit.Framework.Constraints.CollectionEquivalentConstraint
NUnit.Framework.Constraints.CollectionEquivalentConstraint.CollectionEquivalentConstraint(System.Collections.IEnumerable expected) -> void
NUnit.Framework.Constraints.CollectionEquivalentConstraint.Using<TActual, TExpected>(System.Func<TActual, TExpected, bool> comparison) -> NUnit.Framework.Constraints.CollectionEquivalentConstraint
NUnit.Framework.Constraints.CollectionEquivalentConstraintResult
NUnit.Framework.Constraints.CollectionEquivalentConstraintResult.CollectionEquivalentConstraintResult(NUnit.Framework.Constraints.CollectionEquivalentConstraint constraint, NUnit.Framework.Constraints.CollectionTally.CollectionTallyResult tallyResult, object actual, bool isSuccess) -> void
NUnit.Framework.Constraints.CollectionItemsEqualConstraint
NUnit.Framework.Constraints.CollectionItemsEqualConstraint.CollectionItemsEqualConstraint() -> void
NUnit.Framework.Constraints.CollectionItemsEqualConstraint.CollectionItemsEqualConstraint(object arg) -> void
NUnit.Framework.Constraints.CollectionItemsEqualConstraint.IgnoreCase.get -> NUnit.Framework.Constraints.CollectionItemsEqualConstraint
NUnit.Framework.Constraints.CollectionItemsEqualConstraint.IgnoringCase.get -> bool
NUnit.Framework.Constraints.CollectionItemsEqualConstraint.ItemsEqual(object x, object y) -> bool
NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Tally(System.Collections.IEnumerable c) -> NUnit.Framework.Constraints.CollectionTally
NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using(System.Collections.IComparer comparer) -> NUnit.Framework.Constraints.CollectionItemsEqualConstraint
NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using(System.Collections.IEqualityComparer comparer) -> NUnit.Framework.Constraints.CollectionItemsEqualConstraint
NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using<T>(System.Collections.Generic.IComparer<T> comparer) -> NUnit.Framework.Constraints.CollectionItemsEqualConstraint
NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using<T>(System.Collections.Generic.IEqualityComparer<T> comparer) -> NUnit.Framework.Constraints.CollectionItemsEqualConstraint
NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using<T>(System.Comparison<T> comparison) -> NUnit.Framework.Constraints.CollectionItemsEqualConstraint
NUnit.Framework.Constraints.CollectionItemsEqualConstraint.Using<T>(System.Func<T, T, bool> comparer) -> NUnit.Framework.Constraints.CollectionItemsEqualConstraint
NUnit.Framework.Constraints.CollectionItemsEqualConstraint.UsingExternalComparer.get -> bool
NUnit.Framework.Constraints.CollectionOperator
NUnit.Framework.Constraints.CollectionOperator.CollectionOperator() -> void
NUnit.Framework.Constraints.CollectionOrderedConstraint
NUnit.Framework.Constraints.CollectionOrderedConstraint.Ascending.get -> NUnit.Framework.Constraints.CollectionOrderedConstraint
NUnit.Framework.Constraints.CollectionOrderedConstraint.By(string propertyName) -> NUnit.Framework.Constraints.CollectionOrderedConstraint
NUnit.Framework.Constraints.CollectionOrderedConstraint.CollectionOrderedConstraint() -> void
NUnit.Framework.Constraints.CollectionOrderedConstraint.Descending.get -> NUnit.Framework.Constraints.CollectionOrderedConstraint
NUnit.Framework.Constraints.CollectionOrderedConstraint.Then.get -> NUnit.Framework.Constraints.CollectionOrderedConstraint
NUnit.Framework.Constraints.CollectionOrderedConstraint.Using(System.Collections.IComparer comparer) -> NUnit.Framework.Constraints.CollectionOrderedConstraint
NUnit.Framework.Constraints.CollectionOrderedConstraint.Using<T>(System.Collections.Generic.IComparer<T> comparer) -> NUnit.Framework.Constraints.CollectionOrderedConstraint
NUnit.Framework.Constraints.CollectionOrderedConstraint.Using<T>(System.Comparison<T> comparer) -> NUnit.Framework.Constraints.CollectionOrderedConstraint
NUnit.Framework.Constraints.CollectionSubsetConstraint
NUnit.Framework.Constraints.CollectionSubsetConstraint.CollectionSubsetConstraint(System.Collections.IEnumerable expected) -> void
NUnit.Framework.Constraints.CollectionSubsetConstraint.Using<TSubsetType, TSupersetType>(System.Func<TSubsetType, TSupersetType, bool> comparison) -> NUnit.Framework.Constraints.CollectionSubsetConstraint
NUnit.Framework.Constraints.CollectionSupersetConstraint
NUnit.Framework.Constraints.CollectionSupersetConstraint.CollectionSupersetConstraint(System.Collections.IEnumerable expected) -> void
NUnit.Framework.Constraints.CollectionSupersetConstraint.Using<TSupersetType, TSubsetType>(System.Func<TSupersetType, TSubsetType, bool> comparison) -> NUnit.Framework.Constraints.CollectionSupersetConstraint
NUnit.Framework.Constraints.CollectionTally
NUnit.Framework.Constraints.CollectionTally.CollectionTally(NUnit.Framework.Constraints.NUnitEqualityComparer comparer, System.Collections.IEnumerable c) -> void
NUnit.Framework.Constraints.CollectionTally.CollectionTallyResult
NUnit.Framework.Constraints.CollectionTally.CollectionTallyResult.CollectionTallyResult(System.Collections.Generic.List<object> missingItems, System.Collections.Generic.List<object> extraItems) -> void
NUnit.Framework.Constraints.CollectionTally.CollectionTallyResult.ExtraItems.get -> System.Collections.Generic.List<object>
NUnit.Framework.Constraints.CollectionTally.CollectionTallyResult.MissingItems.get -> System.Collections.Generic.List<object>
NUnit.Framework.Constraints.CollectionTally.Result.get -> NUnit.Framework.Constraints.CollectionTally.CollectionTallyResult
NUnit.Framework.Constraints.CollectionTally.TryRemove(System.Collections.IEnumerable c) -> void
NUnit.Framework.Constraints.CollectionTally.TryRemove(object o) -> void
NUnit.Framework.Constraints.ComparisonAdapter
NUnit.Framework.Constraints.ComparisonAdapter.ComparisonAdapter() -> void
NUnit.Framework.Constraints.ComparisonConstraint
NUnit.Framework.Constraints.ComparisonConstraint.ComparisonConstraint(object expected) -> void
NUnit.Framework.Constraints.ComparisonConstraint.DefaultDescription(string comparisonText) -> string
NUnit.Framework.Constraints.ComparisonConstraint.Percent.get -> NUnit.Framework.Constraints.ComparisonConstraint
NUnit.Framework.Constraints.ComparisonConstraint.Using(System.Collections.IComparer comparer) -> NUnit.Framework.Constraints.ComparisonConstraint
NUnit.Framework.Constraints.ComparisonConstraint.Using<T>(System.Collections.Generic.IComparer<T> comparer) -> NUnit.Framework.Constraints.ComparisonConstraint
NUnit.Framework.Constraints.ComparisonConstraint.Using<T>(System.Comparison<T> comparer) -> NUnit.Framework.Constraints.ComparisonConstraint
NUnit.Framework.Constraints.ComparisonConstraint.Within(object amount) -> NUnit.Framework.Constraints.ComparisonConstraint
NUnit.Framework.Constraints.Constraint
NUnit.Framework.Constraints.Constraint.After(int delay) -> NUnit.Framework.Constraints.DelayedConstraint.WithRawDelayInterval
NUnit.Framework.Constraints.Constraint.After(int delayInMilliseconds, int pollingInterval) -> NUnit.Framework.Constraints.DelayedConstraint
NUnit.Framework.Constraints.Constraint.And.get -> NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.Constraints.Constraint.Arguments.get -> object[]
NUnit.Framework.Constraints.Constraint.Builder.get -> NUnit.Framework.Constraints.ConstraintBuilder
NUnit.Framework.Constraints.Constraint.Builder.set -> void
NUnit.Framework.Constraints.Constraint.Constraint(params object[] args) -> void
NUnit.Framework.Constraints.Constraint.Or.get -> NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.Constraints.Constraint.With.get -> NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.Constraints.ConstraintBuilder
NUnit.Framework.Constraints.ConstraintBuilder.Append(NUnit.Framework.Constraints.Constraint constraint) -> void
NUnit.Framework.Constraints.ConstraintBuilder.Append(NUnit.Framework.Constraints.ConstraintOperator op) -> void
NUnit.Framework.Constraints.ConstraintBuilder.ConstraintBuilder() -> void
NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack
NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.ConstraintStack(NUnit.Framework.Constraints.ConstraintBuilder builder) -> void
NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Empty.get -> bool
NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Pop() -> NUnit.Framework.Constraints.IConstraint
NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack.Push(NUnit.Framework.Constraints.IConstraint constraint) -> void
NUnit.Framework.Constraints.ConstraintBuilder.Resolve() -> NUnit.Framework.Constraints.IConstraint
NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.All.get -> NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.AnyOf(params object[] expected) -> NUnit.Framework.Constraints.AnyOfConstraint
NUnit.Framework.Constraints.ConstraintExpression.Append(NUnit.Framework.Constraints.Constraint constraint) -> NUnit.Framework.Constraints.Constraint
NUnit.Framework.Constraints.ConstraintExpression.Append(NUnit.Framework.Constraints.ConstraintOperator op) -> NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.Append(NUnit.Framework.Constraints.SelfResolvingOperator op) -> NUnit.Framework.Constraints.ResolvableConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom(System.Type expectedType) -> NUnit.Framework.Constraints.AssignableFromConstraint
NUnit.Framework.Constraints.ConstraintExpression.AssignableFrom<TExpected>() -> NUnit.Framework.Constraints.AssignableFromConstraint
NUnit.Framework.Constraints.ConstraintExpression.AssignableTo(System.Type expectedType) -> NUnit.Framework.Constraints.AssignableToConstraint
NUnit.Framework.Constraints.ConstraintExpression.AssignableTo<TExpected>() -> NUnit.Framework.Constraints.AssignableToConstraint
NUnit.Framework.Constraints.ConstraintExpression.AtLeast(object expected) -> NUnit.Framework.Constraints.GreaterThanOrEqualConstraint
NUnit.Framework.Constraints.ConstraintExpression.AtMost(object expected) -> NUnit.Framework.Constraints.LessThanOrEqualConstraint
NUnit.Framework.Constraints.ConstraintExpression.Attribute(System.Type expectedType) -> NUnit.Framework.Constraints.ResolvableConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.Attribute<TExpected>() -> NUnit.Framework.Constraints.ResolvableConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.BinarySerializable.get -> NUnit.Framework.Constraints.BinarySerializableConstraint
NUnit.Framework.Constraints.ConstraintExpression.ConstraintExpression() -> void
NUnit.Framework.Constraints.ConstraintExpression.ConstraintExpression(NUnit.Framework.Constraints.ConstraintBuilder builder) -> void
NUnit.Framework.Constraints.ConstraintExpression.Contain(object expected) -> NUnit.Framework.Constraints.SomeItemsConstraint
NUnit.Framework.Constraints.ConstraintExpression.Contain(string expected) -> NUnit.Framework.Constraints.ContainsConstraint
NUnit.Framework.Constraints.ConstraintExpression.ContainKey(object expected) -> NUnit.Framework.Constraints.DictionaryContainsKeyConstraint
NUnit.Framework.Constraints.ConstraintExpression.ContainValue(object expected) -> NUnit.Framework.Constraints.DictionaryContainsValueConstraint
NUnit.Framework.Constraints.ConstraintExpression.Contains(object expected) -> NUnit.Framework.Constraints.SomeItemsConstraint
NUnit.Framework.Constraints.ConstraintExpression.Contains(string expected) -> NUnit.Framework.Constraints.ContainsConstraint
NUnit.Framework.Constraints.ConstraintExpression.ContainsSubstring(string expected) -> NUnit.Framework.Constraints.SubstringConstraint
NUnit.Framework.Constraints.ConstraintExpression.Count.get -> NUnit.Framework.Constraints.ResolvableConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.Empty.get -> NUnit.Framework.Constraints.EmptyConstraint
NUnit.Framework.Constraints.ConstraintExpression.EndWith(string expected) -> NUnit.Framework.Constraints.EndsWithConstraint
NUnit.Framework.Constraints.ConstraintExpression.EndsWith(string expected) -> NUnit.Framework.Constraints.EndsWithConstraint
NUnit.Framework.Constraints.ConstraintExpression.EqualTo(object expected) -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.ConstraintExpression.EquivalentTo(System.Collections.IEnumerable expected) -> NUnit.Framework.Constraints.CollectionEquivalentConstraint
NUnit.Framework.Constraints.ConstraintExpression.Exactly(int expectedCount) -> NUnit.Framework.Constraints.ItemsConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.Exist.get -> NUnit.Framework.Constraints.Constraint
NUnit.Framework.Constraints.ConstraintExpression.False.get -> NUnit.Framework.Constraints.FalseConstraint
NUnit.Framework.Constraints.ConstraintExpression.GreaterThan(object expected) -> NUnit.Framework.Constraints.GreaterThanConstraint
NUnit.Framework.Constraints.ConstraintExpression.GreaterThanOrEqualTo(object expected) -> NUnit.Framework.Constraints.GreaterThanOrEqualConstraint
NUnit.Framework.Constraints.ConstraintExpression.InRange(object from, object to) -> NUnit.Framework.Constraints.RangeConstraint
NUnit.Framework.Constraints.ConstraintExpression.InnerException.get -> NUnit.Framework.Constraints.ResolvableConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.InstanceOf(System.Type expectedType) -> NUnit.Framework.Constraints.InstanceOfTypeConstraint
NUnit.Framework.Constraints.ConstraintExpression.InstanceOf<TExpected>() -> NUnit.Framework.Constraints.InstanceOfTypeConstraint
NUnit.Framework.Constraints.ConstraintExpression.Length.get -> NUnit.Framework.Constraints.ResolvableConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.LessThan(object expected) -> NUnit.Framework.Constraints.LessThanConstraint
NUnit.Framework.Constraints.ConstraintExpression.LessThanOrEqualTo(object expected) -> NUnit.Framework.Constraints.LessThanOrEqualConstraint
NUnit.Framework.Constraints.ConstraintExpression.Match(string pattern) -> NUnit.Framework.Constraints.RegexConstraint
NUnit.Framework.Constraints.ConstraintExpression.Matches(NUnit.Framework.Constraints.IResolveConstraint constraint) -> NUnit.Framework.Constraints.Constraint
NUnit.Framework.Constraints.ConstraintExpression.Matches(string pattern) -> NUnit.Framework.Constraints.RegexConstraint
NUnit.Framework.Constraints.ConstraintExpression.Matches<TActual>(System.Predicate<TActual> predicate) -> NUnit.Framework.Constraints.Constraint
NUnit.Framework.Constraints.ConstraintExpression.Member(object expected) -> NUnit.Framework.Constraints.SomeItemsConstraint
NUnit.Framework.Constraints.ConstraintExpression.Message.get -> NUnit.Framework.Constraints.ResolvableConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.NaN.get -> NUnit.Framework.Constraints.NaNConstraint
NUnit.Framework.Constraints.ConstraintExpression.Negative.get -> NUnit.Framework.Constraints.LessThanConstraint
NUnit.Framework.Constraints.ConstraintExpression.No.get -> NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.None.get -> NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.Not.get -> NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.Null.get -> NUnit.Framework.Constraints.NullConstraint
NUnit.Framework.Constraints.ConstraintExpression.One.get -> NUnit.Framework.Constraints.ItemsConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.Ordered.get -> NUnit.Framework.Constraints.CollectionOrderedConstraint
NUnit.Framework.Constraints.ConstraintExpression.Positive.get -> NUnit.Framework.Constraints.GreaterThanConstraint
NUnit.Framework.Constraints.ConstraintExpression.Property(string name) -> NUnit.Framework.Constraints.ResolvableConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.SameAs(object expected) -> NUnit.Framework.Constraints.SameAsConstraint
NUnit.Framework.Constraints.ConstraintExpression.SamePath(string expected) -> NUnit.Framework.Constraints.SamePathConstraint
NUnit.Framework.Constraints.ConstraintExpression.SamePathOrUnder(string expected) -> NUnit.Framework.Constraints.SamePathOrUnderConstraint
NUnit.Framework.Constraints.ConstraintExpression.Some.get -> NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.StartWith(string expected) -> NUnit.Framework.Constraints.StartsWithConstraint
NUnit.Framework.Constraints.ConstraintExpression.StartsWith(string expected) -> NUnit.Framework.Constraints.StartsWithConstraint
NUnit.Framework.Constraints.ConstraintExpression.StringContaining(string expected) -> NUnit.Framework.Constraints.SubstringConstraint
NUnit.Framework.Constraints.ConstraintExpression.StringEnding(string expected) -> NUnit.Framework.Constraints.EndsWithConstraint
NUnit.Framework.Constraints.ConstraintExpression.StringMatching(string pattern) -> NUnit.Framework.Constraints.RegexConstraint
NUnit.Framework.Constraints.ConstraintExpression.StringStarting(string expected) -> NUnit.Framework.Constraints.StartsWithConstraint
NUnit.Framework.Constraints.ConstraintExpression.SubPathOf(string expected) -> NUnit.Framework.Constraints.SubPathConstraint
NUnit.Framework.Constraints.ConstraintExpression.SubsetOf(System.Collections.IEnumerable expected) -> NUnit.Framework.Constraints.CollectionSubsetConstraint
NUnit.Framework.Constraints.ConstraintExpression.SupersetOf(System.Collections.IEnumerable expected) -> NUnit.Framework.Constraints.CollectionSupersetConstraint
NUnit.Framework.Constraints.ConstraintExpression.True.get -> NUnit.Framework.Constraints.TrueConstraint
NUnit.Framework.Constraints.ConstraintExpression.TypeOf(System.Type expectedType) -> NUnit.Framework.Constraints.ExactTypeConstraint
NUnit.Framework.Constraints.ConstraintExpression.TypeOf<TExpected>() -> NUnit.Framework.Constraints.ExactTypeConstraint
NUnit.Framework.Constraints.ConstraintExpression.Unique.get -> NUnit.Framework.Constraints.UniqueItemsConstraint
NUnit.Framework.Constraints.ConstraintExpression.With.get -> NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.Constraints.ConstraintExpression.XmlSerializable.get -> NUnit.Framework.Constraints.XmlSerializableConstraint
NUnit.Framework.Constraints.ConstraintExpression.Zero.get -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.ConstraintOperator
NUnit.Framework.Constraints.ConstraintOperator.ConstraintOperator() -> void
NUnit.Framework.Constraints.ConstraintOperator.LeftContext.get -> object
NUnit.Framework.Constraints.ConstraintOperator.LeftContext.set -> void
NUnit.Framework.Constraints.ConstraintOperator.RightContext.get -> object
NUnit.Framework.Constraints.ConstraintOperator.RightContext.set -> void
NUnit.Framework.Constraints.ConstraintOperator.left_precedence -> int
NUnit.Framework.Constraints.ConstraintOperator.right_precedence -> int
NUnit.Framework.Constraints.ConstraintResult
NUnit.Framework.Constraints.ConstraintResult.ActualValue.get -> object
NUnit.Framework.Constraints.ConstraintResult.ConstraintResult(NUnit.Framework.Constraints.IConstraint constraint, object actualValue) -> void
NUnit.Framework.Constraints.ConstraintResult.ConstraintResult(NUnit.Framework.Constraints.IConstraint constraint, object actualValue, NUnit.Framework.Constraints.ConstraintStatus status) -> void
NUnit.Framework.Constraints.ConstraintResult.ConstraintResult(NUnit.Framework.Constraints.IConstraint constraint, object actualValue, bool isSuccess) -> void
NUnit.Framework.Constraints.ConstraintResult.Description.get -> string
NUnit.Framework.Constraints.ConstraintResult.Name.get -> string
NUnit.Framework.Constraints.ConstraintResult.Status.get -> NUnit.Framework.Constraints.ConstraintStatus
NUnit.Framework.Constraints.ConstraintResult.Status.set -> void
NUnit.Framework.Constraints.ConstraintStatus
NUnit.Framework.Constraints.ConstraintStatus.Error = 3 -> NUnit.Framework.Constraints.ConstraintStatus
NUnit.Framework.Constraints.ConstraintStatus.Failure = 2 -> NUnit.Framework.Constraints.ConstraintStatus
NUnit.Framework.Constraints.ConstraintStatus.Success = 1 -> NUnit.Framework.Constraints.ConstraintStatus
NUnit.Framework.Constraints.ConstraintStatus.Unknown = 0 -> NUnit.Framework.Constraints.ConstraintStatus
NUnit.Framework.Constraints.ContainsConstraint
NUnit.Framework.Constraints.ContainsConstraint.ContainsConstraint(object expected) -> void
NUnit.Framework.Constraints.ContainsConstraint.IgnoreCase.get -> NUnit.Framework.Constraints.ContainsConstraint
NUnit.Framework.Constraints.DelayedConstraint
NUnit.Framework.Constraints.DelayedConstraint.DelayInterval.get -> NUnit.Framework.Constraints.Interval
NUnit.Framework.Constraints.DelayedConstraint.DelayInterval.set -> void
NUnit.Framework.Constraints.DelayedConstraint.DelayedConstraint(NUnit.Framework.Constraints.IConstraint baseConstraint, int delayInMilliseconds) -> void
NUnit.Framework.Constraints.DelayedConstraint.DelayedConstraint(NUnit.Framework.Constraints.IConstraint baseConstraint, int delayInMilliseconds, int pollingIntervalInMilliseconds) -> void
NUnit.Framework.Constraints.DelayedConstraint.PollingInterval.get -> NUnit.Framework.Constraints.Interval
NUnit.Framework.Constraints.DelayedConstraint.PollingInterval.set -> void
NUnit.Framework.Constraints.DelayedConstraint.WithDimensionedDelayInterval
NUnit.Framework.Constraints.DelayedConstraint.WithDimensionedDelayInterval.PollEvery(int milliSeconds) -> NUnit.Framework.Constraints.DelayedConstraint.WithRawPollingInterval
NUnit.Framework.Constraints.DelayedConstraint.WithDimensionedDelayInterval.WithDimensionedDelayInterval(NUnit.Framework.Constraints.DelayedConstraint parent) -> void
NUnit.Framework.Constraints.DelayedConstraint.WithRawDelayInterval
NUnit.Framework.Constraints.DelayedConstraint.WithRawDelayInterval.MilliSeconds.get -> NUnit.Framework.Constraints.DelayedConstraint.WithDimensionedDelayInterval
NUnit.Framework.Constraints.DelayedConstraint.WithRawDelayInterval.Minutes.get -> NUnit.Framework.Constraints.DelayedConstraint.WithDimensionedDelayInterval
NUnit.Framework.Constraints.DelayedConstraint.WithRawDelayInterval.PollEvery(int milliSeconds) -> NUnit.Framework.Constraints.DelayedConstraint.WithRawPollingInterval
NUnit.Framework.Constraints.DelayedConstraint.WithRawDelayInterval.Seconds.get -> NUnit.Framework.Constraints.DelayedConstraint.WithDimensionedDelayInterval
NUnit.Framework.Constraints.DelayedConstraint.WithRawDelayInterval.WithRawDelayInterval(NUnit.Framework.Constraints.DelayedConstraint parent) -> void
NUnit.Framework.Constraints.DelayedConstraint.WithRawPollingInterval
NUnit.Framework.Constraints.DelayedConstraint.WithRawPollingInterval.MilliSeconds.get -> NUnit.Framework.Constraints.DelayedConstraint
NUnit.Framework.Constraints.DelayedConstraint.WithRawPollingInterval.Minutes.get -> NUnit.Framework.Constraints.DelayedConstraint
NUnit.Framework.Constraints.DelayedConstraint.WithRawPollingInterval.Seconds.get -> NUnit.Framework.Constraints.DelayedConstraint
NUnit.Framework.Constraints.DelayedConstraint.WithRawPollingInterval.WithRawPollingInterval(NUnit.Framework.Constraints.DelayedConstraint parent) -> void
NUnit.Framework.Constraints.DictionaryContainsKeyConstraint
NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.DictionaryContainsKeyConstraint(object expected) -> void
NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Expected.get -> object
NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.IgnoreCase.get -> NUnit.Framework.Constraints.CollectionItemsEqualConstraint
NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Using(System.Collections.IComparer comparer) -> NUnit.Framework.Constraints.CollectionItemsEqualConstraint
NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Using(System.Collections.IEqualityComparer comparer) -> NUnit.Framework.Constraints.CollectionItemsEqualConstraint
NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Using<T>(System.Collections.Generic.IComparer<T> comparer) -> NUnit.Framework.Constraints.CollectionItemsEqualConstraint
NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Using<T>(System.Collections.Generic.IEqualityComparer<T> comparer) -> NUnit.Framework.Constraints.CollectionItemsEqualConstraint
NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Using<T>(System.Comparison<T> comparison) -> NUnit.Framework.Constraints.CollectionItemsEqualConstraint
NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Using<T>(System.Func<T, T, bool> comparer) -> NUnit.Framework.Constraints.CollectionItemsEqualConstraint
NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Using<TCollectionType, TMemberType>(System.Func<TCollectionType, TMemberType, bool> comparison) -> NUnit.Framework.Constraints.DictionaryContainsKeyConstraint
NUnit.Framework.Constraints.DictionaryContainsValueConstraint
NUnit.Framework.Constraints.DictionaryContainsValueConstraint.DictionaryContainsValueConstraint(object expected) -> void
NUnit.Framework.Constraints.DictionaryContainsValueConstraint.Expected.get -> object
NUnit.Framework.Constraints.DictionaryContainsValueConstraint.Using<TCollectionType, TMemberType>(System.Func<TCollectionType, TMemberType, bool> comparison) -> NUnit.Framework.Constraints.DictionaryContainsValueConstraint
NUnit.Framework.Constraints.EmptyCollectionConstraint
NUnit.Framework.Constraints.EmptyCollectionConstraint.EmptyCollectionConstraint() -> void
NUnit.Framework.Constraints.EmptyConstraint
NUnit.Framework.Constraints.EmptyConstraint.EmptyConstraint() -> void
NUnit.Framework.Constraints.EmptyDirectoryConstraint
NUnit.Framework.Constraints.EmptyDirectoryConstraint.EmptyDirectoryConstraint() -> void
NUnit.Framework.Constraints.EmptyStringConstraint
NUnit.Framework.Constraints.EmptyStringConstraint.EmptyStringConstraint() -> void
NUnit.Framework.Constraints.EndsWithConstraint
NUnit.Framework.Constraints.EndsWithConstraint.EndsWithConstraint(string expected) -> void
NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.AsCollection.get -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.CaseInsensitive.get -> bool
NUnit.Framework.Constraints.EqualConstraint.ClipStrings.get -> bool
NUnit.Framework.Constraints.EqualConstraint.Days.get -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.EqualConstraint(object expected) -> void
NUnit.Framework.Constraints.EqualConstraint.FailurePoints.get -> System.Collections.Generic.IList<NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint>
NUnit.Framework.Constraints.EqualConstraint.Hours.get -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.IgnoreCase.get -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.Milliseconds.get -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.Minutes.get -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.NoClip.get -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.Percent.get -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.Seconds.get -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.Ticks.get -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.Tolerance.get -> NUnit.Framework.Constraints.Tolerance
NUnit.Framework.Constraints.EqualConstraint.Ulps.get -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.Using(System.Collections.IComparer comparer) -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.Using(System.Collections.IEqualityComparer comparer) -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.Using<T>(System.Collections.Generic.IComparer<T> comparer) -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.Using<T>(System.Collections.Generic.IEqualityComparer<T> comparer) -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.Using<T>(System.Comparison<T> comparer) -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.Using<T>(System.Func<T, T, bool> comparer) -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.Using<TCollectionType, TMemberType>(System.Func<TCollectionType, TMemberType, bool> comparison) -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.WithSameOffset.get -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraint.Within(object amount) -> NUnit.Framework.Constraints.EqualConstraint
NUnit.Framework.Constraints.EqualConstraintResult
NUnit.Framework.Constraints.EqualConstraintResult.EqualConstraintResult(NUnit.Framework.Constraints.EqualConstraint constraint, object actual, bool hasSucceeded) -> void
NUnit.Framework.Constraints.EqualityAdapter
NUnit.Framework.Constraints.EqualityAdapter.EqualityAdapter() -> void
NUnit.Framework.Constraints.ExactCountConstraint
NUnit.Framework.Constraints.ExactCountConstraint.ExactCountConstraint(int expectedCount) -> void
NUnit.Framework.Constraints.ExactCountConstraint.ExactCountConstraint(int expectedCount, NUnit.Framework.Constraints.IConstraint itemConstraint) -> void
NUnit.Framework.Constraints.ExactCountOperator
NUnit.Framework.Constraints.ExactCountOperator.ExactCountOperator(int expectedCount) -> void
NUnit.Framework.Constraints.ExactTypeConstraint
NUnit.Framework.Constraints.ExactTypeConstraint.ExactTypeConstraint(System.Type type) -> void
NUnit.Framework.Constraints.ExceptionTypeConstraint
NUnit.Framework.Constraints.ExceptionTypeConstraint.ExceptionTypeConstraint(System.Type type) -> void
NUnit.Framework.Constraints.FalseConstraint
NUnit.Framework.Constraints.FalseConstraint.FalseConstraint() -> void
NUnit.Framework.Constraints.FileExistsConstraint
NUnit.Framework.Constraints.FileExistsConstraint.FileExistsConstraint() -> void
NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint
NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint.FileOrDirectoryExistsConstraint() -> void
NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint.FileOrDirectoryExistsConstraint(bool ignoreDirectories) -> void
NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint.IgnoreDirectories.get -> NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint
NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint.IgnoreFiles.get -> NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint
NUnit.Framework.Constraints.GreaterThanConstraint
NUnit.Framework.Constraints.GreaterThanConstraint.GreaterThanConstraint(object expected) -> void
NUnit.Framework.Constraints.GreaterThanOrEqualConstraint
NUnit.Framework.Constraints.GreaterThanOrEqualConstraint.GreaterThanOrEqualConstraint(object expected) -> void
NUnit.Framework.Constraints.IConstraint
NUnit.Framework.Constraints.IConstraint.ApplyTo<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del) -> NUnit.Framework.Constraints.ConstraintResult
NUnit.Framework.Constraints.IConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
NUnit.Framework.Constraints.IConstraint.ApplyTo<TActual>(ref TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
NUnit.Framework.Constraints.IConstraint.Arguments.get -> object[]
NUnit.Framework.Constraints.IConstraint.Builder.get -> NUnit.Framework.Constraints.ConstraintBuilder
NUnit.Framework.Constraints.IConstraint.Builder.set -> void
NUnit.Framework.Constraints.IConstraint.Description.get -> string
NUnit.Framework.Constraints.IConstraint.DisplayName.get -> string
NUnit.Framework.Constraints.IResolveConstraint
NUnit.Framework.Constraints.IResolveConstraint.Resolve() -> NUnit.Framework.Constraints.IConstraint
NUnit.Framework.Constraints.InstanceOfTypeConstraint
NUnit.Framework.Constraints.InstanceOfTypeConstraint.InstanceOfTypeConstraint(System.Type type) -> void
NUnit.Framework.Constraints.Interval
NUnit.Framework.Constraints.Interval.AsTimeSpan.get -> System.TimeSpan
NUnit.Framework.Constraints.Interval.InMilliseconds.get -> NUnit.Framework.Constraints.Interval
NUnit.Framework.Constraints.Interval.InMinutes.get -> NUnit.Framework.Constraints.Interval
NUnit.Framework.Constraints.Interval.InSeconds.get -> NUnit.Framework.Constraints.Interval
NUnit.Framework.Constraints.Interval.Interval(int value) -> void
NUnit.Framework.Constraints.Interval.IsNotZero.get -> bool
NUnit.Framework.Constraints.ItemsConstraintExpression
NUnit.Framework.Constraints.ItemsConstraintExpression.Items.get -> NUnit.Framework.Constraints.ResolvableConstraintExpression
NUnit.Framework.Constraints.ItemsConstraintExpression.ItemsConstraintExpression() -> void
NUnit.Framework.Constraints.ItemsConstraintExpression.ItemsConstraintExpression(NUnit.Framework.Constraints.ConstraintBuilder builder) -> void
NUnit.Framework.Constraints.LessThanConstraint
NUnit.Framework.Constraints.LessThanConstraint.LessThanConstraint(object expected) -> void
NUnit.Framework.Constraints.LessThanOrEqualConstraint
NUnit.Framework.Constraints.LessThanOrEqualConstraint.LessThanOrEqualConstraint(object expected) -> void
NUnit.Framework.Constraints.MessageWriter
NUnit.Framework.Constraints.MessageWriter.MessageWriter() -> void
NUnit.Framework.Constraints.MessageWriter.WriteMessageLine(string message, params object[] args) -> void
NUnit.Framework.Constraints.NUnitComparer
NUnit.Framework.Constraints.NUnitComparer.Compare(object x, object y) -> int
NUnit.Framework.Constraints.NUnitComparer.NUnitComparer() -> void
NUnit.Framework.Constraints.NUnitEqualityComparer
NUnit.Framework.Constraints.NUnitEqualityComparer.AreEqual(object x, object y, ref NUnit.Framework.Constraints.Tolerance tolerance, bool topLevelComparison = true) -> bool
NUnit.Framework.Constraints.NUnitEqualityComparer.CompareAsCollection.get -> bool
NUnit.Framework.Constraints.NUnitEqualityComparer.CompareAsCollection.set -> void
NUnit.Framework.Constraints.NUnitEqualityComparer.ExternalComparers.get -> System.Collections.Generic.IList<NUnit.Framework.Constraints.EqualityAdapter>
NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint
NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ActualHasData -> bool
NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ActualValue -> object
NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ExpectedHasData -> bool
NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.ExpectedValue -> object
NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.FailurePoint() -> void
NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint.Position -> long
NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoints.get -> System.Collections.Generic.IList<NUnit.Framework.Constraints.NUnitEqualityComparer.FailurePoint>
NUnit.Framework.Constraints.NUnitEqualityComparer.IgnoreCase.get -> bool
NUnit.Framework.Constraints.NUnitEqualityComparer.IgnoreCase.set -> void
NUnit.Framework.Constraints.NUnitEqualityComparer.NUnitEqualityComparer() -> void
NUnit.Framework.Constraints.NUnitEqualityComparer.WithSameOffset.get -> bool
NUnit.Framework.Constraints.NUnitEqualityComparer.WithSameOffset.set -> void
NUnit.Framework.Constraints.NaNConstraint
NUnit.Framework.Constraints.NaNConstraint.NaNConstraint() -> void
NUnit.Framework.Constraints.NoItemConstraint
NUnit.Framework.Constraints.NoItemConstraint.NoItemConstraint(NUnit.Framework.Constraints.IConstraint itemConstraint) -> void
NUnit.Framework.Constraints.NoneOperator
NUnit.Framework.Constraints.NoneOperator.NoneOperator() -> void
NUnit.Framework.Constraints.NotConstraint
NUnit.Framework.Constraints.NotConstraint.NotConstraint(NUnit.Framework.Constraints.IConstraint baseConstraint) -> void
NUnit.Framework.Constraints.NotOperator
NUnit.Framework.Constraints.NotOperator.NotOperator() -> void
NUnit.Framework.Constraints.NullConstraint
NUnit.Framework.Constraints.NullConstraint.NullConstraint() -> void
NUnit.Framework.Constraints.Numerics
NUnit.Framework.Constraints.OrConstraint
NUnit.Framework.Constraints.OrConstraint.OrConstraint(NUnit.Framework.Constraints.IConstraint left, NUnit.Framework.Constraints.IConstraint right) -> void
NUnit.Framework.Constraints.OrOperator
NUnit.Framework.Constraints.OrOperator.OrOperator() -> void
NUnit.Framework.Constraints.PathConstraint
NUnit.Framework.Constraints.PathConstraint.Canonicalize(string path) -> string
NUnit.Framework.Constraints.PathConstraint.IsSubPath(string path1, string path2) -> bool
NUnit.Framework.Constraints.PathConstraint.PathConstraint(string expected) -> void
NUnit.Framework.Constraints.PathConstraint.RespectCase.get -> NUnit.Framework.Constraints.PathConstraint
NUnit.Framework.Constraints.PredicateConstraint<T>
NUnit.Framework.Constraints.PredicateConstraint<T>.PredicateConstraint(System.Predicate<T> predicate) -> void
NUnit.Framework.Constraints.PrefixConstraint
NUnit.Framework.Constraints.PrefixConstraint.BaseConstraint.get -> NUnit.Framework.Constraints.IConstraint
NUnit.Framework.Constraints.PrefixConstraint.BaseConstraint.set -> void
NUnit.Framework.Constraints.PrefixConstraint.DescriptionPrefix.get -> string
NUnit.Framework.Constraints.PrefixConstraint.DescriptionPrefix.set -> void
NUnit.Framework.Constraints.PrefixConstraint.PrefixConstraint(NUnit.Framework.Constraints.IResolveConstraint baseConstraint) -> void
NUnit.Framework.Constraints.PrefixOperator
NUnit.Framework.Constraints.PrefixOperator.PrefixOperator() -> void
NUnit.Framework.Constraints.PropOperator
NUnit.Framework.Constraints.PropOperator.Name.get -> string
NUnit.Framework.Constraints.PropOperator.PropOperator(string name) -> void
NUnit.Framework.Constraints.PropertyConstraint
NUnit.Framework.Constraints.PropertyConstraint.PropertyConstraint(string name, NUnit.Framework.Constraints.IConstraint baseConstraint) -> void
NUnit.Framework.Constraints.PropertyExistsConstraint
NUnit.Framework.Constraints.PropertyExistsConstraint.PropertyExistsConstraint(string name) -> void
NUnit.Framework.Constraints.RangeConstraint
NUnit.Framework.Constraints.RangeConstraint.RangeConstraint(object from, object to) -> void
NUnit.Framework.Constraints.RangeConstraint.Using(System.Collections.IComparer comparer) -> NUnit.Framework.Constraints.RangeConstraint
NUnit.Framework.Constraints.RangeConstraint.Using<T>(System.Collections.Generic.IComparer<T> comparer) -> NUnit.Framework.Constraints.RangeConstraint
NUnit.Framework.Constraints.RangeConstraint.Using<T>(System.Comparison<T> comparer) -> NUnit.Framework.Constraints.RangeConstraint
NUnit.Framework.Constraints.RegexConstraint
NUnit.Framework.Constraints.RegexConstraint.RegexConstraint(string pattern) -> void
NUnit.Framework.Constraints.ResolvableConstraintExpression
NUnit.Framework.Constraints.ResolvableConstraintExpression.And.get -> NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.Constraints.ResolvableConstraintExpression.Or.get -> NUnit.Framework.Constraints.ConstraintExpression
NUnit.Framework.Constraints.ResolvableConstraintExpression.ResolvableConstraintExpression() -> void
NUnit.Framework.Constraints.ResolvableConstraintExpression.ResolvableConstraintExpression(NUnit.Framework.Constraints.ConstraintBuilder builder) -> void
NUnit.Framework.Constraints.ReusableConstraint
NUnit.Framework.Constraints.ReusableConstraint.Resolve() -> NUnit.Framework.Constraints.IConstraint
NUnit.Framework.Constraints.ReusableConstraint.ReusableConstraint(NUnit.Framework.Constraints.IResolveConstraint c) -> void
NUnit.Framework.Constraints.SameAsConstraint
NUnit.Framework.Constraints.SameAsConstraint.SameAsConstraint(object expected) -> void
NUnit.Framework.Constraints.SamePathConstraint
NUnit.Framework.Constraints.SamePathConstraint.SamePathConstraint(string expected) -> void
NUnit.Framework.Constraints.SamePathOrUnderConstraint
NUnit.Framework.Constraints.SamePathOrUnderConstraint.SamePathOrUnderConstraint(string expected) -> void
NUnit.Framework.Constraints.SelfResolvingOperator
NUnit.Framework.Constraints.SelfResolvingOperator.SelfResolvingOperator() -> void
NUnit.Framework.Constraints.SomeItemsConstraint
NUnit.Framework.Constraints.SomeItemsConstraint.SomeItemsConstraint(NUnit.Framework.Constraints.IConstraint itemConstraint) -> void
NUnit.Framework.Constraints.SomeItemsConstraint.Using(System.Collections.IComparer comparer) -> NUnit.Framework.Constraints.SomeItemsConstraint
NUnit.Framework.Constraints.SomeItemsConstraint.Using(System.Collections.IEqualityComparer comparer) -> NUnit.Framework.Constraints.SomeItemsConstraint
NUnit.Framework.Constraints.SomeItemsConstraint.Using<T>(System.Collections.Generic.IComparer<T> comparer) -> NUnit.Framework.Constraints.SomeItemsConstraint
NUnit.Framework.Constraints.SomeItemsConstraint.Using<T>(System.Collections.Generic.IEqualityComparer<T> comparer) -> NUnit.Framework.Constraints.SomeItemsConstraint
NUnit.Framework.Constraints.SomeItemsConstraint.Using<T>(System.Comparison<T> comparer) -> NUnit.Framework.Constraints.SomeItemsConstraint
NUnit.Framework.Constraints.SomeItemsConstraint.Using<TCollectionType, TMemberType>(System.Func<TCollectionType, TMemberType, bool> comparison) -> NUnit.Framework.Constraints.SomeItemsConstraint
NUnit.Framework.Constraints.SomeOperator
NUnit.Framework.Constraints.SomeOperator.SomeOperator() -> void
NUnit.Framework.Constraints.StartsWithConstraint
NUnit.Framework.Constraints.StartsWithConstraint.StartsWithConstraint(string expected) -> void
NUnit.Framework.Constraints.StringConstraint
NUnit.Framework.Constraints.StringConstraint.StringConstraint() -> void
NUnit.Framework.Constraints.StringConstraint.StringConstraint(string expected) -> void
NUnit.Framework.Constraints.StringConstraint.caseInsensitive -> bool
NUnit.Framework.Constraints.StringConstraint.descriptionText -> string
NUnit.Framework.Constraints.StringConstraint.expected -> string
NUnit.Framework.Constraints.SubPathConstraint
NUnit.Framework.Constraints.SubPathConstraint.SubPathConstraint(string expected) -> void
NUnit.Framework.Constraints.SubstringConstraint
NUnit.Framework.Constraints.SubstringConstraint.SubstringConstraint(string expected) -> void
NUnit.Framework.Constraints.SubstringConstraint.Using(System.StringComparison comparisonType) -> NUnit.Framework.Constraints.SubstringConstraint
NUnit.Framework.Constraints.ThrowsConstraint
NUnit.Framework.Constraints.ThrowsConstraint.ActualException.get -> System.Exception
NUnit.Framework.Constraints.ThrowsConstraint.ThrowsConstraint(NUnit.Framework.Constraints.IConstraint baseConstraint) -> void
NUnit.Framework.Constraints.ThrowsExceptionConstraint
NUnit.Framework.Constraints.ThrowsExceptionConstraint.ThrowsExceptionConstraint() -> void
NUnit.Framework.Constraints.ThrowsNothingConstraint
NUnit.Framework.Constraints.ThrowsNothingConstraint.ThrowsNothingConstraint() -> void
NUnit.Framework.Constraints.ThrowsOperator
NUnit.Framework.Constraints.ThrowsOperator.ThrowsOperator() -> void
NUnit.Framework.Constraints.Tolerance
NUnit.Framework.Constraints.Tolerance.Amount.get -> object
NUnit.Framework.Constraints.Tolerance.ApplyToValue(object value) -> NUnit.Framework.Constraints.Tolerance.Range
NUnit.Framework.Constraints.Tolerance.Days.get -> NUnit.Framework.Constraints.Tolerance
NUnit.Framework.Constraints.Tolerance.Hours.get -> NUnit.Framework.Constraints.Tolerance
NUnit.Framework.Constraints.Tolerance.IsUnsetOrDefault.get -> bool
NUnit.Framework.Constraints.Tolerance.Milliseconds.get -> NUnit.Framework.Constraints.Tolerance
NUnit.Framework.Constraints.Tolerance.Minutes.get -> NUnit.Framework.Constraints.Tolerance
NUnit.Framework.Constraints.Tolerance.Mode.get -> NUnit.Framework.Constraints.ToleranceMode
NUnit.Framework.Constraints.Tolerance.Percent.get -> NUnit.Framework.Constraints.Tolerance
NUnit.Framework.Constraints.Tolerance.Range
NUnit.Framework.Constraints.Tolerance.Range.Range(object lowerBound, object upperBound) -> void
NUnit.Framework.Constraints.Tolerance.Seconds.get -> NUnit.Framework.Constraints.Tolerance
NUnit.Framework.Constraints.Tolerance.Ticks.get -> NUnit.Framework.Constraints.Tolerance
NUnit.Framework.Constraints.Tolerance.Tolerance(object amount) -> void
NUnit.Framework.Constraints.Tolerance.Ulps.get -> NUnit.Framework.Constraints.Tolerance
NUnit.Framework.Constraints.ToleranceMode
NUnit.Framework.Constraints.ToleranceMode.Linear = 1 -> NUnit.Framework.Constraints.ToleranceMode
NUnit.Framework.Constraints.ToleranceMode.Percent = 2 -> NUnit.Framework.Constraints.ToleranceMode
NUnit.Framework.Constraints.ToleranceMode.Ulps = 3 -> NUnit.Framework.Constraints.ToleranceMode
NUnit.Framework.Constraints.ToleranceMode.Unset = 0 -> NUnit.Framework.Constraints.ToleranceMode
NUnit.Framework.Constraints.TrueConstraint
NUnit.Framework.Constraints.TrueConstraint.TrueConstraint() -> void
NUnit.Framework.Constraints.TypeConstraint
NUnit.Framework.Constraints.TypeConstraint.TypeConstraint(System.Type type, string descriptionPrefix) -> void
NUnit.Framework.Constraints.TypeConstraint.actualType -> System.Type
NUnit.Framework.Constraints.TypeConstraint.expectedType -> System.Type
NUnit.Framework.Constraints.UniqueItemsConstraint
NUnit.Framework.Constraints.UniqueItemsConstraint.UniqueItemsConstraint() -> void
NUnit.Framework.Constraints.ValueFormatter
NUnit.Framework.Constraints.ValueFormatterFactory
NUnit.Framework.Constraints.WithOperator
NUnit.Framework.Constraints.WithOperator.WithOperator() -> void
NUnit.Framework.Constraints.XmlSerializableConstraint
NUnit.Framework.Constraints.XmlSerializableConstraint.XmlSerializableConstraint() -> void
NUnit.Framework.Contains
NUnit.Framework.Contains.Contains() -> void
NUnit.Framework.CultureAttribute
NUnit.Framework.CultureAttribute.ApplyToTest(NUnit.Framework.Internal.Test test) -> void
NUnit.Framework.CultureAttribute.CultureAttribute() -> void
NUnit.Framework.CultureAttribute.CultureAttribute(string cultures) -> void
NUnit.Framework.CultureAttribute.IsCultureSupported(string culture) -> bool
NUnit.Framework.CultureAttribute.IsCultureSupported(string[] cultures) -> bool
NUnit.Framework.DataAttribute
NUnit.Framework.DataAttribute.DataAttribute() -> void
NUnit.Framework.DatapointAttribute
NUnit.Framework.DatapointAttribute.DatapointAttribute() -> void
NUnit.Framework.DatapointSourceAttribute
NUnit.Framework.DatapointSourceAttribute.DatapointSourceAttribute() -> void
NUnit.Framework.DatapointsAttribute
NUnit.Framework.DatapointsAttribute.DatapointsAttribute() -> void
NUnit.Framework.DefaultFloatingPointToleranceAttribute
NUnit.Framework.DefaultFloatingPointToleranceAttribute.ApplyToContext(NUnit.Framework.Internal.TestExecutionContext context) -> void
NUnit.Framework.DefaultFloatingPointToleranceAttribute.DefaultFloatingPointToleranceAttribute(double amount) -> void
NUnit.Framework.DescriptionAttribute
NUnit.Framework.DescriptionAttribute.DescriptionAttribute(string description) -> void
NUnit.Framework.DirectoryAssert
NUnit.Framework.Does
NUnit.Framework.Does.Does() -> void
NUnit.Framework.ExplicitAttribute
NUnit.Framework.ExplicitAttribute.ApplyToTest(NUnit.Framework.Internal.Test test) -> void
NUnit.Framework.ExplicitAttribute.ExplicitAttribute() -> void
NUnit.Framework.ExplicitAttribute.ExplicitAttribute(string reason) -> void
NUnit.Framework.FileAssert
NUnit.Framework.Has
NUnit.Framework.Has.Has() -> void
NUnit.Framework.ITestAction
NUnit.Framework.ITestAction.AfterTest(NUnit.Framework.Interfaces.ITest test) -> void
NUnit.Framework.ITestAction.BeforeTest(NUnit.Framework.Interfaces.ITest test) -> void
NUnit.Framework.ITestAction.Targets.get -> NUnit.Framework.ActionTargets
NUnit.Framework.IgnoreAttribute
NUnit.Framework.IgnoreAttribute.ApplyToTest(NUnit.Framework.Internal.Test test) -> void
NUnit.Framework.IgnoreAttribute.IgnoreAttribute(string reason) -> void
NUnit.Framework.IgnoreAttribute.Until.get -> string
NUnit.Framework.IgnoreAttribute.Until.set -> void
NUnit.Framework.IgnoreException
NUnit.Framework.IgnoreException.IgnoreException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
NUnit.Framework.IgnoreException.IgnoreException(string message) -> void
NUnit.Framework.IgnoreException.IgnoreException(string message, System.Exception inner) -> void
NUnit.Framework.IncludeExcludeAttribute
NUnit.Framework.IncludeExcludeAttribute.Exclude.get -> string
NUnit.Framework.IncludeExcludeAttribute.Exclude.set -> void
NUnit.Framework.IncludeExcludeAttribute.Include.get -> string
NUnit.Framework.IncludeExcludeAttribute.Include.set -> void
NUnit.Framework.IncludeExcludeAttribute.IncludeExcludeAttribute() -> void
NUnit.Framework.IncludeExcludeAttribute.IncludeExcludeAttribute(string include) -> void
NUnit.Framework.IncludeExcludeAttribute.Reason.get -> string
NUnit.Framework.IncludeExcludeAttribute.Reason.set -> void
NUnit.Framework.InconclusiveException
NUnit.Framework.InconclusiveException.InconclusiveException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
NUnit.Framework.InconclusiveException.InconclusiveException(string message) -> void
NUnit.Framework.InconclusiveException.InconclusiveException(string message, System.Exception inner) -> void
NUnit.Framework.Interfaces.AssertionResult
NUnit.Framework.Interfaces.AssertionResult.AssertionResult(NUnit.Framework.Interfaces.AssertionStatus status, string message, string stackTrace) -> void
NUnit.Framework.Interfaces.AssertionResult.Message.get -> string
NUnit.Framework.Interfaces.AssertionResult.StackTrace.get -> string
NUnit.Framework.Interfaces.AssertionResult.Status.get -> NUnit.Framework.Interfaces.AssertionStatus
NUnit.Framework.Interfaces.AssertionStatus
NUnit.Framework.Interfaces.AssertionStatus.Error = 4 -> NUnit.Framework.Interfaces.AssertionStatus
NUnit.Framework.Interfaces.AssertionStatus.Failed = 3 -> NUnit.Framework.Interfaces.AssertionStatus
NUnit.Framework.Interfaces.AssertionStatus.Inconclusive = 0 -> NUnit.Framework.Interfaces.AssertionStatus
NUnit.Framework.Interfaces.AssertionStatus.Passed = 1 -> NUnit.Framework.Interfaces.AssertionStatus
NUnit.Framework.Interfaces.AssertionStatus.Warning = 2 -> NUnit.Framework.Interfaces.AssertionStatus
NUnit.Framework.Interfaces.AttributeDictionary
NUnit.Framework.Interfaces.AttributeDictionary.AttributeDictionary() -> void
NUnit.Framework.Interfaces.AttributeDictionary.this[string key].get -> string
NUnit.Framework.Interfaces.FailureSite
NUnit.Framework.Interfaces.FailureSite.Child = 4 -> NUnit.Framework.Interfaces.FailureSite
NUnit.Framework.Interfaces.FailureSite.Parent = 3 -> NUnit.Framework.Interfaces.FailureSite
NUnit.Framework.Interfaces.FailureSite.SetUp = 1 -> NUnit.Framework.Interfaces.FailureSite
NUnit.Framework.Interfaces.FailureSite.TearDown = 2 -> NUnit.Framework.Interfaces.FailureSite
NUnit.Framework.Interfaces.FailureSite.Test = 0 -> NUnit.Framework.Interfaces.FailureSite
NUnit.Framework.Interfaces.IApplyToContext
NUnit.Framework.Interfaces.IApplyToContext.ApplyToContext(NUnit.Framework.Internal.TestExecutionContext context) -> void
NUnit.Framework.Interfaces.IApplyToTest
NUnit.Framework.Interfaces.IApplyToTest.ApplyToTest(NUnit.Framework.Internal.Test test) -> void
NUnit.Framework.Interfaces.ICombiningStrategy
NUnit.Framework.Interfaces.ICombiningStrategy.GetTestCases(System.Collections.IEnumerable[] sources) -> System.Collections.Generic.IEnumerable<NUnit.Framework.Interfaces.ITestCaseData>
NUnit.Framework.Interfaces.ICommandWrapper
NUnit.Framework.Interfaces.ICommandWrapper.Wrap(NUnit.Framework.Internal.Commands.TestCommand command) -> NUnit.Framework.Internal.Commands.TestCommand
NUnit.Framework.Interfaces.IFixtureBuilder
NUnit.Framework.Interfaces.IFixtureBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo typeInfo) -> System.Collections.Generic.IEnumerable<NUnit.Framework.Internal.TestSuite>
NUnit.Framework.Interfaces.IFixtureBuilder2
NUnit.Framework.Interfaces.IFixtureBuilder2.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo typeInfo, NUnit.Framework.Interfaces.IPreFilter filter) -> System.Collections.Generic.IEnumerable<NUnit.Framework.Internal.TestSuite>
NUnit.Framework.Interfaces.IImplyFixture
NUnit.Framework.Interfaces.IMethodInfo
NUnit.Framework.Interfaces.IMethodInfo.ContainsGenericParameters.get -> bool
NUnit.Framework.Interfaces.IMethodInfo.GetGenericArguments() -> System.Type[]
NUnit.Framework.Interfaces.IMethodInfo.GetParameters() -> NUnit.Framework.Interfaces.IParameterInfo[]
NUnit.Framework.Interfaces.IMethodInfo.Invoke(object fixture, params object[] args) -> object
NUnit.Framework.Interfaces.IMethodInfo.IsAbstract.get -> bool
NUnit.Framework.Interfaces.IMethodInfo.IsGenericMethod.get -> bool
NUnit.Framework.Interfaces.IMethodInfo.IsGenericMethodDefinition.get -> bool
NUnit.Framework.Interfaces.IMethodInfo.IsPublic.get -> bool
NUnit.Framework.Interfaces.IMethodInfo.MakeGenericMethod(params System.Type[] typeArguments) -> NUnit.Framework.Interfaces.IMethodInfo
NUnit.Framework.Interfaces.IMethodInfo.MethodInfo.get -> System.Reflection.MethodInfo
NUnit.Framework.Interfaces.IMethodInfo.Name.get -> string
NUnit.Framework.Interfaces.IMethodInfo.ReturnType.get -> NUnit.Framework.Interfaces.ITypeInfo
NUnit.Framework.Interfaces.IMethodInfo.TypeInfo.get -> NUnit.Framework.Interfaces.ITypeInfo
NUnit.Framework.Interfaces.IParameterDataProvider
NUnit.Framework.Interfaces.IParameterDataProvider.GetDataFor(NUnit.Framework.Interfaces.IParameterInfo parameter) -> System.Collections.IEnumerable
NUnit.Framework.Interfaces.IParameterDataProvider.HasDataFor(NUnit.Framework.Interfaces.IParameterInfo parameter) -> bool
NUnit.Framework.Interfaces.IParameterDataSource
NUnit.Framework.Interfaces.IParameterDataSource.GetData(NUnit.Framework.Interfaces.IParameterInfo parameter) -> System.Collections.IEnumerable
NUnit.Framework.Interfaces.IParameterInfo
NUnit.Framework.Interfaces.IParameterInfo.IsOptional.get -> bool
NUnit.Framework.Interfaces.IParameterInfo.Method.get -> NUnit.Framework.Interfaces.IMethodInfo
NUnit.Framework.Interfaces.IParameterInfo.ParameterInfo.get -> System.Reflection.ParameterInfo
NUnit.Framework.Interfaces.IParameterInfo.ParameterType.get -> System.Type
NUnit.Framework.Interfaces.IPreFilter
NUnit.Framework.Interfaces.IPreFilter.IsMatch(System.Type type) -> bool
NUnit.Framework.Interfaces.IPreFilter.IsMatch(System.Type type, System.Reflection.MethodInfo method) -> bool
NUnit.Framework.Interfaces.IPropertyBag
NUnit.Framework.Interfaces.IPropertyBag.Add(string key, object value) -> void
NUnit.Framework.Interfaces.IPropertyBag.ContainsKey(string key) -> bool
NUnit.Framework.Interfaces.IPropertyBag.Get(string key) -> object
NUnit.Framework.Interfaces.IPropertyBag.Keys.get -> System.Collections.Generic.ICollection<string>
NUnit.Framework.Interfaces.IPropertyBag.Set(string key, object value) -> void
NUnit.Framework.Interfaces.IPropertyBag.this[string key].get -> System.Collections.IList
NUnit.Framework.Interfaces.IPropertyBag.this[string key].set -> void
NUnit.Framework.Interfaces.IReflectionInfo
NUnit.Framework.Interfaces.IReflectionInfo.GetCustomAttributes<T>(bool inherit) -> T[]
NUnit.Framework.Interfaces.IReflectionInfo.IsDefined<T>(bool inherit) -> bool
NUnit.Framework.Interfaces.IRepeatTest
NUnit.Framework.Interfaces.ISimpleTestBuilder
NUnit.Framework.Interfaces.ISimpleTestBuilder.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo method, NUnit.Framework.Internal.Test suite) -> NUnit.Framework.Internal.TestMethod
NUnit.Framework.Interfaces.ISuiteBuilder
NUnit.Framework.Interfaces.ISuiteBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo typeInfo) -> NUnit.Framework.Internal.TestSuite
NUnit.Framework.Interfaces.ISuiteBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo typeInfo, NUnit.Framework.Interfaces.IPreFilter filter) -> NUnit.Framework.Internal.TestSuite
NUnit.Framework.Interfaces.ISuiteBuilder.CanBuildFrom(NUnit.Framework.Interfaces.ITypeInfo typeInfo) -> bool
NUnit.Framework.Interfaces.ITest
NUnit.Framework.Interfaces.ITest.Arguments.get -> object[]
NUnit.Framework.Interfaces.ITest.ClassName.get -> string
NUnit.Framework.Interfaces.ITest.Fixture.get -> object
NUnit.Framework.Interfaces.ITest.FullName.get -> string
NUnit.Framework.Interfaces.ITest.HasChildren.get -> bool
NUnit.Framework.Interfaces.ITest.Id.get -> string
NUnit.Framework.Interfaces.ITest.IsSuite.get -> bool
NUnit.Framework.Interfaces.ITest.Method.get -> NUnit.Framework.Interfaces.IMethodInfo
NUnit.Framework.Interfaces.ITest.MethodName.get -> string
NUnit.Framework.Interfaces.ITest.Name.get -> string
NUnit.Framework.Interfaces.ITest.Parent.get -> NUnit.Framework.Interfaces.ITest
NUnit.Framework.Interfaces.ITest.Properties.get -> NUnit.Framework.Interfaces.IPropertyBag
NUnit.Framework.Interfaces.ITest.RunState.get -> NUnit.Framework.Interfaces.RunState
NUnit.Framework.Interfaces.ITest.TestCaseCount.get -> int
NUnit.Framework.Interfaces.ITest.TestType.get -> string
NUnit.Framework.Interfaces.ITest.Tests.get -> System.Collections.Generic.IList<NUnit.Framework.Interfaces.ITest>
NUnit.Framework.Interfaces.ITest.TypeInfo.get -> NUnit.Framework.Interfaces.ITypeInfo
NUnit.Framework.Interfaces.ITestBuilder
NUnit.Framework.Interfaces.ITestBuilder.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo method, NUnit.Framework.Internal.Test suite) -> System.Collections.Generic.IEnumerable<NUnit.Framework.Internal.TestMethod>
NUnit.Framework.Interfaces.ITestCaseBuilder
NUnit.Framework.Interfaces.ITestCaseBuilder.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo method, NUnit.Framework.Internal.Test suite) -> NUnit.Framework.Internal.Test
NUnit.Framework.Interfaces.ITestCaseBuilder.CanBuildFrom(NUnit.Framework.Interfaces.IMethodInfo method, NUnit.Framework.Internal.Test suite) -> bool
NUnit.Framework.Interfaces.ITestCaseData
NUnit.Framework.Interfaces.ITestCaseData.ExpectedResult.get -> object
NUnit.Framework.Interfaces.ITestCaseData.HasExpectedResult.get -> bool
NUnit.Framework.Interfaces.ITestData
NUnit.Framework.Interfaces.ITestData.Arguments.get -> object[]
NUnit.Framework.Interfaces.ITestData.Properties.get -> NUnit.Framework.Interfaces.IPropertyBag
NUnit.Framework.Interfaces.ITestData.RunState.get -> NUnit.Framework.Interfaces.RunState
NUnit.Framework.Interfaces.ITestData.TestName.get -> string
NUnit.Framework.Interfaces.ITestFilter
NUnit.Framework.Interfaces.ITestFilter.IsExplicitMatch(NUnit.Framework.Interfaces.ITest test) -> bool
NUnit.Framework.Interfaces.ITestFilter.Pass(NUnit.Framework.Interfaces.ITest test) -> bool
NUnit.Framework.Interfaces.ITestFixtureData
NUnit.Framework.Interfaces.ITestFixtureData.TypeArgs.get -> System.Type[]
NUnit.Framework.Interfaces.ITestListener
NUnit.Framework.Interfaces.ITestListener.SendMessage(NUnit.Framework.Interfaces.TestMessage message) -> void
NUnit.Framework.Interfaces.ITestListener.TestFinished(NUnit.Framework.Interfaces.ITestResult result) -> void
NUnit.Framework.Interfaces.ITestListener.TestOutput(NUnit.Framework.Interfaces.TestOutput output) -> void
NUnit.Framework.Interfaces.ITestListener.TestStarted(NUnit.Framework.Interfaces.ITest test) -> void
NUnit.Framework.Interfaces.ITestResult
NUnit.Framework.Interfaces.ITestResult.AssertCount.get -> int
NUnit.Framework.Interfaces.ITestResult.AssertionResults.get -> System.Collections.Generic.IList<NUnit.Framework.Interfaces.AssertionResult>
NUnit.Framework.Interfaces.ITestResult.Children.get -> System.Collections.Generic.IEnumerable<NUnit.Framework.Interfaces.ITestResult>
NUnit.Framework.Interfaces.ITestResult.Duration.get -> double
NUnit.Framework.Interfaces.ITestResult.EndTime.get -> System.DateTime
NUnit.Framework.Interfaces.ITestResult.FailCount.get -> int
NUnit.Framework.Interfaces.ITestResult.FullName.get -> string
NUnit.Framework.Interfaces.ITestResult.HasChildren.get -> bool
NUnit.Framework.Interfaces.ITestResult.InconclusiveCount.get -> int
NUnit.Framework.Interfaces.ITestResult.Message.get -> string
NUnit.Framework.Interfaces.ITestResult.Name.get -> string
NUnit.Framework.Interfaces.ITestResult.Output.get -> string
NUnit.Framework.Interfaces.ITestResult.PassCount.get -> int
NUnit.Framework.Interfaces.ITestResult.ResultState.get -> NUnit.Framework.Interfaces.ResultState
NUnit.Framework.Interfaces.ITestResult.SkipCount.get -> int
NUnit.Framework.Interfaces.ITestResult.StackTrace.get -> string
NUnit.Framework.Interfaces.ITestResult.StartTime.get -> System.DateTime
NUnit.Framework.Interfaces.ITestResult.Test.get -> NUnit.Framework.Interfaces.ITest
NUnit.Framework.Interfaces.ITestResult.TestAttachments.get -> System.Collections.Generic.ICollection<NUnit.Framework.Interfaces.TestAttachment>
NUnit.Framework.Interfaces.ITestResult.WarningCount.get -> int
NUnit.Framework.Interfaces.ITypeInfo
NUnit.Framework.Interfaces.ITypeInfo.Assembly.get -> System.Reflection.Assembly
NUnit.Framework.Interfaces.ITypeInfo.BaseType.get -> NUnit.Framework.Interfaces.ITypeInfo
NUnit.Framework.Interfaces.ITypeInfo.Construct(object[] args) -> object
NUnit.Framework.Interfaces.ITypeInfo.ContainsGenericParameters.get -> bool
NUnit.Framework.Interfaces.ITypeInfo.FullName.get -> string
NUnit.Framework.Interfaces.ITypeInfo.GetConstructor(System.Type[] argTypes) -> System.Reflection.ConstructorInfo
NUnit.Framework.Interfaces.ITypeInfo.GetDisplayName() -> string
NUnit.Framework.Interfaces.ITypeInfo.GetDisplayName(object[] args) -> string
NUnit.Framework.Interfaces.ITypeInfo.GetGenericTypeDefinition() -> System.Type
NUnit.Framework.Interfaces.ITypeInfo.GetMethods(System.Reflection.BindingFlags flags) -> NUnit.Framework.Interfaces.IMethodInfo[]
NUnit.Framework.Interfaces.ITypeInfo.HasConstructor(System.Type[] argTypes) -> bool
NUnit.Framework.Interfaces.ITypeInfo.HasMethodWithAttribute(System.Type attrType) -> bool
NUnit.Framework.Interfaces.ITypeInfo.IsAbstract.get -> bool
NUnit.Framework.Interfaces.ITypeInfo.IsGenericType.get -> bool
NUnit.Framework.Interfaces.ITypeInfo.IsGenericTypeDefinition.get -> bool
NUnit.Framework.Interfaces.ITypeInfo.IsSealed.get -> bool
NUnit.Framework.Interfaces.ITypeInfo.IsStaticClass.get -> bool
NUnit.Framework.Interfaces.ITypeInfo.IsType(System.Type type) -> bool
NUnit.Framework.Interfaces.ITypeInfo.MakeGenericType(System.Type[] typeArgs) -> NUnit.Framework.Interfaces.ITypeInfo
NUnit.Framework.Interfaces.ITypeInfo.Name.get -> string
NUnit.Framework.Interfaces.ITypeInfo.Namespace.get -> string
NUnit.Framework.Interfaces.ITypeInfo.Type.get -> System.Type
NUnit.Framework.Interfaces.IWrapSetUpTearDown
NUnit.Framework.Interfaces.IWrapTestMethod
NUnit.Framework.Interfaces.IXmlNodeBuilder
NUnit.Framework.Interfaces.IXmlNodeBuilder.AddToXml(NUnit.Framework.Interfaces.TNode parentNode, bool recursive) -> NUnit.Framework.Interfaces.TNode
NUnit.Framework.Interfaces.IXmlNodeBuilder.ToXml(bool recursive) -> NUnit.Framework.Interfaces.TNode
NUnit.Framework.Interfaces.NodeList
NUnit.Framework.Interfaces.NodeList.NodeList() -> void
NUnit.Framework.Interfaces.ResultState
NUnit.Framework.Interfaces.ResultState.Label.get -> string
NUnit.Framework.Interfaces.ResultState.Matches(NUnit.Framework.Interfaces.ResultState other) -> bool
NUnit.Framework.Interfaces.ResultState.ResultState(NUnit.Framework.Interfaces.TestStatus status) -> void
NUnit.Framework.Interfaces.ResultState.ResultState(NUnit.Framework.Interfaces.TestStatus status, NUnit.Framework.Interfaces.FailureSite site) -> void
NUnit.Framework.Interfaces.ResultState.ResultState(NUnit.Framework.Interfaces.TestStatus status, string label) -> void
NUnit.Framework.Interfaces.ResultState.ResultState(NUnit.Framework.Interfaces.TestStatus status, string label, NUnit.Framework.Interfaces.FailureSite site) -> void
NUnit.Framework.Interfaces.ResultState.Site.get -> NUnit.Framework.Interfaces.FailureSite
NUnit.Framework.Interfaces.ResultState.Status.get -> NUnit.Framework.Interfaces.TestStatus
NUnit.Framework.Interfaces.ResultState.WithSite(NUnit.Framework.Interfaces.FailureSite site) -> NUnit.Framework.Interfaces.ResultState
NUnit.Framework.Interfaces.RunState
NUnit.Framework.Interfaces.RunState.Explicit = 2 -> NUnit.Framework.Interfaces.RunState
NUnit.Framework.Interfaces.RunState.Ignored = 4 -> NUnit.Framework.Interfaces.RunState
NUnit.Framework.Interfaces.RunState.NotRunnable = 0 -> NUnit.Framework.Interfaces.RunState
NUnit.Framework.Interfaces.RunState.Runnable = 1 -> NUnit.Framework.Interfaces.RunState
NUnit.Framework.Interfaces.RunState.Skipped = 3 -> NUnit.Framework.Interfaces.RunState
NUnit.Framework.Interfaces.TNode
NUnit.Framework.Interfaces.TNode.AddAttribute(string name, string value) -> void
NUnit.Framework.Interfaces.TNode.AddElement(string name) -> NUnit.Framework.Interfaces.TNode
NUnit.Framework.Interfaces.TNode.AddElement(string name, string value) -> NUnit.Framework.Interfaces.TNode
NUnit.Framework.Interfaces.TNode.AddElementWithCDATA(string name, string value) -> NUnit.Framework.Interfaces.TNode
NUnit.Framework.Interfaces.TNode.Attributes.get -> NUnit.Framework.Interfaces.AttributeDictionary
NUnit.Framework.Interfaces.TNode.ChildNodes.get -> NUnit.Framework.Interfaces.NodeList
NUnit.Framework.Interfaces.TNode.FirstChild.get -> NUnit.Framework.Interfaces.TNode
NUnit.Framework.Interfaces.TNode.Name.get -> string
NUnit.Framework.Interfaces.TNode.OuterXml.get -> string
NUnit.Framework.Interfaces.TNode.SelectNodes(string xpath) -> NUnit.Framework.Interfaces.NodeList
NUnit.Framework.Interfaces.TNode.SelectSingleNode(string xpath) -> NUnit.Framework.Interfaces.TNode
NUnit.Framework.Interfaces.TNode.TNode(string name) -> void
NUnit.Framework.Interfaces.TNode.TNode(string name, string value) -> void
NUnit.Framework.Interfaces.TNode.TNode(string name, string value, bool valueIsCDATA) -> void
NUnit.Framework.Interfaces.TNode.Value.get -> string
NUnit.Framework.Interfaces.TNode.Value.set -> void
NUnit.Framework.Interfaces.TNode.ValueIsCDATA.get -> bool
NUnit.Framework.Interfaces.TNode.WriteTo(System.Xml.XmlWriter writer) -> void
NUnit.Framework.Interfaces.TestAttachment
NUnit.Framework.Interfaces.TestAttachment.Description.get -> string
NUnit.Framework.Interfaces.TestAttachment.FilePath.get -> string
NUnit.Framework.Interfaces.TestAttachment.TestAttachment(string filePath, string description) -> void
NUnit.Framework.Interfaces.TestMessage
NUnit.Framework.Interfaces.TestMessage.Destination.get -> string
NUnit.Framework.Interfaces.TestMessage.Message.get -> string
NUnit.Framework.Interfaces.TestMessage.TestId.get -> string
NUnit.Framework.Interfaces.TestMessage.TestMessage(string destination, string text, string testId) -> void
NUnit.Framework.Interfaces.TestMessage.ToXml() -> string
NUnit.Framework.Interfaces.TestOutput
NUnit.Framework.Interfaces.TestOutput.Stream.get -> string
NUnit.Framework.Interfaces.TestOutput.TestId.get -> string
NUnit.Framework.Interfaces.TestOutput.TestName.get -> string
NUnit.Framework.Interfaces.TestOutput.TestOutput(string text, string stream, string testId, string testName) -> void
NUnit.Framework.Interfaces.TestOutput.Text.get -> string
NUnit.Framework.Interfaces.TestOutput.ToXml() -> string
NUnit.Framework.Interfaces.TestStatus
NUnit.Framework.Interfaces.TestStatus.Failed = 4 -> NUnit.Framework.Interfaces.TestStatus
NUnit.Framework.Interfaces.TestStatus.Inconclusive = 0 -> NUnit.Framework.Interfaces.TestStatus
NUnit.Framework.Interfaces.TestStatus.Passed = 2 -> NUnit.Framework.Interfaces.TestStatus
NUnit.Framework.Interfaces.TestStatus.Skipped = 1 -> NUnit.Framework.Interfaces.TestStatus
NUnit.Framework.Interfaces.TestStatus.Warning = 3 -> NUnit.Framework.Interfaces.TestStatus
NUnit.Framework.Internal.AssemblyHelper
NUnit.Framework.Internal.Builders.CombinatorialStrategy
NUnit.Framework.Internal.Builders.CombinatorialStrategy.CombinatorialStrategy() -> void
NUnit.Framework.Internal.Builders.CombinatorialStrategy.GetTestCases(System.Collections.IEnumerable[] sources) -> System.Collections.Generic.IEnumerable<NUnit.Framework.Interfaces.ITestCaseData>
NUnit.Framework.Internal.Builders.DatapointProvider
NUnit.Framework.Internal.Builders.DatapointProvider.DatapointProvider() -> void
NUnit.Framework.Internal.Builders.DatapointProvider.GetDataFor(NUnit.Framework.Interfaces.IParameterInfo parameter) -> System.Collections.IEnumerable
NUnit.Framework.Internal.Builders.DatapointProvider.HasDataFor(NUnit.Framework.Interfaces.IParameterInfo parameter) -> bool
NUnit.Framework.Internal.Builders.DefaultSuiteBuilder
NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo typeInfo) -> NUnit.Framework.Internal.TestSuite
NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo typeInfo, NUnit.Framework.Interfaces.IPreFilter filter) -> NUnit.Framework.Internal.TestSuite
NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.CanBuildFrom(NUnit.Framework.Interfaces.ITypeInfo typeInfo) -> bool
NUnit.Framework.Internal.Builders.DefaultSuiteBuilder.DefaultSuiteBuilder() -> void
NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder
NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo method) -> NUnit.Framework.Internal.Test
NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo method, NUnit.Framework.Internal.Test parentSuite) -> NUnit.Framework.Internal.Test
NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.CanBuildFrom(NUnit.Framework.Interfaces.IMethodInfo method) -> bool
NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.CanBuildFrom(NUnit.Framework.Interfaces.IMethodInfo method, NUnit.Framework.Internal.Test parentSuite) -> bool
NUnit.Framework.Internal.Builders.DefaultTestCaseBuilder.DefaultTestCaseBuilder() -> void
NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder
NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder.BuildTestMethod(NUnit.Framework.Interfaces.IMethodInfo method, NUnit.Framework.Internal.Test parentSuite, NUnit.Framework.Internal.TestCaseParameters parms) -> NUnit.Framework.Internal.TestMethod
NUnit.Framework.Internal.Builders.NUnitTestCaseBuilder.NUnitTestCaseBuilder() -> void
NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder
NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo typeInfo, NUnit.Framework.Interfaces.IPreFilter filter) -> NUnit.Framework.Internal.TestSuite
NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo typeInfo, NUnit.Framework.Interfaces.IPreFilter filter, NUnit.Framework.Interfaces.ITestFixtureData testFixtureData) -> NUnit.Framework.Internal.TestSuite
NUnit.Framework.Internal.Builders.NUnitTestFixtureBuilder.NUnitTestFixtureBuilder() -> void
NUnit.Framework.Internal.Builders.NamespaceTreeBuilder
NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.Add(NUnit.Framework.Internal.TestSuite fixture) -> void
NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.Add(System.Collections.Generic.IList<NUnit.Framework.Internal.Test> fixtures) -> void
NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.NamespaceTreeBuilder(NUnit.Framework.Internal.TestSuite rootSuite) -> void
NUnit.Framework.Internal.Builders.NamespaceTreeBuilder.RootSuite.get -> NUnit.Framework.Internal.TestSuite
NUnit.Framework.Internal.Builders.PairwiseStrategy
NUnit.Framework.Internal.Builders.PairwiseStrategy.GetTestCases(System.Collections.IEnumerable[] sources) -> System.Collections.Generic.IEnumerable<NUnit.Framework.Interfaces.ITestCaseData>
NUnit.Framework.Internal.Builders.PairwiseStrategy.PairwiseStrategy() -> void
NUnit.Framework.Internal.Builders.ParameterDataProvider
NUnit.Framework.Internal.Builders.ParameterDataProvider.GetDataFor(NUnit.Framework.Interfaces.IParameterInfo parameter) -> System.Collections.IEnumerable
NUnit.Framework.Internal.Builders.ParameterDataProvider.HasDataFor(NUnit.Framework.Interfaces.IParameterInfo parameter) -> bool
NUnit.Framework.Internal.Builders.ParameterDataProvider.ParameterDataProvider(params NUnit.Framework.Interfaces.IParameterDataProvider[] providers) -> void
NUnit.Framework.Internal.Builders.ParameterDataSourceProvider
NUnit.Framework.Internal.Builders.ParameterDataSourceProvider.GetDataFor(NUnit.Framework.Interfaces.IParameterInfo parameter) -> System.Collections.IEnumerable
NUnit.Framework.Internal.Builders.ParameterDataSourceProvider.HasDataFor(NUnit.Framework.Interfaces.IParameterInfo parameter) -> bool
NUnit.Framework.Internal.Builders.ParameterDataSourceProvider.ParameterDataSourceProvider() -> void
NUnit.Framework.Internal.Builders.SequentialStrategy
NUnit.Framework.Internal.Builders.SequentialStrategy.GetTestCases(System.Collections.IEnumerable[] sources) -> System.Collections.Generic.IEnumerable<NUnit.Framework.Interfaces.ITestCaseData>
NUnit.Framework.Internal.Builders.SequentialStrategy.SequentialStrategy() -> void
NUnit.Framework.Internal.Commands.AfterTestActionCommand
NUnit.Framework.Internal.Commands.AfterTestActionCommand.AfterTestActionCommand(NUnit.Framework.Internal.Commands.TestCommand innerCommand, NUnit.Framework.Internal.Commands.TestActionItem action) -> void
NUnit.Framework.Internal.Commands.AfterTestCommand
NUnit.Framework.Internal.Commands.AfterTestCommand.AfterTest -> System.Action<NUnit.Framework.Internal.TestExecutionContext>
NUnit.Framework.Internal.Commands.AfterTestCommand.AfterTestCommand(NUnit.Framework.Internal.Commands.TestCommand innerCommand) -> void
NUnit.Framework.Internal.Commands.BeforeAndAfterTestCommand
NUnit.Framework.Internal.Commands.BeforeAndAfterTestCommand.AfterTest -> System.Action<NUnit.Framework.Internal.TestExecutionContext>
NUnit.Framework.Internal.Commands.BeforeAndAfterTestCommand.BeforeAndAfterTestCommand(NUnit.Framework.Internal.Commands.TestCommand innerCommand) -> void
NUnit.Framework.Internal.Commands.BeforeAndAfterTestCommand.BeforeTest -> System.Action<NUnit.Framework.Internal.TestExecutionContext>
NUnit.Framework.Internal.Commands.BeforeTestActionCommand
NUnit.Framework.Internal.Commands.BeforeTestActionCommand.BeforeTestActionCommand(NUnit.Framework.Internal.Commands.TestCommand innerCommand, NUnit.Framework.Internal.Commands.TestActionItem action) -> void
NUnit.Framework.Internal.Commands.BeforeTestCommand
NUnit.Framework.Internal.Commands.BeforeTestCommand.BeforeTest -> System.Action<NUnit.Framework.Internal.TestExecutionContext>
NUnit.Framework.Internal.Commands.BeforeTestCommand.BeforeTestCommand(NUnit.Framework.Internal.Commands.TestCommand innerCommand) -> void
NUnit.Framework.Internal.Commands.ConstructFixtureCommand
NUnit.Framework.Internal.Commands.ConstructFixtureCommand.ConstructFixtureCommand(NUnit.Framework.Internal.Commands.TestCommand innerCommand) -> void
NUnit.Framework.Internal.Commands.DelegatingTestCommand
NUnit.Framework.Internal.Commands.DelegatingTestCommand.DelegatingTestCommand(NUnit.Framework.Internal.Commands.TestCommand innerCommand) -> void
NUnit.Framework.Internal.Commands.DelegatingTestCommand.innerCommand -> NUnit.Framework.Internal.Commands.TestCommand
NUnit.Framework.Internal.Commands.DisposeFixtureCommand
NUnit.Framework.Internal.Commands.DisposeFixtureCommand.DisposeFixtureCommand(NUnit.Framework.Internal.Commands.TestCommand innerCommand) -> void
NUnit.Framework.Internal.Commands.EmptyTestCommand
NUnit.Framework.Internal.Commands.EmptyTestCommand.EmptyTestCommand(NUnit.Framework.Internal.Test test) -> void
NUnit.Framework.Internal.Commands.MaxTimeCommand
NUnit.Framework.Internal.Commands.MaxTimeCommand.MaxTimeCommand(NUnit.Framework.Internal.Commands.TestCommand innerCommand, int maxTime) -> void
NUnit.Framework.Internal.Commands.OneTimeSetUpCommand
NUnit.Framework.Internal.Commands.OneTimeSetUpCommand.OneTimeSetUpCommand(NUnit.Framework.Internal.Commands.TestCommand innerCommand, NUnit.Framework.Internal.Commands.SetUpTearDownItem setUpTearDown) -> void
NUnit.Framework.Internal.Commands.OneTimeTearDownCommand
NUnit.Framework.Internal.Commands.OneTimeTearDownCommand.OneTimeTearDownCommand(NUnit.Framework.Internal.Commands.TestCommand innerCommand, NUnit.Framework.Internal.Commands.SetUpTearDownItem setUpTearDownItem) -> void
NUnit.Framework.Internal.Commands.SetUpTearDownCommand
NUnit.Framework.Internal.Commands.SetUpTearDownCommand.SetUpTearDownCommand(NUnit.Framework.Internal.Commands.TestCommand innerCommand, NUnit.Framework.Internal.Commands.SetUpTearDownItem setUpTearDown) -> void
NUnit.Framework.Internal.Commands.SetUpTearDownItem
NUnit.Framework.Internal.Commands.SetUpTearDownItem.HasMethods.get -> bool
NUnit.Framework.Internal.Commands.SetUpTearDownItem.RunSetUp(NUnit.Framework.Internal.TestExecutionContext context) -> void
NUnit.Framework.Internal.Commands.SetUpTearDownItem.RunTearDown(NUnit.Framework.Internal.TestExecutionContext context) -> void
NUnit.Framework.Internal.Commands.SetUpTearDownItem.SetUpTearDownItem(System.Collections.Generic.IList<System.Reflection.MethodInfo> setUpMethods, System.Collections.Generic.IList<System.Reflection.MethodInfo> tearDownMethods) -> void
NUnit.Framework.Internal.Commands.SkipCommand
NUnit.Framework.Internal.Commands.SkipCommand.SkipCommand(NUnit.Framework.Internal.Test test) -> void
NUnit.Framework.Internal.Commands.TestActionCommand
NUnit.Framework.Internal.Commands.TestActionCommand.TestActionCommand(NUnit.Framework.Internal.Commands.TestCommand innerCommand, NUnit.Framework.ITestAction action) -> void
NUnit.Framework.Internal.Commands.TestActionItem
NUnit.Framework.Internal.Commands.TestActionItem.AfterTest(NUnit.Framework.Interfaces.ITest test) -> void
NUnit.Framework.Internal.Commands.TestActionItem.BeforeTest(NUnit.Framework.Interfaces.ITest test) -> void
NUnit.Framework.Internal.Commands.TestActionItem.BeforeTestWasRun.get -> bool
NUnit.Framework.Internal.Commands.TestActionItem.TestActionItem(NUnit.Framework.ITestAction action) -> void
NUnit.Framework.Internal.Commands.TestCommand
NUnit.Framework.Internal.Commands.TestCommand.Test.get -> NUnit.Framework.Internal.Test
NUnit.Framework.Internal.Commands.TestCommand.TestCommand(NUnit.Framework.Internal.Test test) -> void
NUnit.Framework.Internal.Commands.TestMethodCommand
NUnit.Framework.Internal.Commands.TestMethodCommand.TestMethodCommand(NUnit.Framework.Internal.TestMethod testMethod) -> void
NUnit.Framework.Internal.Commands.TheoryResultCommand
NUnit.Framework.Internal.Commands.TheoryResultCommand.TheoryResultCommand(NUnit.Framework.Internal.Commands.TestCommand command) -> void
NUnit.Framework.Internal.Commands.TimeoutCommand
NUnit.Framework.Internal.Commands.TimeoutCommand.TimeoutCommand(NUnit.Framework.Internal.Commands.TestCommand innerCommand, int timeout) -> void
NUnit.Framework.Internal.CultureDetector
NUnit.Framework.Internal.CultureDetector.CultureDetector() -> void
NUnit.Framework.Internal.CultureDetector.CultureDetector(string culture) -> void
NUnit.Framework.Internal.CultureDetector.IsCultureSupported(NUnit.Framework.CultureAttribute cultureAttribute) -> bool
NUnit.Framework.Internal.CultureDetector.IsCultureSupported(string culture) -> bool
NUnit.Framework.Internal.CultureDetector.IsCultureSupported(string[] cultures) -> bool
NUnit.Framework.Internal.CultureDetector.Reason.get -> string
NUnit.Framework.Internal.ExceptionHelper
NUnit.Framework.Internal.ExceptionHelper.ExceptionHelper() -> void
NUnit.Framework.Internal.Execution.CompositeWorkItem
NUnit.Framework.Internal.Execution.CompositeWorkItem.Children.get -> System.Collections.Generic.List<NUnit.Framework.Internal.Execution.WorkItem>
NUnit.Framework.Internal.Execution.CompositeWorkItem.CompositeWorkItem(NUnit.Framework.Internal.TestSuite suite, NUnit.Framework.Interfaces.ITestFilter childFilter) -> void
NUnit.Framework.Internal.Execution.CompositeWorkItem.OneTimeTearDownWorkItem
NUnit.Framework.Internal.Execution.CompositeWorkItem.OneTimeTearDownWorkItem.OneTimeTearDownWorkItem(NUnit.Framework.Internal.Execution.CompositeWorkItem originalItem) -> void
NUnit.Framework.Internal.Execution.Event
NUnit.Framework.Internal.Execution.Event.Event() -> void
NUnit.Framework.Internal.Execution.EventListenerTextWriter
NUnit.Framework.Internal.Execution.EventListenerTextWriter.EventListenerTextWriter(string streamName, System.IO.TextWriter defaultWriter) -> void
NUnit.Framework.Internal.Execution.EventPump
NUnit.Framework.Internal.Execution.EventPump.Dispose() -> void
NUnit.Framework.Internal.Execution.EventPump.EventPump(NUnit.Framework.Interfaces.ITestListener eventListener, NUnit.Framework.Internal.Execution.EventQueue events) -> void
NUnit.Framework.Internal.Execution.EventPump.Name.get -> string
NUnit.Framework.Internal.Execution.EventPump.Name.set -> void
NUnit.Framework.Internal.Execution.EventPump.PumpState.get -> NUnit.Framework.Internal.Execution.EventPumpState
NUnit.Framework.Internal.Execution.EventPump.Start() -> void
NUnit.Framework.Internal.Execution.EventPump.Stop() -> void
NUnit.Framework.Internal.Execution.EventPumpState
NUnit.Framework.Internal.Execution.EventPumpState.Pumping = 1 -> NUnit.Framework.Internal.Execution.EventPumpState
NUnit.Framework.Internal.Execution.EventPumpState.Stopped = 0 -> NUnit.Framework.Internal.Execution.EventPumpState
NUnit.Framework.Internal.Execution.EventPumpState.Stopping = 2 -> NUnit.Framework.Internal.Execution.EventPumpState
NUnit.Framework.Internal.Execution.EventQueue
NUnit.Framework.Internal.Execution.EventQueue.Count.get -> int
NUnit.Framework.Internal.Execution.EventQueue.Dequeue(bool blockWhenEmpty) -> NUnit.Framework.Internal.Execution.Event
NUnit.Framework.Internal.Execution.EventQueue.Enqueue(NUnit.Framework.Internal.Execution.Event e) -> void
NUnit.Framework.Internal.Execution.EventQueue.EventQueue() -> void
NUnit.Framework.Internal.Execution.EventQueue.Stop() -> void
NUnit.Framework.Internal.Execution.IWorkItemDispatcher
NUnit.Framework.Internal.Execution.IWorkItemDispatcher.CancelRun(bool force) -> void
NUnit.Framework.Internal.Execution.IWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem work) -> void
NUnit.Framework.Internal.Execution.IWorkItemDispatcher.LevelOfParallelism.get -> int
NUnit.Framework.Internal.Execution.IWorkItemDispatcher.Start(NUnit.Framework.Internal.Execution.WorkItem topLevelWorkItem) -> void
NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher
NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.CancelRun(bool force) -> void
NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem work) -> void
NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.LevelOfParallelism.get -> int
NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.MainThreadWorkItemDispatcher() -> void
NUnit.Framework.Internal.Execution.MainThreadWorkItemDispatcher.Start(NUnit.Framework.Internal.Execution.WorkItem topLevelWorkItem) -> void
NUnit.Framework.Internal.Execution.ParallelExecutionStrategy
NUnit.Framework.Internal.Execution.ParallelExecutionStrategy.Direct = 0 -> NUnit.Framework.Internal.Execution.ParallelExecutionStrategy
NUnit.Framework.Internal.Execution.ParallelExecutionStrategy.NonParallel = 2 -> NUnit.Framework.Internal.Execution.ParallelExecutionStrategy
NUnit.Framework.Internal.Execution.ParallelExecutionStrategy.Parallel = 1 -> NUnit.Framework.Internal.Execution.ParallelExecutionStrategy
NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher
NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.CancelRun(bool force) -> void
NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem work) -> void
NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.LevelOfParallelism.get -> int
NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.ParallelWorkItemDispatcher(int levelOfParallelism) -> void
NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.Queues.get -> System.Collections.Generic.IEnumerable<NUnit.Framework.Internal.Execution.WorkItemQueue>
NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.ShiftFinished -> NUnit.Framework.Internal.Execution.ShiftChangeEventHandler
NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.ShiftStarting -> NUnit.Framework.Internal.Execution.ShiftChangeEventHandler
NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.Shifts.get -> System.Collections.Generic.IEnumerable<NUnit.Framework.Internal.Execution.WorkShift>
NUnit.Framework.Internal.Execution.ParallelWorkItemDispatcher.Start(NUnit.Framework.Internal.Execution.WorkItem topLevelWorkItem) -> void
NUnit.Framework.Internal.Execution.QueuingEventListener
NUnit.Framework.Internal.Execution.QueuingEventListener.Events.get -> NUnit.Framework.Internal.Execution.EventQueue
NUnit.Framework.Internal.Execution.QueuingEventListener.QueuingEventListener() -> void
NUnit.Framework.Internal.Execution.QueuingEventListener.SendMessage(NUnit.Framework.Interfaces.TestMessage message) -> void
NUnit.Framework.Internal.Execution.QueuingEventListener.TestFinished(NUnit.Framework.Interfaces.ITestResult result) -> void
NUnit.Framework.Internal.Execution.QueuingEventListener.TestOutput(NUnit.Framework.Interfaces.TestOutput output) -> void
NUnit.Framework.Internal.Execution.QueuingEventListener.TestStarted(NUnit.Framework.Interfaces.ITest test) -> void
NUnit.Framework.Internal.Execution.ShiftChangeEventHandler
NUnit.Framework.Internal.Execution.SimpleWorkItem
NUnit.Framework.Internal.Execution.SimpleWorkItem.SimpleWorkItem(NUnit.Framework.Internal.TestMethod test, NUnit.Framework.Interfaces.ITestFilter filter) -> void
NUnit.Framework.Internal.Execution.SimpleWorkItemDispatcher
NUnit.Framework.Internal.Execution.SimpleWorkItemDispatcher.CancelRun(bool force) -> void
NUnit.Framework.Internal.Execution.SimpleWorkItemDispatcher.Dispatch(NUnit.Framework.Internal.Execution.WorkItem work) -> void
NUnit.Framework.Internal.Execution.SimpleWorkItemDispatcher.LevelOfParallelism.get -> int
NUnit.Framework.Internal.Execution.SimpleWorkItemDispatcher.SimpleWorkItemDispatcher() -> void
NUnit.Framework.Internal.Execution.SimpleWorkItemDispatcher.Start(NUnit.Framework.Internal.Execution.WorkItem topLevelWorkItem) -> void
NUnit.Framework.Internal.Execution.TestFinishedEvent
NUnit.Framework.Internal.Execution.TestFinishedEvent.TestFinishedEvent(NUnit.Framework.Interfaces.ITestResult result) -> void
NUnit.Framework.Internal.Execution.TestMessageEvent
NUnit.Framework.Internal.Execution.TestMessageEvent.TestMessage.get -> NUnit.Framework.Interfaces.TestMessage
NUnit.Framework.Internal.Execution.TestMessageEvent.TestMessageEvent(NUnit.Framework.Interfaces.TestMessage testMessage) -> void
NUnit.Framework.Internal.Execution.TestOutputEvent
NUnit.Framework.Internal.Execution.TestOutputEvent.TestOutputEvent(NUnit.Framework.Interfaces.TestOutput output) -> void
NUnit.Framework.Internal.Execution.TestStartedEvent
NUnit.Framework.Internal.Execution.TestStartedEvent.TestStartedEvent(NUnit.Framework.Interfaces.ITest test) -> void
NUnit.Framework.Internal.Execution.TestWorker
NUnit.Framework.Internal.Execution.TestWorker.Busy -> NUnit.Framework.Internal.Execution.TestWorker.TestWorkerEventHandler
NUnit.Framework.Internal.Execution.TestWorker.Cancel(bool force) -> void
NUnit.Framework.Internal.Execution.TestWorker.Idle -> NUnit.Framework.Internal.Execution.TestWorker.TestWorkerEventHandler
NUnit.Framework.Internal.Execution.TestWorker.IsAlive.get -> bool
NUnit.Framework.Internal.Execution.TestWorker.Name.get -> string
NUnit.Framework.Internal.Execution.TestWorker.Start() -> void
NUnit.Framework.Internal.Execution.TestWorker.TestWorker(NUnit.Framework.Internal.Execution.WorkItemQueue queue, string name) -> void
NUnit.Framework.Internal.Execution.TestWorker.TestWorkerEventHandler
NUnit.Framework.Internal.Execution.TestWorker.WorkQueue.get -> NUnit.Framework.Internal.Execution.WorkItemQueue
NUnit.Framework.Internal.Execution.TextCapture
NUnit.Framework.Internal.Execution.TextCapture.TextCapture(System.IO.TextWriter defaultWriter) -> void
NUnit.Framework.Internal.Execution.WorkItem
NUnit.Framework.Internal.Execution.WorkItem.BuildSetUpTearDownList(System.Reflection.MethodInfo[] setUpMethods, System.Reflection.MethodInfo[] tearDownMethods) -> System.Collections.Generic.List<NUnit.Framework.Internal.Commands.SetUpTearDownItem>
NUnit.Framework.Internal.Execution.WorkItem.ChangeResult(NUnit.Framework.Interfaces.ResultState resultState, string message) -> void
NUnit.Framework.Internal.Execution.WorkItem.Completed -> System.EventHandler
NUnit.Framework.Internal.Execution.WorkItem.Context.get -> NUnit.Framework.Internal.TestExecutionContext
NUnit.Framework.Internal.Execution.WorkItem.Dispose() -> void
NUnit.Framework.Internal.Execution.WorkItem.Filter.get -> NUnit.Framework.Interfaces.ITestFilter
NUnit.Framework.Internal.Execution.WorkItem.InitializeContext(NUnit.Framework.Internal.TestExecutionContext context) -> void
NUnit.Framework.Internal.Execution.WorkItem.MarkNotRunnable(string reason) -> void
NUnit.Framework.Internal.Execution.WorkItem.ParallelScope.get -> NUnit.Framework.ParallelScope
NUnit.Framework.Internal.Execution.WorkItem.Result.get -> NUnit.Framework.Internal.TestResult
NUnit.Framework.Internal.Execution.WorkItem.Result.set -> void
NUnit.Framework.Internal.Execution.WorkItem.State.get -> NUnit.Framework.Internal.Execution.WorkItemState
NUnit.Framework.Internal.Execution.WorkItem.Test.get -> NUnit.Framework.Internal.Test
NUnit.Framework.Internal.Execution.WorkItem.TestWorker.get -> NUnit.Framework.Internal.Execution.TestWorker
NUnit.Framework.Internal.Execution.WorkItem.WaitForCompletion() -> void
NUnit.Framework.Internal.Execution.WorkItem.WorkItem(NUnit.Framework.Internal.Execution.WorkItem wrappedItem) -> void
NUnit.Framework.Internal.Execution.WorkItem.WorkItem(NUnit.Framework.Internal.Test test, NUnit.Framework.Interfaces.ITestFilter filter) -> void
NUnit.Framework.Internal.Execution.WorkItem.WorkItemComplete() -> void
NUnit.Framework.Internal.Execution.WorkItemBuilder
NUnit.Framework.Internal.Execution.WorkItemQueue
NUnit.Framework.Internal.Execution.WorkItemQueue.Dequeue() -> NUnit.Framework.Internal.Execution.WorkItem
NUnit.Framework.Internal.Execution.WorkItemQueue.Enqueue(NUnit.Framework.Internal.Execution.WorkItem work) -> void
NUnit.Framework.Internal.Execution.WorkItemQueue.IsEmpty.get -> bool
NUnit.Framework.Internal.Execution.WorkItemQueue.IsParallelQueue.get -> bool
NUnit.Framework.Internal.Execution.WorkItemQueue.ItemsProcessed.get -> int
NUnit.Framework.Internal.Execution.WorkItemQueue.Name.get -> string
NUnit.Framework.Internal.Execution.WorkItemQueue.Pause() -> void
NUnit.Framework.Internal.Execution.WorkItemQueue.Start() -> void
NUnit.Framework.Internal.Execution.WorkItemQueue.State.get -> NUnit.Framework.Internal.Execution.WorkItemQueueState
NUnit.Framework.Internal.Execution.WorkItemQueue.Stop() -> void
NUnit.Framework.Internal.Execution.WorkItemQueue.TargetApartment.get -> System.Threading.ApartmentState
NUnit.Framework.Internal.Execution.WorkItemQueue.WorkItemQueue(string name, bool isParallel, System.Threading.ApartmentState apartment) -> void
NUnit.Framework.Internal.Execution.WorkItemQueueState
NUnit.Framework.Internal.Execution.WorkItemQueueState.Paused = 0 -> NUnit.Framework.Internal.Execution.WorkItemQueueState
NUnit.Framework.Internal.Execution.WorkItemQueueState.Running = 1 -> NUnit.Framework.Internal.Execution.WorkItemQueueState
NUnit.Framework.Internal.Execution.WorkItemQueueState.Stopped = 2 -> NUnit.Framework.Internal.Execution.WorkItemQueueState
NUnit.Framework.Internal.Execution.WorkItemState
NUnit.Framework.Internal.Execution.WorkItemState.Complete = 2 -> NUnit.Framework.Internal.Execution.WorkItemState
NUnit.Framework.Internal.Execution.WorkItemState.Ready = 0 -> NUnit.Framework.Internal.Execution.WorkItemState
NUnit.Framework.Internal.Execution.WorkItemState.Running = 1 -> NUnit.Framework.Internal.Execution.WorkItemState
NUnit.Framework.Internal.Execution.WorkShift
NUnit.Framework.Internal.Execution.WorkShift.AddQueue(NUnit.Framework.Internal.Execution.WorkItemQueue queue) -> void
NUnit.Framework.Internal.Execution.WorkShift.Assign(NUnit.Framework.Internal.Execution.TestWorker worker) -> void
NUnit.Framework.Internal.Execution.WorkShift.Cancel(bool force) -> void
NUnit.Framework.Internal.Execution.WorkShift.EndOfShift -> NUnit.Framework.Internal.Execution.ShiftChangeEventHandler
NUnit.Framework.Internal.Execution.WorkShift.EndShift() -> void
NUnit.Framework.Internal.Execution.WorkShift.HasWork.get -> bool
NUnit.Framework.Internal.Execution.WorkShift.IsActive.get -> bool
NUnit.Framework.Internal.Execution.WorkShift.Name.get -> string
NUnit.Framework.Internal.Execution.WorkShift.ShutDown() -> void
NUnit.Framework.Internal.Execution.WorkShift.Start() -> void
NUnit.Framework.Internal.Execution.WorkShift.WorkShift(string name) -> void
NUnit.Framework.Internal.GenericMethodHelper
NUnit.Framework.Internal.GenericMethodHelper.GenericMethodHelper(System.Reflection.MethodInfo method) -> void
NUnit.Framework.Internal.GenericMethodHelper.TryGetTypeArguments(object[] argList, out System.Type[] typeArguments) -> bool
NUnit.Framework.Internal.ILogger
NUnit.Framework.Internal.ILogger.Debug(string message) -> void
NUnit.Framework.Internal.ILogger.Debug(string message, params object[] args) -> void
NUnit.Framework.Internal.ILogger.Error(string message) -> void
NUnit.Framework.Internal.ILogger.Error(string message, params object[] args) -> void
NUnit.Framework.Internal.ILogger.Info(string message) -> void
NUnit.Framework.Internal.ILogger.Info(string message, params object[] args) -> void
NUnit.Framework.Internal.ILogger.Warning(string message) -> void
NUnit.Framework.Internal.ILogger.Warning(string message, params object[] args) -> void
NUnit.Framework.Internal.InternalTrace
NUnit.Framework.Internal.InternalTraceLevel
NUnit.Framework.Internal.InternalTraceLevel.Debug = 5 -> NUnit.Framework.Internal.InternalTraceLevel
NUnit.Framework.Internal.InternalTraceLevel.Default = 0 -> NUnit.Framework.Internal.InternalTraceLevel
NUnit.Framework.Internal.InternalTraceLevel.Error = 2 -> NUnit.Framework.Internal.InternalTraceLevel
NUnit.Framework.Internal.InternalTraceLevel.Info = 4 -> NUnit.Framework.Internal.InternalTraceLevel
NUnit.Framework.Internal.InternalTraceLevel.Off = 1 -> NUnit.Framework.Internal.InternalTraceLevel
NUnit.Framework.Internal.InternalTraceLevel.Verbose = 5 -> NUnit.Framework.Internal.InternalTraceLevel
NUnit.Framework.Internal.InternalTraceLevel.Warning = 3 -> NUnit.Framework.Internal.InternalTraceLevel
NUnit.Framework.Internal.InternalTraceWriter
NUnit.Framework.Internal.InternalTraceWriter.InternalTraceWriter(System.IO.TextWriter writer) -> void
NUnit.Framework.Internal.InternalTraceWriter.InternalTraceWriter(string logPath) -> void
NUnit.Framework.Internal.InvalidDataSourceException
NUnit.Framework.Internal.InvalidDataSourceException.InvalidDataSourceException() -> void
NUnit.Framework.Internal.InvalidDataSourceException.InvalidDataSourceException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
NUnit.Framework.Internal.InvalidDataSourceException.InvalidDataSourceException(string message) -> void
NUnit.Framework.Internal.InvalidDataSourceException.InvalidDataSourceException(string message, System.Exception inner) -> void
NUnit.Framework.Internal.InvalidTestFixtureException
NUnit.Framework.Internal.InvalidTestFixtureException.InvalidTestFixtureException() -> void
NUnit.Framework.Internal.InvalidTestFixtureException.InvalidTestFixtureException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
NUnit.Framework.Internal.InvalidTestFixtureException.InvalidTestFixtureException(string message) -> void
NUnit.Framework.Internal.InvalidTestFixtureException.InvalidTestFixtureException(string message, System.Exception inner) -> void
NUnit.Framework.Internal.Logger
NUnit.Framework.Internal.Logger.Debug(string message) -> void
NUnit.Framework.Internal.Logger.Debug(string message, params object[] args) -> void
NUnit.Framework.Internal.Logger.Error(string message) -> void
NUnit.Framework.Internal.Logger.Error(string message, params object[] args) -> void
NUnit.Framework.Internal.Logger.Info(string message) -> void
NUnit.Framework.Internal.Logger.Info(string message, params object[] args) -> void
NUnit.Framework.Internal.Logger.Logger(string name, NUnit.Framework.Internal.InternalTraceLevel level, System.IO.TextWriter writer) -> void
NUnit.Framework.Internal.Logger.Warning(string message) -> void
NUnit.Framework.Internal.Logger.Warning(string message, params object[] args) -> void
NUnit.Framework.Internal.MethodWrapper
NUnit.Framework.Internal.MethodWrapper.ContainsGenericParameters.get -> bool
NUnit.Framework.Internal.MethodWrapper.GetCustomAttributes<T>(bool inherit) -> T[]
NUnit.Framework.Internal.MethodWrapper.GetGenericArguments() -> System.Type[]
NUnit.Framework.Internal.MethodWrapper.GetParameters() -> NUnit.Framework.Interfaces.IParameterInfo[]
NUnit.Framework.Internal.MethodWrapper.Invoke(object fixture, params object[] args) -> object
NUnit.Framework.Internal.MethodWrapper.IsAbstract.get -> bool
NUnit.Framework.Internal.MethodWrapper.IsDefined<T>(bool inherit) -> bool
NUnit.Framework.Internal.MethodWrapper.IsGenericMethod.get -> bool
NUnit.Framework.Internal.MethodWrapper.IsGenericMethodDefinition.get -> bool
NUnit.Framework.Internal.MethodWrapper.IsPublic.get -> bool
NUnit.Framework.Internal.MethodWrapper.MakeGenericMethod(params System.Type[] typeArguments) -> NUnit.Framework.Interfaces.IMethodInfo
NUnit.Framework.Internal.MethodWrapper.MethodInfo.get -> System.Reflection.MethodInfo
NUnit.Framework.Internal.MethodWrapper.MethodWrapper(System.Type type, System.Reflection.MethodInfo method) -> void
NUnit.Framework.Internal.MethodWrapper.MethodWrapper(System.Type type, string methodName) -> void
NUnit.Framework.Internal.MethodWrapper.Name.get -> string
NUnit.Framework.Internal.MethodWrapper.ReturnType.get -> NUnit.Framework.Interfaces.ITypeInfo
NUnit.Framework.Internal.MethodWrapper.TypeInfo.get -> NUnit.Framework.Interfaces.ITypeInfo
NUnit.Framework.Internal.NUnitException
NUnit.Framework.Internal.NUnitException.NUnitException() -> void
NUnit.Framework.Internal.NUnitException.NUnitException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
NUnit.Framework.Internal.NUnitException.NUnitException(string message) -> void
NUnit.Framework.Internal.NUnitException.NUnitException(string message, System.Exception inner) -> void
NUnit.Framework.Internal.OSPlatform
NUnit.Framework.Internal.OSPlatform.IsMacOSX.get -> bool
NUnit.Framework.Internal.OSPlatform.IsNT3.get -> bool
NUnit.Framework.Internal.OSPlatform.IsNT4.get -> bool
NUnit.Framework.Internal.OSPlatform.IsNT5.get -> bool
NUnit.Framework.Internal.OSPlatform.IsNT6.get -> bool
NUnit.Framework.Internal.OSPlatform.IsNT60.get -> bool
NUnit.Framework.Internal.OSPlatform.IsNT61.get -> bool
NUnit.Framework.Internal.OSPlatform.IsNT62.get -> bool
NUnit.Framework.Internal.OSPlatform.IsNT63.get -> bool
NUnit.Framework.Internal.OSPlatform.IsUnix.get -> bool
NUnit.Framework.Internal.OSPlatform.IsVista.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWin2003Server.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWin2008Server.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWin2008ServerR1.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWin2008ServerR2.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWin2012Server.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWin2012ServerR1.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWin2012ServerR2.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWin2K.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWin32NT.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWin32S.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWin32Windows.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWin95.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWin98.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWinCE.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWinME.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWinXP.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWindows.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWindows10.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWindows7.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWindows8.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWindows81.get -> bool
NUnit.Framework.Internal.OSPlatform.IsWindowsServer10.get -> bool
NUnit.Framework.Internal.OSPlatform.IsXbox.get -> bool
NUnit.Framework.Internal.OSPlatform.OSPlatform(System.PlatformID platform, System.Version version) -> void
NUnit.Framework.Internal.OSPlatform.OSPlatform(System.PlatformID platform, System.Version version, NUnit.Framework.Internal.OSPlatform.ProductType product) -> void
NUnit.Framework.Internal.OSPlatform.Platform.get -> System.PlatformID
NUnit.Framework.Internal.OSPlatform.Product.get -> NUnit.Framework.Internal.OSPlatform.ProductType
NUnit.Framework.Internal.OSPlatform.ProductType
NUnit.Framework.Internal.OSPlatform.ProductType.DomainController = 2 -> NUnit.Framework.Internal.OSPlatform.ProductType
NUnit.Framework.Internal.OSPlatform.ProductType.Server = 3 -> NUnit.Framework.Internal.OSPlatform.ProductType
NUnit.Framework.Internal.OSPlatform.ProductType.Unknown = 0 -> NUnit.Framework.Internal.OSPlatform.ProductType
NUnit.Framework.Internal.OSPlatform.ProductType.WorkStation = 1 -> NUnit.Framework.Internal.OSPlatform.ProductType
NUnit.Framework.Internal.OSPlatform.Version.get -> System.Version
NUnit.Framework.Internal.ParameterWrapper
NUnit.Framework.Internal.ParameterWrapper.GetCustomAttributes<T>(bool inherit) -> T[]
NUnit.Framework.Internal.ParameterWrapper.IsDefined<T>(bool inherit) -> bool
NUnit.Framework.Internal.ParameterWrapper.IsOptional.get -> bool
NUnit.Framework.Internal.ParameterWrapper.Method.get -> NUnit.Framework.Interfaces.IMethodInfo
NUnit.Framework.Internal.ParameterWrapper.ParameterInfo.get -> System.Reflection.ParameterInfo
NUnit.Framework.Internal.ParameterWrapper.ParameterType.get -> System.Type
NUnit.Framework.Internal.ParameterWrapper.ParameterWrapper(NUnit.Framework.Interfaces.IMethodInfo method, System.Reflection.ParameterInfo parameterInfo) -> void
NUnit.Framework.Internal.ParameterizedFixtureSuite
NUnit.Framework.Internal.ParameterizedFixtureSuite.ParameterizedFixtureSuite(NUnit.Framework.Interfaces.ITypeInfo typeInfo) -> void
NUnit.Framework.Internal.ParameterizedFixtureSuite.ParameterizedFixtureSuite(NUnit.Framework.Internal.ParameterizedFixtureSuite suite, NUnit.Framework.Interfaces.ITestFilter filter) -> void
NUnit.Framework.Internal.ParameterizedMethodSuite
NUnit.Framework.Internal.ParameterizedMethodSuite.ParameterizedMethodSuite(NUnit.Framework.Interfaces.IMethodInfo method) -> void
NUnit.Framework.Internal.ParameterizedMethodSuite.ParameterizedMethodSuite(NUnit.Framework.Internal.ParameterizedMethodSuite suite, NUnit.Framework.Interfaces.ITestFilter filter) -> void
NUnit.Framework.Internal.PlatformHelper
NUnit.Framework.Internal.PlatformHelper.IsPlatformSupported(NUnit.Framework.PlatformAttribute platformAttribute) -> bool
NUnit.Framework.Internal.PlatformHelper.IsPlatformSupported(NUnit.Framework.TestCaseAttribute testCaseAttribute) -> bool
NUnit.Framework.Internal.PlatformHelper.IsPlatformSupported(string platform) -> bool
NUnit.Framework.Internal.PlatformHelper.IsPlatformSupported(string[] platforms) -> bool
NUnit.Framework.Internal.PlatformHelper.PlatformHelper() -> void
NUnit.Framework.Internal.PlatformHelper.PlatformHelper(NUnit.Framework.Internal.OSPlatform os, NUnit.Framework.Internal.RuntimeFramework rt) -> void
NUnit.Framework.Internal.PlatformHelper.Reason.get -> string
NUnit.Framework.Internal.PropertyBag
NUnit.Framework.Internal.PropertyBag.Add(string key, object value) -> void
NUnit.Framework.Internal.PropertyBag.AddToXml(NUnit.Framework.Interfaces.TNode parentNode, bool recursive) -> NUnit.Framework.Interfaces.TNode
NUnit.Framework.Internal.PropertyBag.ContainsKey(string key) -> bool
NUnit.Framework.Internal.PropertyBag.Get(string key) -> object
NUnit.Framework.Internal.PropertyBag.Keys.get -> System.Collections.Generic.ICollection<string>
NUnit.Framework.Internal.PropertyBag.PropertyBag() -> void
NUnit.Framework.Internal.PropertyBag.Set(string key, object value) -> void
NUnit.Framework.Internal.PropertyBag.ToXml(bool recursive) -> NUnit.Framework.Interfaces.TNode
NUnit.Framework.Internal.PropertyBag.this[string key].get -> System.Collections.IList
NUnit.Framework.Internal.PropertyBag.this[string key].set -> void
NUnit.Framework.Internal.PropertyNames
NUnit.Framework.Internal.PropertyNames.PropertyNames() -> void
NUnit.Framework.Internal.Randomizer
NUnit.Framework.Internal.Randomizer.GetString() -> string
NUnit.Framework.Internal.Randomizer.GetString(int outputLength) -> string
NUnit.Framework.Internal.Randomizer.GetString(int outputLength, string allowedChars) -> string
NUnit.Framework.Internal.Randomizer.NextBool() -> bool
NUnit.Framework.Internal.Randomizer.NextBool(double probability) -> bool
NUnit.Framework.Internal.Randomizer.NextByte() -> byte
NUnit.Framework.Internal.Randomizer.NextByte(byte max) -> byte
NUnit.Framework.Internal.Randomizer.NextByte(byte min, byte max) -> byte
NUnit.Framework.Internal.Randomizer.NextDecimal() -> decimal
NUnit.Framework.Internal.Randomizer.NextDecimal(decimal max) -> decimal
NUnit.Framework.Internal.Randomizer.NextDecimal(decimal min, decimal max) -> decimal
NUnit.Framework.Internal.Randomizer.NextDouble(double max) -> double
NUnit.Framework.Internal.Randomizer.NextDouble(double min, double max) -> double
NUnit.Framework.Internal.Randomizer.NextEnum(System.Type type) -> object
NUnit.Framework.Internal.Randomizer.NextEnum<T>() -> T
NUnit.Framework.Internal.Randomizer.NextFloat() -> float
NUnit.Framework.Internal.Randomizer.NextFloat(float max) -> float
NUnit.Framework.Internal.Randomizer.NextFloat(float min, float max) -> float
NUnit.Framework.Internal.Randomizer.NextGuid() -> System.Guid
NUnit.Framework.Internal.Randomizer.NextLong() -> long
NUnit.Framework.Internal.Randomizer.NextLong(long max) -> long
NUnit.Framework.Internal.Randomizer.NextLong(long min, long max) -> long
NUnit.Framework.Internal.Randomizer.NextSByte() -> sbyte
NUnit.Framework.Internal.Randomizer.NextSByte(sbyte max) -> sbyte
NUnit.Framework.Internal.Randomizer.NextSByte(sbyte min, sbyte max) -> sbyte
NUnit.Framework.Internal.Randomizer.NextShort() -> short
NUnit.Framework.Internal.Randomizer.NextShort(short max) -> short
NUnit.Framework.Internal.Randomizer.NextShort(short min, short max) -> short
NUnit.Framework.Internal.Randomizer.NextUInt() -> uint
NUnit.Framework.Internal.Randomizer.NextUInt(uint max) -> uint
NUnit.Framework.Internal.Randomizer.NextUInt(uint min, uint max) -> uint
NUnit.Framework.Internal.Randomizer.NextULong() -> ulong
NUnit.Framework.Internal.Randomizer.NextULong(ulong max) -> ulong
NUnit.Framework.Internal.Randomizer.NextULong(ulong min, ulong max) -> ulong
NUnit.Framework.Internal.Randomizer.NextUShort() -> ushort
NUnit.Framework.Internal.Randomizer.NextUShort(ushort max) -> ushort
NUnit.Framework.Internal.Randomizer.NextUShort(ushort min, ushort max) -> ushort
NUnit.Framework.Internal.Randomizer.Randomizer() -> void
NUnit.Framework.Internal.Randomizer.Randomizer(int seed) -> void
NUnit.Framework.Internal.Reflect
NUnit.Framework.Internal.RuntimeFramework
NUnit.Framework.Internal.RuntimeFramework.AllowAnyVersion.get -> bool
NUnit.Framework.Internal.RuntimeFramework.ClrVersion.get -> System.Version
NUnit.Framework.Internal.RuntimeFramework.DisplayName.get -> string
NUnit.Framework.Internal.RuntimeFramework.FrameworkVersion.get -> System.Version
NUnit.Framework.Internal.RuntimeFramework.Runtime.get -> NUnit.Framework.Internal.RuntimeType
NUnit.Framework.Internal.RuntimeFramework.RuntimeFramework(NUnit.Framework.Internal.RuntimeType runtime, System.Version version) -> void
NUnit.Framework.Internal.RuntimeFramework.Supports(NUnit.Framework.Internal.RuntimeFramework target) -> bool
NUnit.Framework.Internal.RuntimeType
NUnit.Framework.Internal.RuntimeType.Any = 0 -> NUnit.Framework.Internal.RuntimeType
NUnit.Framework.Internal.RuntimeType.Mono = 3 -> NUnit.Framework.Internal.RuntimeType
NUnit.Framework.Internal.RuntimeType.MonoTouch = 4 -> NUnit.Framework.Internal.RuntimeType
NUnit.Framework.Internal.RuntimeType.Net = 1 -> NUnit.Framework.Internal.RuntimeType
NUnit.Framework.Internal.RuntimeType.NetCore = 5 -> NUnit.Framework.Internal.RuntimeType
NUnit.Framework.Internal.RuntimeType.SSCLI = 2 -> NUnit.Framework.Internal.RuntimeType
NUnit.Framework.Internal.SetUpFixture
NUnit.Framework.Internal.SetUpFixture.SetUpFixture(NUnit.Framework.Interfaces.ITypeInfo type) -> void
NUnit.Framework.Internal.SetUpFixture.SetUpFixture(NUnit.Framework.Internal.SetUpFixture setUpFixture, NUnit.Framework.Interfaces.ITestFilter filter) -> void
NUnit.Framework.Internal.StackFilter
NUnit.Framework.Internal.StackFilter.Filter(string rawTrace) -> string
NUnit.Framework.Internal.StackFilter.StackFilter() -> void
NUnit.Framework.Internal.StackFilter.StackFilter(string topOfStackPattern) -> void
NUnit.Framework.Internal.StackFilter.StackFilter(string topOfStackPattern, string bottomOfStackPattern) -> void
NUnit.Framework.Internal.StringUtil
NUnit.Framework.Internal.StringUtil.StringUtil() -> void
NUnit.Framework.Internal.Test
NUnit.Framework.Internal.Test.ApplyAttributesToTest(System.Reflection.ICustomAttributeProvider provider) -> void
NUnit.Framework.Internal.Test.ClassName.get -> string
NUnit.Framework.Internal.Test.CompareTo(object obj) -> int
NUnit.Framework.Internal.Test.FullName.get -> string
NUnit.Framework.Internal.Test.FullName.set -> void
NUnit.Framework.Internal.Test.Id.get -> string
NUnit.Framework.Internal.Test.Id.set -> void
NUnit.Framework.Internal.Test.IsSuite.get -> bool
NUnit.Framework.Internal.Test.MakeInvalid(string reason) -> void
NUnit.Framework.Internal.Test.Method.get -> NUnit.Framework.Interfaces.IMethodInfo
NUnit.Framework.Internal.Test.Method.set -> void
NUnit.Framework.Internal.Test.Name.get -> string
NUnit.Framework.Internal.Test.Name.set -> void
NUnit.Framework.Internal.Test.Parent.get -> NUnit.Framework.Interfaces.ITest
NUnit.Framework.Internal.Test.Parent.set -> void
NUnit.Framework.Internal.Test.PopulateTestNode(NUnit.Framework.Interfaces.TNode thisNode, bool recursive) -> void
NUnit.Framework.Internal.Test.Properties.get -> NUnit.Framework.Interfaces.IPropertyBag
NUnit.Framework.Internal.Test.RunState.get -> NUnit.Framework.Interfaces.RunState
NUnit.Framework.Internal.Test.RunState.set -> void
NUnit.Framework.Internal.Test.Seed.get -> int
NUnit.Framework.Internal.Test.Seed.set -> void
NUnit.Framework.Internal.Test.SetUpMethods.get -> System.Reflection.MethodInfo[]
NUnit.Framework.Internal.Test.SetUpMethods.set -> void
NUnit.Framework.Internal.Test.TearDownMethods.get -> System.Reflection.MethodInfo[]
NUnit.Framework.Internal.Test.TearDownMethods.set -> void
NUnit.Framework.Internal.Test.Test(NUnit.Framework.Interfaces.IMethodInfo method) -> void
NUnit.Framework.Internal.Test.Test(NUnit.Framework.Interfaces.ITypeInfo typeInfo) -> void
NUnit.Framework.Internal.Test.Test(string name) -> void
NUnit.Framework.Internal.Test.Test(string pathName, string name) -> void
NUnit.Framework.Internal.Test.ToXml(bool recursive) -> NUnit.Framework.Interfaces.TNode
NUnit.Framework.Internal.Test.TypeInfo.get -> NUnit.Framework.Interfaces.ITypeInfo
NUnit.Framework.Internal.TestAssembly
NUnit.Framework.Internal.TestAssembly.Assembly.get -> System.Reflection.Assembly
NUnit.Framework.Internal.TestAssembly.TestAssembly(NUnit.Framework.Internal.TestAssembly assembly, NUnit.Framework.Interfaces.ITestFilter filter) -> void
NUnit.Framework.Internal.TestAssembly.TestAssembly(System.Reflection.Assembly assembly, string assemblyNameOrPath) -> void
NUnit.Framework.Internal.TestAssembly.TestAssembly(string assemblyNameOrPath) -> void
NUnit.Framework.Internal.TestCaseParameters
NUnit.Framework.Internal.TestCaseParameters.ExpectedResult.get -> object
NUnit.Framework.Internal.TestCaseParameters.ExpectedResult.set -> void
NUnit.Framework.Internal.TestCaseParameters.HasExpectedResult.get -> bool
NUnit.Framework.Internal.TestCaseParameters.HasExpectedResult.set -> void
NUnit.Framework.Internal.TestCaseParameters.TestCaseParameters() -> void
NUnit.Framework.Internal.TestCaseParameters.TestCaseParameters(NUnit.Framework.Interfaces.ITestCaseData data) -> void
NUnit.Framework.Internal.TestCaseParameters.TestCaseParameters(System.Exception exception) -> void
NUnit.Framework.Internal.TestCaseParameters.TestCaseParameters(object[] args) -> void
NUnit.Framework.Internal.TestCaseResult
NUnit.Framework.Internal.TestCaseResult.TestCaseResult(NUnit.Framework.Internal.TestMethod test) -> void
NUnit.Framework.Internal.TestCaseTimeoutException
NUnit.Framework.Internal.TestCaseTimeoutException.TestCaseTimeoutException() -> void
NUnit.Framework.Internal.TestCaseTimeoutException.TestCaseTimeoutException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
NUnit.Framework.Internal.TestCaseTimeoutException.TestCaseTimeoutException(string message) -> void
NUnit.Framework.Internal.TestCaseTimeoutException.TestCaseTimeoutException(string message, System.Exception inner) -> void
NUnit.Framework.Internal.TestExecutionContext
NUnit.Framework.Internal.TestExecutionContext.AddFormatter(NUnit.Framework.Constraints.ValueFormatterFactory formatterFactory) -> void
NUnit.Framework.Internal.TestExecutionContext.AdhocContext
NUnit.Framework.Internal.TestExecutionContext.AdhocContext.AdhocContext() -> void
NUnit.Framework.Internal.TestExecutionContext.CurrentCulture.get -> System.Globalization.CultureInfo
NUnit.Framework.Internal.TestExecutionContext.CurrentCulture.set -> void
NUnit.Framework.Internal.TestExecutionContext.CurrentPrincipal.get -> System.Security.Principal.IPrincipal
NUnit.Framework.Internal.TestExecutionContext.CurrentPrincipal.set -> void
NUnit.Framework.Internal.TestExecutionContext.CurrentRepeatCount.get -> int
NUnit.Framework.Internal.TestExecutionContext.CurrentRepeatCount.set -> void
NUnit.Framework.Internal.TestExecutionContext.CurrentResult.get -> NUnit.Framework.Internal.TestResult
NUnit.Framework.Internal.TestExecutionContext.CurrentResult.set -> void
NUnit.Framework.Internal.TestExecutionContext.CurrentTest.get -> NUnit.Framework.Internal.Test
NUnit.Framework.Internal.TestExecutionContext.CurrentTest.set -> void
NUnit.Framework.Internal.TestExecutionContext.CurrentUICulture.get -> System.Globalization.CultureInfo
NUnit.Framework.Internal.TestExecutionContext.CurrentUICulture.set -> void
NUnit.Framework.Internal.TestExecutionContext.CurrentValueFormatter.get -> NUnit.Framework.Constraints.ValueFormatter
NUnit.Framework.Internal.TestExecutionContext.DefaultFloatingPointTolerance.get -> NUnit.Framework.Constraints.Tolerance
NUnit.Framework.Internal.TestExecutionContext.DefaultFloatingPointTolerance.set -> void
NUnit.Framework.Internal.TestExecutionContext.Dispatcher.get -> NUnit.Framework.Internal.Execution.IWorkItemDispatcher
NUnit.Framework.Internal.TestExecutionContext.Dispatcher.set -> void
NUnit.Framework.Internal.TestExecutionContext.EstablishExecutionEnvironment() -> void
NUnit.Framework.Internal.TestExecutionContext.ExecutionStatus.get -> NUnit.Framework.Internal.TestExecutionStatus
NUnit.Framework.Internal.TestExecutionContext.ExecutionStatus.set -> void
NUnit.Framework.Internal.TestExecutionContext.IncrementAssertCount() -> void
NUnit.Framework.Internal.TestExecutionContext.IncrementAssertCount(int count) -> void
NUnit.Framework.Internal.TestExecutionContext.IsSingleThreaded.get -> bool
NUnit.Framework.Internal.TestExecutionContext.IsSingleThreaded.set -> void
NUnit.Framework.Internal.TestExecutionContext.IsolatedContext
NUnit.Framework.Internal.TestExecutionContext.IsolatedContext.Dispose() -> void
NUnit.Framework.Internal.TestExecutionContext.IsolatedContext.IsolatedContext() -> void
NUnit.Framework.Internal.TestExecutionContext.OutWriter.get -> System.IO.TextWriter
NUnit.Framework.Internal.TestExecutionContext.ParallelScope.get -> NUnit.Framework.ParallelScope
NUnit.Framework.Internal.TestExecutionContext.ParallelScope.set -> void
NUnit.Framework.Internal.TestExecutionContext.RandomGenerator.get -> NUnit.Framework.Internal.Randomizer
NUnit.Framework.Internal.TestExecutionContext.SendMessage(string destination, string message) -> void
NUnit.Framework.Internal.TestExecutionContext.StartTicks.get -> long
NUnit.Framework.Internal.TestExecutionContext.StartTicks.set -> void
NUnit.Framework.Internal.TestExecutionContext.StartTime.get -> System.DateTime
NUnit.Framework.Internal.TestExecutionContext.StartTime.set -> void
NUnit.Framework.Internal.TestExecutionContext.StopOnError.get -> bool
NUnit.Framework.Internal.TestExecutionContext.StopOnError.set -> void
NUnit.Framework.Internal.TestExecutionContext.TestCaseTimeout.get -> int
NUnit.Framework.Internal.TestExecutionContext.TestCaseTimeout.set -> void
NUnit.Framework.Internal.TestExecutionContext.TestExecutionContext() -> void
NUnit.Framework.Internal.TestExecutionContext.TestExecutionContext(NUnit.Framework.Internal.TestExecutionContext other) -> void
NUnit.Framework.Internal.TestExecutionContext.TestObject.get -> object
NUnit.Framework.Internal.TestExecutionContext.TestObject.set -> void
NUnit.Framework.Internal.TestExecutionContext.TestWorker.get -> NUnit.Framework.Internal.Execution.TestWorker
NUnit.Framework.Internal.TestExecutionContext.UpdateContextFromEnvironment() -> void
NUnit.Framework.Internal.TestExecutionContext.UpstreamActions.get -> System.Collections.Generic.List<NUnit.Framework.ITestAction>
NUnit.Framework.Internal.TestExecutionStatus
NUnit.Framework.Internal.TestExecutionStatus.AbortRequested = 2 -> NUnit.Framework.Internal.TestExecutionStatus
NUnit.Framework.Internal.TestExecutionStatus.Running = 0 -> NUnit.Framework.Internal.TestExecutionStatus
NUnit.Framework.Internal.TestExecutionStatus.StopRequested = 1 -> NUnit.Framework.Internal.TestExecutionStatus
NUnit.Framework.Internal.TestFilter
NUnit.Framework.Internal.TestFilter.IsEmpty.get -> bool
NUnit.Framework.Internal.TestFilter.MatchParent(NUnit.Framework.Interfaces.ITest test) -> bool
NUnit.Framework.Internal.TestFilter.TestFilter() -> void
NUnit.Framework.Internal.TestFilter.ToXml(bool recursive) -> NUnit.Framework.Interfaces.TNode
NUnit.Framework.Internal.TestFilter.TopLevel.get -> bool
NUnit.Framework.Internal.TestFilter.TopLevel.set -> void
NUnit.Framework.Internal.TestFixture
NUnit.Framework.Internal.TestFixture.TestFixture(NUnit.Framework.Interfaces.ITypeInfo fixtureType, object[] arguments = null) -> void
NUnit.Framework.Internal.TestFixtureParameters
NUnit.Framework.Internal.TestFixtureParameters.TestFixtureParameters() -> void
NUnit.Framework.Internal.TestFixtureParameters.TestFixtureParameters(NUnit.Framework.Interfaces.ITestFixtureData data) -> void
NUnit.Framework.Internal.TestFixtureParameters.TestFixtureParameters(System.Exception exception) -> void
NUnit.Framework.Internal.TestFixtureParameters.TestFixtureParameters(params object[] args) -> void
NUnit.Framework.Internal.TestFixtureParameters.TypeArgs.get -> System.Type[]
NUnit.Framework.Internal.TestListener
NUnit.Framework.Internal.TestListener.SendMessage(NUnit.Framework.Interfaces.TestMessage message) -> void
NUnit.Framework.Internal.TestListener.TestFinished(NUnit.Framework.Interfaces.ITestResult result) -> void
NUnit.Framework.Internal.TestListener.TestOutput(NUnit.Framework.Interfaces.TestOutput output) -> void
NUnit.Framework.Internal.TestListener.TestStarted(NUnit.Framework.Interfaces.ITest test) -> void
NUnit.Framework.Internal.TestMethod
NUnit.Framework.Internal.TestMethod.TestMethod(NUnit.Framework.Interfaces.IMethodInfo method) -> void
NUnit.Framework.Internal.TestMethod.TestMethod(NUnit.Framework.Interfaces.IMethodInfo method, NUnit.Framework.Internal.Test parentSuite) -> void
NUnit.Framework.Internal.TestNameGenerator
NUnit.Framework.Internal.TestNameGenerator.GetDisplayName(NUnit.Framework.Internal.TestMethod testMethod) -> string
NUnit.Framework.Internal.TestNameGenerator.GetDisplayName(NUnit.Framework.Internal.TestMethod testMethod, object[] args) -> string
NUnit.Framework.Internal.TestNameGenerator.TestNameGenerator() -> void
NUnit.Framework.Internal.TestNameGenerator.TestNameGenerator(string pattern) -> void
NUnit.Framework.Internal.TestParameters
NUnit.Framework.Internal.TestParameters.ApplyToTest(NUnit.Framework.Internal.Test test) -> void
NUnit.Framework.Internal.TestParameters.Arguments.get -> object[]
NUnit.Framework.Internal.TestParameters.OriginalArguments.get -> object[]
NUnit.Framework.Internal.TestParameters.Properties.get -> NUnit.Framework.Interfaces.IPropertyBag
NUnit.Framework.Internal.TestParameters.RunState.get -> NUnit.Framework.Interfaces.RunState
NUnit.Framework.Internal.TestParameters.RunState.set -> void
NUnit.Framework.Internal.TestParameters.TestName.get -> string
NUnit.Framework.Internal.TestParameters.TestName.set -> void
NUnit.Framework.Internal.TestParameters.TestParameters() -> void
NUnit.Framework.Internal.TestParameters.TestParameters(NUnit.Framework.Interfaces.ITestData data) -> void
NUnit.Framework.Internal.TestParameters.TestParameters(System.Exception exception) -> void
NUnit.Framework.Internal.TestParameters.TestParameters(object[] args) -> void
NUnit.Framework.Internal.TestProgressReporter
NUnit.Framework.Internal.TestProgressReporter.SendMessage(NUnit.Framework.Interfaces.TestMessage message) -> void
NUnit.Framework.Internal.TestProgressReporter.TestFinished(NUnit.Framework.Interfaces.ITestResult result) -> void
NUnit.Framework.Internal.TestProgressReporter.TestOutput(NUnit.Framework.Interfaces.TestOutput output) -> void
NUnit.Framework.Internal.TestProgressReporter.TestProgressReporter(System.Web.UI.ICallbackEventHandler handler) -> void
NUnit.Framework.Internal.TestProgressReporter.TestStarted(NUnit.Framework.Interfaces.ITest test) -> void
NUnit.Framework.Internal.TestResult
NUnit.Framework.Internal.TestResult.AssertCount.get -> int
NUnit.Framework.Internal.TestResult.AssertionResults.get -> System.Collections.Generic.IList<NUnit.Framework.Interfaces.AssertionResult>
NUnit.Framework.Internal.TestResult.Duration.get -> double
NUnit.Framework.Internal.TestResult.Duration.set -> void
NUnit.Framework.Internal.TestResult.EndTime.get -> System.DateTime
NUnit.Framework.Internal.TestResult.EndTime.set -> void
NUnit.Framework.Internal.TestResult.InternalAssertCount -> int
NUnit.Framework.Internal.TestResult.Message.get -> string
NUnit.Framework.Internal.TestResult.OutWriter.get -> System.IO.TextWriter
NUnit.Framework.Internal.TestResult.Output.get -> string
NUnit.Framework.Internal.TestResult.PendingFailures.get -> int
NUnit.Framework.Internal.TestResult.RecordAssertion(NUnit.Framework.Interfaces.AssertionResult assertion) -> void
NUnit.Framework.Internal.TestResult.RecordAssertion(NUnit.Framework.Interfaces.AssertionStatus status, string message) -> void
NUnit.Framework.Internal.TestResult.RecordAssertion(NUnit.Framework.Interfaces.AssertionStatus status, string message, string stackTrace) -> void
NUnit.Framework.Internal.TestResult.RecordException(System.Exception ex) -> void
NUnit.Framework.Internal.TestResult.RecordException(System.Exception ex, NUnit.Framework.Interfaces.FailureSite site) -> void
NUnit.Framework.Internal.TestResult.RecordTearDownException(System.Exception ex) -> void
NUnit.Framework.Internal.TestResult.RecordTestCompletion() -> void
NUnit.Framework.Internal.TestResult.ResultState.get -> NUnit.Framework.Interfaces.ResultState
NUnit.Framework.Internal.TestResult.RwLock -> System.Threading.ReaderWriterLockSlim
NUnit.Framework.Internal.TestResult.SetResult(NUnit.Framework.Interfaces.ResultState resultState) -> void
NUnit.Framework.Internal.TestResult.SetResult(NUnit.Framework.Interfaces.ResultState resultState, string message) -> void
NUnit.Framework.Internal.TestResult.SetResult(NUnit.Framework.Interfaces.ResultState resultState, string message, string stackTrace) -> void
NUnit.Framework.Internal.TestResult.StartTime.get -> System.DateTime
NUnit.Framework.Internal.TestResult.StartTime.set -> void
NUnit.Framework.Internal.TestResult.Test.get -> NUnit.Framework.Interfaces.ITest
NUnit.Framework.Internal.TestResult.TestAttachments.get -> System.Collections.Generic.ICollection<NUnit.Framework.Interfaces.TestAttachment>
NUnit.Framework.Internal.TestResult.TestResult(NUnit.Framework.Interfaces.ITest test) -> void
NUnit.Framework.Internal.TestResult.ToXml(bool recursive) -> NUnit.Framework.Interfaces.TNode
NUnit.Framework.Internal.TestResult.WorstAssertionStatus.get -> NUnit.Framework.Interfaces.AssertionStatus
NUnit.Framework.Internal.TestSuite
NUnit.Framework.Internal.TestSuite.Add(NUnit.Framework.Internal.Test test) -> void
NUnit.Framework.Internal.TestSuite.CheckSetUpTearDownMethods(System.Reflection.MethodInfo[] methods) -> void
NUnit.Framework.Internal.TestSuite.MaintainTestOrder.get -> bool
NUnit.Framework.Internal.TestSuite.MaintainTestOrder.set -> void
NUnit.Framework.Internal.TestSuite.OneTimeSetUpMethods.get -> System.Reflection.MethodInfo[]
NUnit.Framework.Internal.TestSuite.OneTimeSetUpMethods.set -> void
NUnit.Framework.Internal.TestSuite.OneTimeTearDownMethods.get -> System.Reflection.MethodInfo[]
NUnit.Framework.Internal.TestSuite.OneTimeTearDownMethods.set -> void
NUnit.Framework.Internal.TestSuite.Sort() -> void
NUnit.Framework.Internal.TestSuite.TestSuite(NUnit.Framework.Interfaces.ITypeInfo fixtureType, object[] arguments = null) -> void
NUnit.Framework.Internal.TestSuite.TestSuite(NUnit.Framework.Internal.TestSuite suite, NUnit.Framework.Interfaces.ITestFilter filter) -> void
NUnit.Framework.Internal.TestSuite.TestSuite(System.Type fixtureType) -> void
NUnit.Framework.Internal.TestSuite.TestSuite(string name) -> void
NUnit.Framework.Internal.TestSuite.TestSuite(string parentSuiteName, string name) -> void
NUnit.Framework.Internal.TestSuiteResult
NUnit.Framework.Internal.TestSuiteResult.TestSuiteResult(NUnit.Framework.Internal.TestSuite suite) -> void
NUnit.Framework.Internal.TextMessageWriter
NUnit.Framework.Internal.TextMessageWriter.TextMessageWriter() -> void
NUnit.Framework.Internal.TextMessageWriter.TextMessageWriter(string userMessage, params object[] args) -> void
NUnit.Framework.Internal.ThreadUtility
NUnit.Framework.Internal.TypeHelper
NUnit.Framework.Internal.TypeHelper.TypeHelper() -> void
NUnit.Framework.Internal.TypeNameDifferenceResolver
NUnit.Framework.Internal.TypeNameDifferenceResolver.FullyShortenTypeName(System.Type genericType) -> string
NUnit.Framework.Internal.TypeNameDifferenceResolver.GetGenericTypeName(System.Type type) -> string
NUnit.Framework.Internal.TypeNameDifferenceResolver.GetShortenedGenericTypes(System.Type expected, System.Type actual, out string shortenedGenericNameExpected, out string shortenedGenericNameActual) -> void
NUnit.Framework.Internal.TypeNameDifferenceResolver.IsTypeGeneric(System.Type type) -> bool
NUnit.Framework.Internal.TypeNameDifferenceResolver.ReconstructGenericTypeName(string genericTypeName, System.Collections.Generic.List<string> templateParamNames) -> string
NUnit.Framework.Internal.TypeNameDifferenceResolver.ResolveTypeNameDifference(System.Type expected, System.Type actual, out string expectedTypeShortened, out string actualTypeShortened) -> void
NUnit.Framework.Internal.TypeNameDifferenceResolver.ResolveTypeNameDifference(object expected, object actual, out string expectedTypeShortened, out string actualTypeShortened) -> void
NUnit.Framework.Internal.TypeNameDifferenceResolver.ShortenTypeNames(System.Type expectedType, System.Type actualType, out string expectedTypeShortened, out string actualTypeShortened) -> void
NUnit.Framework.Internal.TypeNameDifferenceResolver.TypeNameDifferenceResolver() -> void
NUnit.Framework.Internal.TypeWrapper
NUnit.Framework.Internal.TypeWrapper.Assembly.get -> System.Reflection.Assembly
NUnit.Framework.Internal.TypeWrapper.BaseType.get -> NUnit.Framework.Interfaces.ITypeInfo
NUnit.Framework.Internal.TypeWrapper.Construct(object[] args) -> object
NUnit.Framework.Internal.TypeWrapper.ContainsGenericParameters.get -> bool
NUnit.Framework.Internal.TypeWrapper.FullName.get -> string
NUnit.Framework.Internal.TypeWrapper.GetConstructor(System.Type[] argTypes) -> System.Reflection.ConstructorInfo
NUnit.Framework.Internal.TypeWrapper.GetCustomAttributes<T>(bool inherit) -> T[]
NUnit.Framework.Internal.TypeWrapper.GetDisplayName() -> string
NUnit.Framework.Internal.TypeWrapper.GetDisplayName(object[] args) -> string
NUnit.Framework.Internal.TypeWrapper.GetGenericTypeDefinition() -> System.Type
NUnit.Framework.Internal.TypeWrapper.GetMethods(System.Reflection.BindingFlags flags) -> NUnit.Framework.Interfaces.IMethodInfo[]
NUnit.Framework.Internal.TypeWrapper.HasConstructor(System.Type[] argTypes) -> bool
NUnit.Framework.Internal.TypeWrapper.HasMethodWithAttribute(System.Type attributeType) -> bool
NUnit.Framework.Internal.TypeWrapper.IsAbstract.get -> bool
NUnit.Framework.Internal.TypeWrapper.IsDefined<T>(bool inherit) -> bool
NUnit.Framework.Internal.TypeWrapper.IsGenericType.get -> bool
NUnit.Framework.Internal.TypeWrapper.IsGenericTypeDefinition.get -> bool
NUnit.Framework.Internal.TypeWrapper.IsSealed.get -> bool
NUnit.Framework.Internal.TypeWrapper.IsStaticClass.get -> bool
NUnit.Framework.Internal.TypeWrapper.IsType(System.Type type) -> bool
NUnit.Framework.Internal.TypeWrapper.MakeGenericType(System.Type[] typeArgs) -> NUnit.Framework.Interfaces.ITypeInfo
NUnit.Framework.Internal.TypeWrapper.Name.get -> string
NUnit.Framework.Internal.TypeWrapper.Namespace.get -> string
NUnit.Framework.Internal.TypeWrapper.Type.get -> System.Type
NUnit.Framework.Internal.TypeWrapper.TypeWrapper(System.Type type) -> void
NUnit.Framework.Is
NUnit.Framework.Is.Is() -> void
NUnit.Framework.Iz
NUnit.Framework.Iz.Iz() -> void
NUnit.Framework.LevelOfParallelismAttribute
NUnit.Framework.LevelOfParallelismAttribute.LevelOfParallelismAttribute(int level) -> void
NUnit.Framework.List
NUnit.Framework.List.List() -> void
NUnit.Framework.ListMapper
NUnit.Framework.ListMapper.ListMapper(System.Collections.ICollection original) -> void
NUnit.Framework.ListMapper.Property(string name) -> System.Collections.ICollection
NUnit.Framework.MaxTimeAttribute
NUnit.Framework.MaxTimeAttribute.MaxTimeAttribute(int milliseconds) -> void
NUnit.Framework.MultipleAssertException
NUnit.Framework.MultipleAssertException.MultipleAssertException(NUnit.Framework.Interfaces.ITestResult testResult) -> void
NUnit.Framework.MultipleAssertException.MultipleAssertException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
NUnit.Framework.MultipleAssertException.MultipleAssertException(string message) -> void
NUnit.Framework.MultipleAssertException.MultipleAssertException(string message, System.Exception inner) -> void
NUnit.Framework.MultipleAssertException.TestResult.get -> NUnit.Framework.Interfaces.ITestResult
NUnit.Framework.NUnitAttribute
NUnit.Framework.NUnitAttribute.NUnitAttribute() -> void
NUnit.Framework.NonParallelizableAttribute
NUnit.Framework.NonParallelizableAttribute.NonParallelizableAttribute() -> void
NUnit.Framework.NonTestAssemblyAttribute
NUnit.Framework.NonTestAssemblyAttribute.NonTestAssemblyAttribute() -> void
NUnit.Framework.OneTimeSetUpAttribute
NUnit.Framework.OneTimeSetUpAttribute.OneTimeSetUpAttribute() -> void
NUnit.Framework.OneTimeTearDownAttribute
NUnit.Framework.OneTimeTearDownAttribute.OneTimeTearDownAttribute() -> void
NUnit.Framework.OrderAttribute
NUnit.Framework.OrderAttribute.ApplyToTest(NUnit.Framework.Internal.Test test) -> void
NUnit.Framework.OrderAttribute.OrderAttribute(int order) -> void
NUnit.Framework.PairwiseAttribute
NUnit.Framework.PairwiseAttribute.PairwiseAttribute() -> void
NUnit.Framework.ParallelScope
NUnit.Framework.ParallelScope.All = NUnit.Framework.ParallelScope.Self | NUnit.Framework.ParallelScope.Children -> NUnit.Framework.ParallelScope
NUnit.Framework.ParallelScope.Children = 256 -> NUnit.Framework.ParallelScope
NUnit.Framework.ParallelScope.ContextMask = NUnit.Framework.ParallelScope.Children | NUnit.Framework.ParallelScope.Fixtures -> NUnit.Framework.ParallelScope
NUnit.Framework.ParallelScope.Default = 0 -> NUnit.Framework.ParallelScope
NUnit.Framework.ParallelScope.Fixtures = 512 -> NUnit.Framework.ParallelScope
NUnit.Framework.ParallelScope.ItemMask = NUnit.Framework.ParallelScope.Self | NUnit.Framework.ParallelScope.None -> NUnit.Framework.ParallelScope
NUnit.Framework.ParallelScope.None = 2 -> NUnit.Framework.ParallelScope
NUnit.Framework.ParallelScope.Self = 1 -> NUnit.Framework.ParallelScope
NUnit.Framework.ParallelizableAttribute
NUnit.Framework.ParallelizableAttribute.ApplyToContext(NUnit.Framework.Internal.TestExecutionContext context) -> void
NUnit.Framework.ParallelizableAttribute.ParallelizableAttribute() -> void
NUnit.Framework.ParallelizableAttribute.ParallelizableAttribute(NUnit.Framework.ParallelScope scope) -> void
NUnit.Framework.ParallelizableAttribute.Scope.get -> NUnit.Framework.ParallelScope
NUnit.Framework.PlatformAttribute
NUnit.Framework.PlatformAttribute.ApplyToTest(NUnit.Framework.Internal.Test test) -> void
NUnit.Framework.PlatformAttribute.PlatformAttribute() -> void
NUnit.Framework.PlatformAttribute.PlatformAttribute(string platforms) -> void
NUnit.Framework.PropertyAttribute
NUnit.Framework.PropertyAttribute.Properties.get -> NUnit.Framework.Interfaces.IPropertyBag
NUnit.Framework.PropertyAttribute.PropertyAttribute() -> void
NUnit.Framework.PropertyAttribute.PropertyAttribute(object propertyValue) -> void
NUnit.Framework.PropertyAttribute.PropertyAttribute(string propertyName, double propertyValue) -> void
NUnit.Framework.PropertyAttribute.PropertyAttribute(string propertyName, int propertyValue) -> void
NUnit.Framework.PropertyAttribute.PropertyAttribute(string propertyName, string propertyValue) -> void
NUnit.Framework.RandomAttribute
NUnit.Framework.RandomAttribute.Distinct.get -> bool
NUnit.Framework.RandomAttribute.Distinct.set -> void
NUnit.Framework.RandomAttribute.GetData(NUnit.Framework.Interfaces.IParameterInfo parameter) -> System.Collections.IEnumerable
NUnit.Framework.RandomAttribute.RandomAttribute(byte min, byte max, int count) -> void
NUnit.Framework.RandomAttribute.RandomAttribute(double min, double max, int count) -> void
NUnit.Framework.RandomAttribute.RandomAttribute(float min, float max, int count) -> void
NUnit.Framework.RandomAttribute.RandomAttribute(int count) -> void
NUnit.Framework.RandomAttribute.RandomAttribute(int min, int max, int count) -> void
NUnit.Framework.RandomAttribute.RandomAttribute(long min, long max, int count) -> void
NUnit.Framework.RandomAttribute.RandomAttribute(sbyte min, sbyte max, int count) -> void
NUnit.Framework.RandomAttribute.RandomAttribute(short min, short max, int count) -> void
NUnit.Framework.RandomAttribute.RandomAttribute(uint min, uint max, int count) -> void
NUnit.Framework.RandomAttribute.RandomAttribute(ulong min, ulong max, int count) -> void
NUnit.Framework.RandomAttribute.RandomAttribute(ushort min, ushort max, int count) -> void
NUnit.Framework.RangeAttribute
NUnit.Framework.RangeAttribute.GetData(NUnit.Framework.Interfaces.IParameterInfo parameter) -> System.Collections.IEnumerable
NUnit.Framework.RangeAttribute.RangeAttribute(double from, double to, double step) -> void
NUnit.Framework.RangeAttribute.RangeAttribute(float from, float to, float step) -> void
NUnit.Framework.RangeAttribute.RangeAttribute(int from, int to) -> void
NUnit.Framework.RangeAttribute.RangeAttribute(int from, int to, int step) -> void
NUnit.Framework.RangeAttribute.RangeAttribute(long from, long to) -> void
NUnit.Framework.RangeAttribute.RangeAttribute(long from, long to, long step) -> void
NUnit.Framework.RangeAttribute.RangeAttribute(uint from, uint to) -> void
NUnit.Framework.RangeAttribute.RangeAttribute(uint from, uint to, uint step) -> void
NUnit.Framework.RangeAttribute.RangeAttribute(ulong from, ulong to) -> void
NUnit.Framework.RangeAttribute.RangeAttribute(ulong from, ulong to, ulong step) -> void
NUnit.Framework.RepeatAttribute
NUnit.Framework.RepeatAttribute.RepeatAttribute(int count) -> void
NUnit.Framework.RepeatAttribute.RepeatedTestCommand
NUnit.Framework.RepeatAttribute.RepeatedTestCommand.RepeatedTestCommand(NUnit.Framework.Internal.Commands.TestCommand innerCommand, int repeatCount) -> void
NUnit.Framework.RepeatAttribute.Wrap(NUnit.Framework.Internal.Commands.TestCommand command) -> NUnit.Framework.Internal.Commands.TestCommand
NUnit.Framework.RequiresThreadAttribute
NUnit.Framework.RequiresThreadAttribute.RequiresThreadAttribute() -> void
NUnit.Framework.RequiresThreadAttribute.RequiresThreadAttribute(System.Threading.ApartmentState apartment) -> void
NUnit.Framework.ResultStateException
NUnit.Framework.ResultStateException.ResultStateException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
NUnit.Framework.ResultStateException.ResultStateException(string message) -> void
NUnit.Framework.ResultStateException.ResultStateException(string message, System.Exception inner) -> void
NUnit.Framework.RetryAttribute
NUnit.Framework.RetryAttribute.RetryAttribute(int tryCount) -> void
NUnit.Framework.RetryAttribute.RetryCommand
NUnit.Framework.RetryAttribute.RetryCommand.RetryCommand(NUnit.Framework.Internal.Commands.TestCommand innerCommand, int tryCount) -> void
NUnit.Framework.RetryAttribute.Wrap(NUnit.Framework.Internal.Commands.TestCommand command) -> NUnit.Framework.Internal.Commands.TestCommand
NUnit.Framework.SequentialAttribute
NUnit.Framework.SequentialAttribute.SequentialAttribute() -> void
NUnit.Framework.SetCultureAttribute
NUnit.Framework.SetCultureAttribute.SetCultureAttribute(string culture) -> void
NUnit.Framework.SetUICultureAttribute
NUnit.Framework.SetUICultureAttribute.SetUICultureAttribute(string culture) -> void
NUnit.Framework.SetUpAttribute
NUnit.Framework.SetUpAttribute.SetUpAttribute() -> void
NUnit.Framework.SetUpFixtureAttribute
NUnit.Framework.SetUpFixtureAttribute.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo typeInfo) -> System.Collections.Generic.IEnumerable<NUnit.Framework.Internal.TestSuite>
NUnit.Framework.SetUpFixtureAttribute.SetUpFixtureAttribute() -> void
NUnit.Framework.SingleThreadedAttribute
NUnit.Framework.SingleThreadedAttribute.ApplyToContext(NUnit.Framework.Internal.TestExecutionContext context) -> void
NUnit.Framework.SingleThreadedAttribute.SingleThreadedAttribute() -> void
NUnit.Framework.StringAssert
NUnit.Framework.StringAssert.StringAssert() -> void
NUnit.Framework.SuccessException
NUnit.Framework.SuccessException.SuccessException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void
NUnit.Framework.SuccessException.SuccessException(string message) -> void
NUnit.Framework.SuccessException.SuccessException(string message, System.Exception inner) -> void
NUnit.Framework.TearDownAttribute
NUnit.Framework.TearDownAttribute.TearDownAttribute() -> void
NUnit.Framework.TestActionAttribute
NUnit.Framework.TestActionAttribute.TestActionAttribute() -> void
NUnit.Framework.TestAssemblyDirectoryResolveAttribute
NUnit.Framework.TestAssemblyDirectoryResolveAttribute.TestAssemblyDirectoryResolveAttribute() -> void
NUnit.Framework.TestAttribute
NUnit.Framework.TestAttribute.ApplyToTest(NUnit.Framework.Internal.Test test) -> void
NUnit.Framework.TestAttribute.Author.get -> string
NUnit.Framework.TestAttribute.Author.set -> void
NUnit.Framework.TestAttribute.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo method, NUnit.Framework.Internal.Test suite) -> NUnit.Framework.Internal.TestMethod
NUnit.Framework.TestAttribute.Description.get -> string
NUnit.Framework.TestAttribute.Description.set -> void
NUnit.Framework.TestAttribute.ExpectedResult.get -> object
NUnit.Framework.TestAttribute.ExpectedResult.set -> void
NUnit.Framework.TestAttribute.TestAttribute() -> void
NUnit.Framework.TestAttribute.TestOf.get -> System.Type
NUnit.Framework.TestAttribute.TestOf.set -> void
NUnit.Framework.TestCaseAttribute
NUnit.Framework.TestCaseAttribute.Arguments.get -> object[]
NUnit.Framework.TestCaseAttribute.Author.get -> string
NUnit.Framework.TestCaseAttribute.Author.set -> void
NUnit.Framework.TestCaseAttribute.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo method, NUnit.Framework.Internal.Test suite) -> System.Collections.Generic.IEnumerable<NUnit.Framework.Internal.TestMethod>
NUnit.Framework.TestCaseAttribute.Category.get -> string
NUnit.Framework.TestCaseAttribute.Category.set -> void
NUnit.Framework.TestCaseAttribute.Description.get -> string
NUnit.Framework.TestCaseAttribute.Description.set -> void
NUnit.Framework.TestCaseAttribute.ExcludePlatform.get -> string
NUnit.Framework.TestCaseAttribute.ExcludePlatform.set -> void
NUnit.Framework.TestCaseAttribute.ExpectedResult.get -> object
NUnit.Framework.TestCaseAttribute.ExpectedResult.set -> void
NUnit.Framework.TestCaseAttribute.Explicit.get -> bool
NUnit.Framework.TestCaseAttribute.Explicit.set -> void
NUnit.Framework.TestCaseAttribute.HasExpectedResult.get -> bool
NUnit.Framework.TestCaseAttribute.Ignore.get -> string
NUnit.Framework.TestCaseAttribute.Ignore.set -> void
NUnit.Framework.TestCaseAttribute.IgnoreReason.get -> string
NUnit.Framework.TestCaseAttribute.IgnoreReason.set -> void
NUnit.Framework.TestCaseAttribute.IncludePlatform.get -> string
NUnit.Framework.TestCaseAttribute.IncludePlatform.set -> void
NUnit.Framework.TestCaseAttribute.Properties.get -> NUnit.Framework.Interfaces.IPropertyBag
NUnit.Framework.TestCaseAttribute.Reason.get -> string
NUnit.Framework.TestCaseAttribute.Reason.set -> void
NUnit.Framework.TestCaseAttribute.RunState.get -> NUnit.Framework.Interfaces.RunState
NUnit.Framework.TestCaseAttribute.TestCaseAttribute(object arg) -> void
NUnit.Framework.TestCaseAttribute.TestCaseAttribute(object arg1, object arg2) -> void
NUnit.Framework.TestCaseAttribute.TestCaseAttribute(object arg1, object arg2, object arg3) -> void
NUnit.Framework.TestCaseAttribute.TestCaseAttribute(params object[] arguments) -> void
NUnit.Framework.TestCaseAttribute.TestName.get -> string
NUnit.Framework.TestCaseAttribute.TestName.set -> void
NUnit.Framework.TestCaseAttribute.TestOf.get -> System.Type
NUnit.Framework.TestCaseAttribute.TestOf.set -> void
NUnit.Framework.TestCaseData
NUnit.Framework.TestCaseData.Explicit() -> NUnit.Framework.TestCaseData
NUnit.Framework.TestCaseData.Explicit(string reason) -> NUnit.Framework.TestCaseData
NUnit.Framework.TestCaseData.Ignore(string reason) -> NUnit.Framework.TestCaseData
NUnit.Framework.TestCaseData.Returns(object result) -> NUnit.Framework.TestCaseData
NUnit.Framework.TestCaseData.SetArgDisplayNames(params string[] displayNames) -> NUnit.Framework.TestCaseData
NUnit.Framework.TestCaseData.SetCategory(string category) -> NUnit.Framework.TestCaseData
NUnit.Framework.TestCaseData.SetDescription(string description) -> NUnit.Framework.TestCaseData
NUnit.Framework.TestCaseData.SetName(string name) -> NUnit.Framework.TestCaseData
NUnit.Framework.TestCaseData.SetProperty(string propName, double propValue) -> NUnit.Framework.TestCaseData
NUnit.Framework.TestCaseData.SetProperty(string propName, int propValue) -> NUnit.Framework.TestCaseData
NUnit.Framework.TestCaseData.SetProperty(string propName, string propValue) -> NUnit.Framework.TestCaseData
NUnit.Framework.TestCaseData.TestCaseData(object arg) -> void
NUnit.Framework.TestCaseData.TestCaseData(object arg1, object arg2) -> void
NUnit.Framework.TestCaseData.TestCaseData(object arg1, object arg2, object arg3) -> void
NUnit.Framework.TestCaseData.TestCaseData(params object[] args) -> void
NUnit.Framework.TestCaseSourceAttribute
NUnit.Framework.TestCaseSourceAttribute.BuildFrom(NUnit.Framework.Interfaces.IMethodInfo method, NUnit.Framework.Internal.Test suite) -> System.Collections.Generic.IEnumerable<NUnit.Framework.Internal.TestMethod>
NUnit.Framework.TestCaseSourceAttribute.Category.get -> string
NUnit.Framework.TestCaseSourceAttribute.Category.set -> void
NUnit.Framework.TestCaseSourceAttribute.MethodParams.get -> object[]
NUnit.Framework.TestCaseSourceAttribute.SourceName.get -> string
NUnit.Framework.TestCaseSourceAttribute.SourceType.get -> System.Type
NUnit.Framework.TestCaseSourceAttribute.TestCaseSourceAttribute(System.Type sourceType) -> void
NUnit.Framework.TestCaseSourceAttribute.TestCaseSourceAttribute(System.Type sourceType, string sourceName) -> void
NUnit.Framework.TestCaseSourceAttribute.TestCaseSourceAttribute(System.Type sourceType, string sourceName, object[] methodParams) -> void
NUnit.Framework.TestCaseSourceAttribute.TestCaseSourceAttribute(string sourceName) -> void
NUnit.Framework.TestCaseSourceAttribute.TestCaseSourceAttribute(string sourceName, object[] methodParams) -> void
NUnit.Framework.TestContext
NUnit.Framework.TestContext.AssertCount.get -> int
NUnit.Framework.TestContext.CurrentRepeatCount.get -> int
NUnit.Framework.TestContext.PropertyBagAdapter
NUnit.Framework.TestContext.PropertyBagAdapter.ContainsKey(string key) -> bool
NUnit.Framework.TestContext.PropertyBagAdapter.Count(string key) -> int
NUnit.Framework.TestContext.PropertyBagAdapter.Get(string key) -> object
NUnit.Framework.TestContext.PropertyBagAdapter.Keys.get -> System.Collections.Generic.ICollection<string>
NUnit.Framework.TestContext.PropertyBagAdapter.PropertyBagAdapter(NUnit.Framework.Interfaces.IPropertyBag source) -> void
NUnit.Framework.TestContext.PropertyBagAdapter.this[string key].get -> System.Collections.Generic.IEnumerable<object>
NUnit.Framework.TestContext.Random.get -> NUnit.Framework.Internal.Randomizer
NUnit.Framework.TestContext.Result.get -> NUnit.Framework.TestContext.ResultAdapter
NUnit.Framework.TestContext.ResultAdapter
NUnit.Framework.TestContext.ResultAdapter.Assertions.get -> System.Collections.Generic.IEnumerable<NUnit.Framework.Interfaces.AssertionResult>
NUnit.Framework.TestContext.ResultAdapter.FailCount.get -> int
NUnit.Framework.TestContext.ResultAdapter.InconclusiveCount.get -> int
NUnit.Framework.TestContext.ResultAdapter.Message.get -> string
NUnit.Framework.TestContext.ResultAdapter.Outcome.get -> NUnit.Framework.Interfaces.ResultState
NUnit.Framework.TestContext.ResultAdapter.PassCount.get -> int
NUnit.Framework.TestContext.ResultAdapter.ResultAdapter(NUnit.Framework.Internal.TestResult result) -> void
NUnit.Framework.TestContext.ResultAdapter.SkipCount.get -> int
NUnit.Framework.TestContext.ResultAdapter.WarningCount.get -> int
NUnit.Framework.TestContext.Test.get -> NUnit.Framework.TestContext.TestAdapter
NUnit.Framework.TestContext.TestAdapter
NUnit.Framework.TestContext.TestAdapter.Arguments.get -> object[]
NUnit.Framework.TestContext.TestAdapter.ClassName.get -> string
NUnit.Framework.TestContext.TestAdapter.FullName.get -> string
NUnit.Framework.TestContext.TestAdapter.ID.get -> string
NUnit.Framework.TestContext.TestAdapter.MethodName.get -> string
NUnit.Framework.TestContext.TestAdapter.Name.get -> string
NUnit.Framework.TestContext.TestAdapter.Properties.get -> NUnit.Framework.TestContext.PropertyBagAdapter
NUnit.Framework.TestContext.TestAdapter.TestAdapter(NUnit.Framework.Internal.Test test) -> void
NUnit.Framework.TestContext.TestContext(NUnit.Framework.Internal.TestExecutionContext testExecutionContext) -> void
NUnit.Framework.TestContext.TestDirectory.get -> string
NUnit.Framework.TestContext.WorkDirectory.get -> string
NUnit.Framework.TestContext.WorkerId.get -> string
NUnit.Framework.TestDelegate
NUnit.Framework.TestFixtureAttribute
NUnit.Framework.TestFixtureAttribute.Arguments.get -> object[]
NUnit.Framework.TestFixtureAttribute.Author.get -> string
NUnit.Framework.TestFixtureAttribute.Author.set -> void
NUnit.Framework.TestFixtureAttribute.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo typeInfo) -> System.Collections.Generic.IEnumerable<NUnit.Framework.Internal.TestSuite>
NUnit.Framework.TestFixtureAttribute.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo typeInfo, NUnit.Framework.Interfaces.IPreFilter filter) -> System.Collections.Generic.IEnumerable<NUnit.Framework.Internal.TestSuite>
NUnit.Framework.TestFixtureAttribute.Category.get -> string
NUnit.Framework.TestFixtureAttribute.Category.set -> void
NUnit.Framework.TestFixtureAttribute.Description.get -> string
NUnit.Framework.TestFixtureAttribute.Description.set -> void
NUnit.Framework.TestFixtureAttribute.Explicit.get -> bool
NUnit.Framework.TestFixtureAttribute.Explicit.set -> void
NUnit.Framework.TestFixtureAttribute.Ignore.get -> string
NUnit.Framework.TestFixtureAttribute.Ignore.set -> void
NUnit.Framework.TestFixtureAttribute.IgnoreReason.get -> string
NUnit.Framework.TestFixtureAttribute.IgnoreReason.set -> void
NUnit.Framework.TestFixtureAttribute.Properties.get -> NUnit.Framework.Interfaces.IPropertyBag
NUnit.Framework.TestFixtureAttribute.Reason.get -> string
NUnit.Framework.TestFixtureAttribute.Reason.set -> void
NUnit.Framework.TestFixtureAttribute.RunState.get -> NUnit.Framework.Interfaces.RunState
NUnit.Framework.TestFixtureAttribute.TestFixtureAttribute() -> void
NUnit.Framework.TestFixtureAttribute.TestFixtureAttribute(params object[] arguments) -> void
NUnit.Framework.TestFixtureAttribute.TestName.get -> string
NUnit.Framework.TestFixtureAttribute.TestName.set -> void
NUnit.Framework.TestFixtureAttribute.TestOf.get -> System.Type
NUnit.Framework.TestFixtureAttribute.TestOf.set -> void
NUnit.Framework.TestFixtureAttribute.TypeArgs.get -> System.Type[]
NUnit.Framework.TestFixtureAttribute.TypeArgs.set -> void
NUnit.Framework.TestFixtureData
NUnit.Framework.TestFixtureData.Explicit() -> NUnit.Framework.TestFixtureData
NUnit.Framework.TestFixtureData.Explicit(string reason) -> NUnit.Framework.TestFixtureData
NUnit.Framework.TestFixtureData.Ignore(string reason) -> NUnit.Framework.TestFixtureData
NUnit.Framework.TestFixtureData.SetArgDisplayNames(params string[] displayNames) -> NUnit.Framework.TestFixtureData
NUnit.Framework.TestFixtureData.TestFixtureData(object arg) -> void
NUnit.Framework.TestFixtureData.TestFixtureData(object arg1, object arg2) -> void
NUnit.Framework.TestFixtureData.TestFixtureData(object arg1, object arg2, object arg3) -> void
NUnit.Framework.TestFixtureData.TestFixtureData(params object[] args) -> void
NUnit.Framework.TestFixtureSourceAttribute
NUnit.Framework.TestFixtureSourceAttribute.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo typeInfo) -> System.Collections.Generic.IEnumerable<NUnit.Framework.Internal.TestSuite>
NUnit.Framework.TestFixtureSourceAttribute.BuildFrom(NUnit.Framework.Interfaces.ITypeInfo typeInfo, NUnit.Framework.Interfaces.IPreFilter filter) -> System.Collections.Generic.IEnumerable<NUnit.Framework.Internal.TestSuite>
NUnit.Framework.TestFixtureSourceAttribute.Category.get -> string
NUnit.Framework.TestFixtureSourceAttribute.Category.set -> void
NUnit.Framework.TestFixtureSourceAttribute.GetParametersFor(System.Type sourceType) -> System.Collections.Generic.IEnumerable<NUnit.Framework.Interfaces.ITestFixtureData>
NUnit.Framework.TestFixtureSourceAttribute.SourceName.get -> string
NUnit.Framework.TestFixtureSourceAttribute.SourceType.get -> System.Type
NUnit.Framework.TestFixtureSourceAttribute.TestFixtureSourceAttribute(System.Type sourceType) -> void
NUnit.Framework.TestFixtureSourceAttribute.TestFixtureSourceAttribute(System.Type sourceType, string sourceName) -> void
NUnit.Framework.TestFixtureSourceAttribute.TestFixtureSourceAttribute(string sourceName) -> void
NUnit.Framework.TestOfAttribute
NUnit.Framework.TestOfAttribute.TestOfAttribute(System.Type type) -> void
NUnit.Framework.TestOfAttribute.TestOfAttribute(string typeName) -> void
NUnit.Framework.TestParameters
NUnit.Framework.TestParameters.Count.get -> int
NUnit.Framework.TestParameters.Exists(string name) -> bool
NUnit.Framework.TestParameters.Get(string name) -> string
NUnit.Framework.TestParameters.Get(string name, string defaultValue) -> string
NUnit.Framework.TestParameters.Get<T>(string name, T defaultValue) -> T
NUnit.Framework.TestParameters.Names.get -> System.Collections.Generic.ICollection<string>
NUnit.Framework.TestParameters.TestParameters() -> void
NUnit.Framework.TestParameters.this[string name].get -> string
NUnit.Framework.TheoryAttribute
NUnit.Framework.TheoryAttribute.TheoryAttribute() -> void
NUnit.Framework.Throws
NUnit.Framework.Throws.Throws() -> void
NUnit.Framework.TimeoutAttribute
NUnit.Framework.TimeoutAttribute.TimeoutAttribute(int timeout) -> void
NUnit.Framework.ValueSourceAttribute
NUnit.Framework.ValueSourceAttribute.GetData(NUnit.Framework.Interfaces.IParameterInfo parameter) -> System.Collections.IEnumerable
NUnit.Framework.ValueSourceAttribute.SourceName.get -> string
NUnit.Framework.ValueSourceAttribute.SourceType.get -> System.Type
NUnit.Framework.ValueSourceAttribute.ValueSourceAttribute(System.Type sourceType, string sourceName) -> void
NUnit.Framework.ValueSourceAttribute.ValueSourceAttribute(string sourceName) -> void
NUnit.Framework.ValuesAttribute
NUnit.Framework.ValuesAttribute.GetData(NUnit.Framework.Interfaces.IParameterInfo parameter) -> System.Collections.IEnumerable
NUnit.Framework.ValuesAttribute.ValuesAttribute() -> void
NUnit.Framework.ValuesAttribute.ValuesAttribute(object arg1) -> void
NUnit.Framework.ValuesAttribute.ValuesAttribute(object arg1, object arg2) -> void
NUnit.Framework.ValuesAttribute.ValuesAttribute(object arg1, object arg2, object arg3) -> void
NUnit.Framework.ValuesAttribute.ValuesAttribute(params object[] args) -> void
NUnit.Framework.ValuesAttribute.data -> object[]
NUnit.Framework.Warn
NUnit.Framework.Warn.Warn() -> void
NUnit.FrameworkPackageSettings
System.Web.UI.ICallbackEventHandler
System.Web.UI.ICallbackEventHandler.GetCallbackResult() -> string
System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(string report) -> void
abstract NUnit.Framework.Constraints.BinaryOperator.ApplyOperator(NUnit.Framework.Constraints.IConstraint left, NUnit.Framework.Constraints.IConstraint right) -> NUnit.Framework.Constraints.IConstraint
abstract NUnit.Framework.Constraints.CollectionConstraint.Matches(System.Collections.IEnumerable collection) -> bool
abstract NUnit.Framework.Constraints.ComparisonAdapter.Compare(object expected, object actual) -> int
abstract NUnit.Framework.Constraints.ComparisonConstraint.PerformComparison(NUnit.Framework.Constraints.ComparisonAdapter comparer, object actual, object expected, NUnit.Framework.Constraints.Tolerance tolerance) -> bool
abstract NUnit.Framework.Constraints.Constraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
abstract NUnit.Framework.Constraints.ConstraintOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack stack) -> void
abstract NUnit.Framework.Constraints.EqualityAdapter.AreEqual(object x, object y) -> bool
abstract NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(NUnit.Framework.Constraints.ConstraintResult result) -> void
abstract NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(object expected, object actual) -> void
abstract NUnit.Framework.Constraints.MessageWriter.DisplayDifferences(object expected, object actual, NUnit.Framework.Constraints.Tolerance tolerance) -> void
abstract NUnit.Framework.Constraints.MessageWriter.DisplayStringDifferences(string expected, string actual, int mismatch, bool ignoreCase, bool clipping) -> void
abstract NUnit.Framework.Constraints.MessageWriter.MaxLineLength.get -> int
abstract NUnit.Framework.Constraints.MessageWriter.MaxLineLength.set -> void
abstract NUnit.Framework.Constraints.MessageWriter.WriteActualValue(object actual) -> void
abstract NUnit.Framework.Constraints.MessageWriter.WriteCollectionElements(System.Collections.IEnumerable collection, long start, int max) -> void
abstract NUnit.Framework.Constraints.MessageWriter.WriteMessageLine(int level, string message, params object[] args) -> void
abstract NUnit.Framework.Constraints.MessageWriter.WriteValue(object val) -> void
abstract NUnit.Framework.Constraints.PrefixOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint constraint) -> NUnit.Framework.Constraints.IConstraint
abstract NUnit.Framework.Constraints.StringConstraint.Matches(string actual) -> bool
abstract NUnit.Framework.Constraints.TypeConstraint.Matches(object actual) -> bool
abstract NUnit.Framework.Internal.Commands.TestCommand.Execute(NUnit.Framework.Internal.TestExecutionContext context) -> NUnit.Framework.Internal.TestResult
abstract NUnit.Framework.Internal.Execution.Event.Send(NUnit.Framework.Interfaces.ITestListener listener) -> void
abstract NUnit.Framework.Internal.Execution.WorkItem.PerformWork() -> void
abstract NUnit.Framework.Internal.Test.AddToXml(NUnit.Framework.Interfaces.TNode parentNode, bool recursive) -> NUnit.Framework.Interfaces.TNode
abstract NUnit.Framework.Internal.Test.Arguments.get -> object[]
abstract NUnit.Framework.Internal.Test.HasChildren.get -> bool
abstract NUnit.Framework.Internal.Test.MakeTestResult() -> NUnit.Framework.Internal.TestResult
abstract NUnit.Framework.Internal.Test.Tests.get -> System.Collections.Generic.IList<NUnit.Framework.Interfaces.ITest>
abstract NUnit.Framework.Internal.Test.XmlElementName.get -> string
abstract NUnit.Framework.Internal.TestFilter.AddToXml(NUnit.Framework.Interfaces.TNode parentNode, bool recursive) -> NUnit.Framework.Interfaces.TNode
abstract NUnit.Framework.Internal.TestFilter.Match(NUnit.Framework.Interfaces.ITest test) -> bool
abstract NUnit.Framework.Internal.TestResult.Children.get -> System.Collections.Generic.IEnumerable<NUnit.Framework.Interfaces.ITestResult>
abstract NUnit.Framework.Internal.TestResult.FailCount.get -> int
abstract NUnit.Framework.Internal.TestResult.HasChildren.get -> bool
abstract NUnit.Framework.Internal.TestResult.InconclusiveCount.get -> int
abstract NUnit.Framework.Internal.TestResult.PassCount.get -> int
abstract NUnit.Framework.Internal.TestResult.SkipCount.get -> int
abstract NUnit.Framework.Internal.TestResult.WarningCount.get -> int
abstract NUnit.Framework.ResultStateException.ResultState.get -> NUnit.Framework.Interfaces.ResultState
const NUnit.Framework.Internal.PlatformHelper.OSPlatforms = "Win,Win32,Win32S,Win32NT,Win32Windows,Win95,Win98,WinMe,NT3,NT4,NT5,NT6,Win2008Server,Win2008ServerR2,Win2012Server,Win2012ServerR2,Win2K,WinXP,Win2003Server,Vista,Win7,Windows7,Win8,Windows8,Win8.1,Windows8.1,Win10,Windows10,WindowsServer10,Unix,Linux,Xbox,MacOSX" -> string
const NUnit.Framework.Internal.PropertyNames.ApartmentState = "ApartmentState" -> string
const NUnit.Framework.Internal.PropertyNames.AppDomain = "_APPDOMAIN" -> string
const NUnit.Framework.Internal.PropertyNames.Author = "Author" -> string
const NUnit.Framework.Internal.PropertyNames.Category = "Category" -> string
const NUnit.Framework.Internal.PropertyNames.Description = "Description" -> string
const NUnit.Framework.Internal.PropertyNames.IgnoreUntilDate = "IgnoreUntilDate" -> string
const NUnit.Framework.Internal.PropertyNames.JoinType = "_JOINTYPE" -> string
const NUnit.Framework.Internal.PropertyNames.LevelOfParallelism = "LevelOfParallelism" -> string
const NUnit.Framework.Internal.PropertyNames.MaxTime = "MaxTime" -> string
const NUnit.Framework.Internal.PropertyNames.Order = "Order" -> string
const NUnit.Framework.Internal.PropertyNames.ParallelScope = "ParallelScope" -> string
const NUnit.Framework.Internal.PropertyNames.ProcessId = "_PID" -> string
const NUnit.Framework.Internal.PropertyNames.ProviderStackTrace = "_PROVIDERSTACKTRACE" -> string
const NUnit.Framework.Internal.PropertyNames.RepeatCount = "Repeat" -> string
const NUnit.Framework.Internal.PropertyNames.RequiresThread = "RequiresThread" -> string
const NUnit.Framework.Internal.PropertyNames.SetCulture = "SetCulture" -> string
const NUnit.Framework.Internal.PropertyNames.SetUICulture = "SetUICulture" -> string
const NUnit.Framework.Internal.PropertyNames.SkipReason = "_SKIPREASON" -> string
const NUnit.Framework.Internal.PropertyNames.TestOf = "TestOf" -> string
const NUnit.Framework.Internal.PropertyNames.Timeout = "Timeout" -> string
const NUnit.Framework.Internal.Randomizer.DefaultStringChars = "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ0123456789_" -> string
const NUnit.Framework.TestFixtureSourceAttribute.MUST_BE_STATIC = "The sourceName specified on a TestCaseSourceAttribute must refer to a static field, property or method." -> string
const NUnit.FrameworkPackageSettings.DebugTests = "DebugTests" -> string
const NUnit.FrameworkPackageSettings.DefaultTestNamePattern = "DefaultTestNamePattern" -> string
const NUnit.FrameworkPackageSettings.DefaultTimeout = "DefaultTimeout" -> string
const NUnit.FrameworkPackageSettings.InternalTraceLevel = "InternalTraceLevel" -> string
const NUnit.FrameworkPackageSettings.InternalTraceWriter = "InternalTraceWriter" -> string
const NUnit.FrameworkPackageSettings.LOAD = "LOAD" -> string
const NUnit.FrameworkPackageSettings.NumberOfTestWorkers = "NumberOfTestWorkers" -> string
const NUnit.FrameworkPackageSettings.PauseBeforeRun = "PauseBeforeRun" -> string
const NUnit.FrameworkPackageSettings.RandomSeed = "RandomSeed" -> string
const NUnit.FrameworkPackageSettings.RunOnMainThread = "RunOnMainThread" -> string
const NUnit.FrameworkPackageSettings.StopOnError = "StopOnError" -> string
const NUnit.FrameworkPackageSettings.SynchronousEvents = "SynchronousEvents" -> string
const NUnit.FrameworkPackageSettings.TestParameters = "TestParameters" -> string
const NUnit.FrameworkPackageSettings.TestParametersDictionary = "TestParametersDictionary" -> string
const NUnit.FrameworkPackageSettings.WorkDirectory = "WorkDirectory" -> string
override NUnit.Compatibility.LongLivedMarshalByRefObject.InitializeLifetimeService() -> object
override NUnit.Framework.AssertionException.ResultState.get -> NUnit.Framework.Interfaces.ResultState
override NUnit.Framework.Constraints.AllItemsConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.AllItemsConstraint.DisplayName.get -> string
override NUnit.Framework.Constraints.AllOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint constraint) -> NUnit.Framework.Constraints.IConstraint
override NUnit.Framework.Constraints.AndConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.AndConstraint.Description.get -> string
override NUnit.Framework.Constraints.AndOperator.ApplyOperator(NUnit.Framework.Constraints.IConstraint left, NUnit.Framework.Constraints.IConstraint right) -> NUnit.Framework.Constraints.IConstraint
override NUnit.Framework.Constraints.AnyOfConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.AnyOfConstraint.Description.get -> string
override NUnit.Framework.Constraints.AssignableFromConstraint.Matches(object actual) -> bool
override NUnit.Framework.Constraints.AssignableToConstraint.Matches(object actual) -> bool
override NUnit.Framework.Constraints.AttributeConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.AttributeConstraint.GetStringRepresentation() -> string
override NUnit.Framework.Constraints.AttributeExistsConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.AttributeExistsConstraint.Description.get -> string
override NUnit.Framework.Constraints.AttributeOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack stack) -> void
override NUnit.Framework.Constraints.BinaryOperator.LeftPrecedence.get -> int
override NUnit.Framework.Constraints.BinaryOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack stack) -> void
override NUnit.Framework.Constraints.BinaryOperator.RightPrecedence.get -> int
override NUnit.Framework.Constraints.BinarySerializableConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.BinarySerializableConstraint.Description.get -> string
override NUnit.Framework.Constraints.BinarySerializableConstraint.GetStringRepresentation() -> string
override NUnit.Framework.Constraints.CollectionConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.CollectionContainsConstraint.Description.get -> string
override NUnit.Framework.Constraints.CollectionContainsConstraint.DisplayName.get -> string
override NUnit.Framework.Constraints.CollectionContainsConstraint.Matches(System.Collections.IEnumerable actual) -> bool
override NUnit.Framework.Constraints.CollectionEquivalentConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.CollectionEquivalentConstraint.Description.get -> string
override NUnit.Framework.Constraints.CollectionEquivalentConstraint.DisplayName.get -> string
override NUnit.Framework.Constraints.CollectionEquivalentConstraint.Matches(System.Collections.IEnumerable actual) -> bool
override NUnit.Framework.Constraints.CollectionEquivalentConstraintResult.WriteAdditionalLinesTo(NUnit.Framework.Constraints.MessageWriter writer) -> void
override NUnit.Framework.Constraints.CollectionOrderedConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.CollectionOrderedConstraint.Description.get -> string
override NUnit.Framework.Constraints.CollectionOrderedConstraint.DisplayName.get -> string
override NUnit.Framework.Constraints.CollectionOrderedConstraint.GetStringRepresentation() -> string
override NUnit.Framework.Constraints.CollectionOrderedConstraint.Matches(System.Collections.IEnumerable actual) -> bool
override NUnit.Framework.Constraints.CollectionSubsetConstraint.Description.get -> string
override NUnit.Framework.Constraints.CollectionSubsetConstraint.DisplayName.get -> string
override NUnit.Framework.Constraints.CollectionSubsetConstraint.Matches(System.Collections.IEnumerable actual) -> bool
override NUnit.Framework.Constraints.CollectionSupersetConstraint.Description.get -> string
override NUnit.Framework.Constraints.CollectionSupersetConstraint.DisplayName.get -> string
override NUnit.Framework.Constraints.CollectionSupersetConstraint.Matches(System.Collections.IEnumerable actual) -> bool
override NUnit.Framework.Constraints.ComparisonConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.Constraint.ToString() -> string
override NUnit.Framework.Constraints.ConstraintExpression.ToString() -> string
override NUnit.Framework.Constraints.ContainsConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.ContainsConstraint.Description.get -> string
override NUnit.Framework.Constraints.DelayedConstraint.ApplyTo<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.DelayedConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.DelayedConstraint.ApplyTo<TActual>(ref TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.DelayedConstraint.Description.get -> string
override NUnit.Framework.Constraints.DelayedConstraint.GetStringRepresentation() -> string
override NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Description.get -> string
override NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.DisplayName.get -> string
override NUnit.Framework.Constraints.DictionaryContainsKeyConstraint.Matches(System.Collections.IEnumerable collection) -> bool
override NUnit.Framework.Constraints.DictionaryContainsValueConstraint.Description.get -> string
override NUnit.Framework.Constraints.DictionaryContainsValueConstraint.DisplayName.get -> string
override NUnit.Framework.Constraints.DictionaryContainsValueConstraint.Matches(System.Collections.IEnumerable actual) -> bool
override NUnit.Framework.Constraints.EmptyCollectionConstraint.Description.get -> string
override NUnit.Framework.Constraints.EmptyCollectionConstraint.Matches(System.Collections.IEnumerable collection) -> bool
override NUnit.Framework.Constraints.EmptyConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.EmptyConstraint.Description.get -> string
override NUnit.Framework.Constraints.EmptyDirectoryConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.EmptyDirectoryConstraint.Description.get -> string
override NUnit.Framework.Constraints.EmptyStringConstraint.Description.get -> string
override NUnit.Framework.Constraints.EmptyStringConstraint.Matches(string actual) -> bool
override NUnit.Framework.Constraints.EndsWithConstraint.Matches(string actual) -> bool
override NUnit.Framework.Constraints.EqualConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.EqualConstraint.Description.get -> string
override NUnit.Framework.Constraints.EqualConstraintResult.WriteMessageTo(NUnit.Framework.Constraints.MessageWriter writer) -> void
override NUnit.Framework.Constraints.ExactCountConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.ExactCountConstraint.Description.get -> string
override NUnit.Framework.Constraints.ExactCountOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack stack) -> void
override NUnit.Framework.Constraints.ExactTypeConstraint.DisplayName.get -> string
override NUnit.Framework.Constraints.ExactTypeConstraint.Matches(object actual) -> bool
override NUnit.Framework.Constraints.ExceptionTypeConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.FalseConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.FileExistsConstraint.Description.get -> string
override NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint.Description.get -> string
override NUnit.Framework.Constraints.GreaterThanConstraint.Description.get -> string
override NUnit.Framework.Constraints.GreaterThanConstraint.PerformComparison(NUnit.Framework.Constraints.ComparisonAdapter comparer, object actual, object expected, NUnit.Framework.Constraints.Tolerance tolerance) -> bool
override NUnit.Framework.Constraints.GreaterThanOrEqualConstraint.Description.get -> string
override NUnit.Framework.Constraints.GreaterThanOrEqualConstraint.PerformComparison(NUnit.Framework.Constraints.ComparisonAdapter comparer, object actual, object expected, NUnit.Framework.Constraints.Tolerance tolerance) -> bool
override NUnit.Framework.Constraints.InstanceOfTypeConstraint.DisplayName.get -> string
override NUnit.Framework.Constraints.InstanceOfTypeConstraint.Matches(object actual) -> bool
override NUnit.Framework.Constraints.Interval.ToString() -> string
override NUnit.Framework.Constraints.LessThanConstraint.Description.get -> string
override NUnit.Framework.Constraints.LessThanConstraint.PerformComparison(NUnit.Framework.Constraints.ComparisonAdapter comparer, object actual, object expected, NUnit.Framework.Constraints.Tolerance tolerance) -> bool
override NUnit.Framework.Constraints.LessThanOrEqualConstraint.Description.get -> string
override NUnit.Framework.Constraints.LessThanOrEqualConstraint.PerformComparison(NUnit.Framework.Constraints.ComparisonAdapter comparer, object actual, object expected, NUnit.Framework.Constraints.Tolerance tolerance) -> bool
override NUnit.Framework.Constraints.NaNConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.NaNConstraint.Description.get -> string
override NUnit.Framework.Constraints.NoItemConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.NoItemConstraint.DisplayName.get -> string
override NUnit.Framework.Constraints.NoneOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint constraint) -> NUnit.Framework.Constraints.IConstraint
override NUnit.Framework.Constraints.NotConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.NotOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint constraint) -> NUnit.Framework.Constraints.IConstraint
override NUnit.Framework.Constraints.NullConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.OrConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.OrConstraint.Description.get -> string
override NUnit.Framework.Constraints.OrOperator.ApplyOperator(NUnit.Framework.Constraints.IConstraint left, NUnit.Framework.Constraints.IConstraint right) -> NUnit.Framework.Constraints.IConstraint
override NUnit.Framework.Constraints.PathConstraint.GetStringRepresentation() -> string
override NUnit.Framework.Constraints.PredicateConstraint<T>.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.PredicateConstraint<T>.Description.get -> string
override NUnit.Framework.Constraints.PrefixConstraint.Description.get -> string
override NUnit.Framework.Constraints.PrefixOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack stack) -> void
override NUnit.Framework.Constraints.PropOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack stack) -> void
override NUnit.Framework.Constraints.PropertyConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.PropertyConstraint.GetStringRepresentation() -> string
override NUnit.Framework.Constraints.PropertyExistsConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.PropertyExistsConstraint.Description.get -> string
override NUnit.Framework.Constraints.PropertyExistsConstraint.GetStringRepresentation() -> string
override NUnit.Framework.Constraints.RangeConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.RangeConstraint.Description.get -> string
override NUnit.Framework.Constraints.RegexConstraint.Matches(string actual) -> bool
override NUnit.Framework.Constraints.ReusableConstraint.ToString() -> string
override NUnit.Framework.Constraints.SameAsConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.SameAsConstraint.Description.get -> string
override NUnit.Framework.Constraints.SamePathConstraint.Description.get -> string
override NUnit.Framework.Constraints.SamePathConstraint.Matches(string actual) -> bool
override NUnit.Framework.Constraints.SamePathOrUnderConstraint.Description.get -> string
override NUnit.Framework.Constraints.SamePathOrUnderConstraint.Matches(string actual) -> bool
override NUnit.Framework.Constraints.SomeItemsConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.SomeItemsConstraint.DisplayName.get -> string
override NUnit.Framework.Constraints.SomeOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint constraint) -> NUnit.Framework.Constraints.IConstraint
override NUnit.Framework.Constraints.StartsWithConstraint.Matches(string actual) -> bool
override NUnit.Framework.Constraints.StringConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.StringConstraint.Description.get -> string
override NUnit.Framework.Constraints.SubPathConstraint.Description.get -> string
override NUnit.Framework.Constraints.SubPathConstraint.Matches(string actual) -> bool
override NUnit.Framework.Constraints.SubstringConstraint.IgnoreCase.get -> NUnit.Framework.Constraints.StringConstraint
override NUnit.Framework.Constraints.SubstringConstraint.Matches(string actual) -> bool
override NUnit.Framework.Constraints.ThrowsConstraint.ApplyTo<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.ThrowsConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.ThrowsConstraint.Description.get -> string
override NUnit.Framework.Constraints.ThrowsExceptionConstraint.ApplyTo<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.ThrowsExceptionConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.ThrowsExceptionConstraint.Description.get -> string
override NUnit.Framework.Constraints.ThrowsNothingConstraint.ApplyTo<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.ThrowsNothingConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.ThrowsNothingConstraint.Description.get -> string
override NUnit.Framework.Constraints.ThrowsOperator.Reduce(NUnit.Framework.Constraints.ConstraintBuilder.ConstraintStack stack) -> void
override NUnit.Framework.Constraints.TrueConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.TypeConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.UniqueItemsConstraint.Description.get -> string
override NUnit.Framework.Constraints.UniqueItemsConstraint.Matches(System.Collections.IEnumerable actual) -> bool
override NUnit.Framework.Constraints.WithOperator.ApplyPrefix(NUnit.Framework.Constraints.IConstraint constraint) -> NUnit.Framework.Constraints.IConstraint
override NUnit.Framework.Constraints.XmlSerializableConstraint.ApplyTo<TActual>(TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
override NUnit.Framework.Constraints.XmlSerializableConstraint.Description.get -> string
override NUnit.Framework.Constraints.XmlSerializableConstraint.GetStringRepresentation() -> string
override NUnit.Framework.IgnoreException.ResultState.get -> NUnit.Framework.Interfaces.ResultState
override NUnit.Framework.InconclusiveException.ResultState.get -> NUnit.Framework.Interfaces.ResultState
override NUnit.Framework.Interfaces.AssertionResult.Equals(object obj) -> bool
override NUnit.Framework.Interfaces.AssertionResult.GetHashCode() -> int
override NUnit.Framework.Interfaces.AssertionResult.ToString() -> string
override NUnit.Framework.Interfaces.ResultState.Equals(object obj) -> bool
override NUnit.Framework.Interfaces.ResultState.GetHashCode() -> int
override NUnit.Framework.Interfaces.ResultState.ToString() -> string
override NUnit.Framework.Interfaces.TestMessage.ToString() -> string
override NUnit.Framework.Interfaces.TestOutput.ToString() -> string
override NUnit.Framework.Internal.Commands.AfterTestCommand.Execute(NUnit.Framework.Internal.TestExecutionContext context) -> NUnit.Framework.Internal.TestResult
override NUnit.Framework.Internal.Commands.BeforeAndAfterTestCommand.Execute(NUnit.Framework.Internal.TestExecutionContext context) -> NUnit.Framework.Internal.TestResult
override NUnit.Framework.Internal.Commands.BeforeTestCommand.Execute(NUnit.Framework.Internal.TestExecutionContext context) -> NUnit.Framework.Internal.TestResult
override NUnit.Framework.Internal.Commands.EmptyTestCommand.Execute(NUnit.Framework.Internal.TestExecutionContext context) -> NUnit.Framework.Internal.TestResult
override NUnit.Framework.Internal.Commands.SkipCommand.Execute(NUnit.Framework.Internal.TestExecutionContext context) -> NUnit.Framework.Internal.TestResult
override NUnit.Framework.Internal.Commands.TestMethodCommand.Execute(NUnit.Framework.Internal.TestExecutionContext context) -> NUnit.Framework.Internal.TestResult
override NUnit.Framework.Internal.Commands.TimeoutCommand.Execute(NUnit.Framework.Internal.TestExecutionContext context) -> NUnit.Framework.Internal.TestResult
override NUnit.Framework.Internal.Execution.CompositeWorkItem.Cancel(bool force) -> void
override NUnit.Framework.Internal.Execution.CompositeWorkItem.IsolateChildTests.get -> bool
override NUnit.Framework.Internal.Execution.CompositeWorkItem.OneTimeTearDownWorkItem.Execute() -> void
override NUnit.Framework.Internal.Execution.CompositeWorkItem.OneTimeTearDownWorkItem.ExecutionStrategy.get -> NUnit.Framework.Internal.Execution.ParallelExecutionStrategy
override NUnit.Framework.Internal.Execution.CompositeWorkItem.OneTimeTearDownWorkItem.Name.get -> string
override NUnit.Framework.Internal.Execution.CompositeWorkItem.OneTimeTearDownWorkItem.PerformWork() -> void
override NUnit.Framework.Internal.Execution.CompositeWorkItem.PerformWork() -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Encoding.get -> System.Text.Encoding
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(bool value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(char value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(char[] buffer) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(char[] buffer, int index, int count) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(decimal value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(double value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(float value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(int value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(long value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(object value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(string format, object arg0) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(string format, object arg0, object arg1) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(string format, object arg0, object arg1, object arg2) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(string format, params object[] arg) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(string value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(uint value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.Write(ulong value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine() -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(bool value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(char value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(char[] buffer) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(char[] buffer, int index, int count) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(decimal value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(double value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(float value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(int value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(long value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(object value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(string format, object arg0) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(string format, object arg0, object arg1) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(string format, object arg0, object arg1, object arg2) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(string format, params object[] arg) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(string value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(uint value) -> void
override NUnit.Framework.Internal.Execution.EventListenerTextWriter.WriteLine(ulong value) -> void
override NUnit.Framework.Internal.Execution.SimpleWorkItem.PerformWork() -> void
override NUnit.Framework.Internal.Execution.TestFinishedEvent.Send(NUnit.Framework.Interfaces.ITestListener listener) -> void
override NUnit.Framework.Internal.Execution.TestMessageEvent.Send(NUnit.Framework.Interfaces.ITestListener listener) -> void
override NUnit.Framework.Internal.Execution.TestOutputEvent.Send(NUnit.Framework.Interfaces.ITestListener listener) -> void
override NUnit.Framework.Internal.Execution.TestStartedEvent.Send(NUnit.Framework.Interfaces.ITestListener listener) -> void
override NUnit.Framework.Internal.Execution.TextCapture.Encoding.get -> System.Text.Encoding
override NUnit.Framework.Internal.Execution.TextCapture.Write(char value) -> void
override NUnit.Framework.Internal.Execution.TextCapture.Write(string value) -> void
override NUnit.Framework.Internal.Execution.TextCapture.WriteLine(string value) -> void
override NUnit.Framework.Internal.InternalTraceWriter.Dispose(bool disposing) -> void
override NUnit.Framework.Internal.InternalTraceWriter.Encoding.get -> System.Text.Encoding
override NUnit.Framework.Internal.InternalTraceWriter.Flush() -> void
override NUnit.Framework.Internal.InternalTraceWriter.Write(char value) -> void
override NUnit.Framework.Internal.InternalTraceWriter.Write(string value) -> void
override NUnit.Framework.Internal.InternalTraceWriter.WriteLine(string value) -> void
override NUnit.Framework.Internal.MethodWrapper.ToString() -> string
override NUnit.Framework.Internal.OSPlatform.ToString() -> string
override NUnit.Framework.Internal.ParameterizedFixtureSuite.Copy(NUnit.Framework.Interfaces.ITestFilter filter) -> NUnit.Framework.Internal.TestSuite
override NUnit.Framework.Internal.ParameterizedFixtureSuite.TestType.get -> string
override NUnit.Framework.Internal.ParameterizedMethodSuite.Copy(NUnit.Framework.Interfaces.ITestFilter filter) -> NUnit.Framework.Internal.TestSuite
override NUnit.Framework.Internal.ParameterizedMethodSuite.TestType.get -> string
override NUnit.Framework.Internal.RuntimeFramework.ToString() -> string
override NUnit.Framework.Internal.SetUpFixture.Copy(NUnit.Framework.Interfaces.ITestFilter filter) -> NUnit.Framework.Internal.TestSuite
override NUnit.Framework.Internal.TestAssembly.Copy(NUnit.Framework.Interfaces.ITestFilter filter) -> NUnit.Framework.Internal.TestSuite
override NUnit.Framework.Internal.TestAssembly.GetCustomAttributes<TAttr>(bool inherit) -> TAttr[]
override NUnit.Framework.Internal.TestAssembly.TestType.get -> string
override NUnit.Framework.Internal.TestCaseResult.Children.get -> System.Collections.Generic.IEnumerable<NUnit.Framework.Interfaces.ITestResult>
override NUnit.Framework.Internal.TestCaseResult.FailCount.get -> int
override NUnit.Framework.Internal.TestCaseResult.HasChildren.get -> bool
override NUnit.Framework.Internal.TestCaseResult.InconclusiveCount.get -> int
override NUnit.Framework.Internal.TestCaseResult.PassCount.get -> int
override NUnit.Framework.Internal.TestCaseResult.SkipCount.get -> int
override NUnit.Framework.Internal.TestCaseResult.WarningCount.get -> int
override NUnit.Framework.Internal.TestExecutionContext.InitializeLifetimeService() -> object
override NUnit.Framework.Internal.TestFixture.Copy(NUnit.Framework.Interfaces.ITestFilter filter) -> NUnit.Framework.Internal.TestSuite
override NUnit.Framework.Internal.TestMethod.AddToXml(NUnit.Framework.Interfaces.TNode parentNode, bool recursive) -> NUnit.Framework.Interfaces.TNode
override NUnit.Framework.Internal.TestMethod.Arguments.get -> object[]
override NUnit.Framework.Internal.TestMethod.HasChildren.get -> bool
override NUnit.Framework.Internal.TestMethod.MakeTestResult() -> NUnit.Framework.Internal.TestResult
override NUnit.Framework.Internal.TestMethod.MethodName.get -> string
override NUnit.Framework.Internal.TestMethod.Tests.get -> System.Collections.Generic.IList<NUnit.Framework.Interfaces.ITest>
override NUnit.Framework.Internal.TestMethod.XmlElementName.get -> string
override NUnit.Framework.Internal.TestSuite.AddToXml(NUnit.Framework.Interfaces.TNode parentNode, bool recursive) -> NUnit.Framework.Interfaces.TNode
override NUnit.Framework.Internal.TestSuite.Arguments.get -> object[]
override NUnit.Framework.Internal.TestSuite.HasChildren.get -> bool
override NUnit.Framework.Internal.TestSuite.MakeTestResult() -> NUnit.Framework.Internal.TestResult
override NUnit.Framework.Internal.TestSuite.TestCaseCount.get -> int
override NUnit.Framework.Internal.TestSuite.Tests.get -> System.Collections.Generic.IList<NUnit.Framework.Interfaces.ITest>
override NUnit.Framework.Internal.TestSuite.XmlElementName.get -> string
override NUnit.Framework.Internal.TestSuiteResult.Children.get -> System.Collections.Generic.IEnumerable<NUnit.Framework.Interfaces.ITestResult>
override NUnit.Framework.Internal.TestSuiteResult.FailCount.get -> int
override NUnit.Framework.Internal.TestSuiteResult.HasChildren.get -> bool
override NUnit.Framework.Internal.TestSuiteResult.InconclusiveCount.get -> int
override NUnit.Framework.Internal.TestSuiteResult.PassCount.get -> int
override NUnit.Framework.Internal.TestSuiteResult.SkipCount.get -> int
override NUnit.Framework.Internal.TestSuiteResult.WarningCount.get -> int
override NUnit.Framework.Internal.TextMessageWriter.DisplayDifferences(NUnit.Framework.Constraints.ConstraintResult result) -> void
override NUnit.Framework.Internal.TextMessageWriter.DisplayDifferences(object expected, object actual) -> void
override NUnit.Framework.Internal.TextMessageWriter.DisplayDifferences(object expected, object actual, NUnit.Framework.Constraints.Tolerance tolerance) -> void
override NUnit.Framework.Internal.TextMessageWriter.DisplayStringDifferences(string expected, string actual, int mismatch, bool ignoreCase, bool clipping) -> void
override NUnit.Framework.Internal.TextMessageWriter.MaxLineLength.get -> int
override NUnit.Framework.Internal.TextMessageWriter.MaxLineLength.set -> void
override NUnit.Framework.Internal.TextMessageWriter.WriteActualValue(object actual) -> void
override NUnit.Framework.Internal.TextMessageWriter.WriteCollectionElements(System.Collections.IEnumerable collection, long start, int max) -> void
override NUnit.Framework.Internal.TextMessageWriter.WriteMessageLine(int level, string message, params object[] args) -> void
override NUnit.Framework.Internal.TextMessageWriter.WriteValue(object val) -> void
override NUnit.Framework.Internal.TypeWrapper.ToString() -> string
override NUnit.Framework.MultipleAssertException.ResultState.get -> NUnit.Framework.Interfaces.ResultState
override NUnit.Framework.ParallelizableAttribute.ApplyToTest(NUnit.Framework.Internal.Test test) -> void
override NUnit.Framework.RangeAttribute.ToString() -> string
override NUnit.Framework.RepeatAttribute.RepeatedTestCommand.Execute(NUnit.Framework.Internal.TestExecutionContext context) -> NUnit.Framework.Internal.TestResult
override NUnit.Framework.RetryAttribute.RetryCommand.Execute(NUnit.Framework.Internal.TestExecutionContext context) -> NUnit.Framework.Internal.TestResult
override NUnit.Framework.SuccessException.ResultState.get -> NUnit.Framework.Interfaces.ResultState
readonly NUnit.Framework.Constraints.ConstraintExpression.builder -> NUnit.Framework.Constraints.ConstraintBuilder
readonly NUnit.Framework.Constraints.Tolerance.Range.LowerBound -> object
readonly NUnit.Framework.Constraints.Tolerance.Range.UpperBound -> object
readonly NUnit.Framework.OrderAttribute.Order -> int
static NUnit.Compatibility.AttributeHelper.GetCustomAttributes(object actual, System.Type attributeType, bool inherit) -> System.Attribute[]
static NUnit.Framework.Api.FrameworkController.InsertEnvironmentElement(NUnit.Framework.Interfaces.TNode targetNode) -> NUnit.Framework.Interfaces.TNode
static NUnit.Framework.Api.FrameworkController.InsertSettingsElement(NUnit.Framework.Interfaces.TNode targetNode, System.Collections.Generic.IDictionary<string, object> settings) -> NUnit.Framework.Interfaces.TNode
static NUnit.Framework.Api.NUnitTestAssemblyRunner.DefaultLevelOfParallelism.get -> int
static NUnit.Framework.Assert.AreEqual(double expected, double actual, double delta) -> void
static NUnit.Framework.Assert.AreEqual(double expected, double actual, double delta, string message, params object[] args) -> void
static NUnit.Framework.Assert.AreEqual(double expected, double? actual, double delta) -> void
static NUnit.Framework.Assert.AreEqual(double expected, double? actual, double delta, string message, params object[] args) -> void
static NUnit.Framework.Assert.AreEqual(object expected, object actual) -> void
static NUnit.Framework.Assert.AreEqual(object expected, object actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.AreNotEqual(object expected, object actual) -> void
static NUnit.Framework.Assert.AreNotEqual(object expected, object actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.AreNotSame(object expected, object actual) -> void
static NUnit.Framework.Assert.AreNotSame(object expected, object actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.AreSame(object expected, object actual) -> void
static NUnit.Framework.Assert.AreSame(object expected, object actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.AssertDoublesAreEqual(double expected, double actual, double delta, string message, object[] args) -> void
static NUnit.Framework.Assert.ByVal(object actual, NUnit.Framework.Constraints.IResolveConstraint expression) -> void
static NUnit.Framework.Assert.ByVal(object actual, NUnit.Framework.Constraints.IResolveConstraint expression, string message, params object[] args) -> void
static NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate code) -> System.Exception
static NUnit.Framework.Assert.Catch(NUnit.Framework.TestDelegate code, string message, params object[] args) -> System.Exception
static NUnit.Framework.Assert.Catch(System.Type expectedExceptionType, NUnit.Framework.TestDelegate code) -> System.Exception
static NUnit.Framework.Assert.Catch(System.Type expectedExceptionType, NUnit.Framework.TestDelegate code, string message, params object[] args) -> System.Exception
static NUnit.Framework.Assert.Catch<TActual>(NUnit.Framework.TestDelegate code) -> TActual
static NUnit.Framework.Assert.Catch<TActual>(NUnit.Framework.TestDelegate code, string message, params object[] args) -> TActual
static NUnit.Framework.Assert.CatchAsync(NUnit.Framework.AsyncTestDelegate code) -> System.Exception
static NUnit.Framework.Assert.CatchAsync(NUnit.Framework.AsyncTestDelegate code, string message, params object[] args) -> System.Exception
static NUnit.Framework.Assert.CatchAsync(System.Type expectedExceptionType, NUnit.Framework.AsyncTestDelegate code) -> System.Exception
static NUnit.Framework.Assert.CatchAsync(System.Type expectedExceptionType, NUnit.Framework.AsyncTestDelegate code, string message, params object[] args) -> System.Exception
static NUnit.Framework.Assert.CatchAsync<TActual>(NUnit.Framework.AsyncTestDelegate code) -> TActual
static NUnit.Framework.Assert.CatchAsync<TActual>(NUnit.Framework.AsyncTestDelegate code, string message, params object[] args) -> TActual
static NUnit.Framework.Assert.Contains(object expected, System.Collections.ICollection actual) -> void
static NUnit.Framework.Assert.Contains(object expected, System.Collections.ICollection actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate code) -> void
static NUnit.Framework.Assert.DoesNotThrow(NUnit.Framework.TestDelegate code, string message, params object[] args) -> void
static NUnit.Framework.Assert.DoesNotThrowAsync(NUnit.Framework.AsyncTestDelegate code) -> void
static NUnit.Framework.Assert.DoesNotThrowAsync(NUnit.Framework.AsyncTestDelegate code, string message, params object[] args) -> void
static NUnit.Framework.Assert.Equals(object a, object b) -> bool
static NUnit.Framework.Assert.Fail() -> void
static NUnit.Framework.Assert.Fail(string message) -> void
static NUnit.Framework.Assert.Fail(string message, params object[] args) -> void
static NUnit.Framework.Assert.False(bool condition) -> void
static NUnit.Framework.Assert.False(bool condition, string message, params object[] args) -> void
static NUnit.Framework.Assert.False(bool? condition) -> void
static NUnit.Framework.Assert.False(bool? condition, string message, params object[] args) -> void
static NUnit.Framework.Assert.Greater(System.IComparable arg1, System.IComparable arg2) -> void
static NUnit.Framework.Assert.Greater(System.IComparable arg1, System.IComparable arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.Greater(decimal arg1, decimal arg2) -> void
static NUnit.Framework.Assert.Greater(decimal arg1, decimal arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.Greater(double arg1, double arg2) -> void
static NUnit.Framework.Assert.Greater(double arg1, double arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.Greater(float arg1, float arg2) -> void
static NUnit.Framework.Assert.Greater(float arg1, float arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.Greater(int arg1, int arg2) -> void
static NUnit.Framework.Assert.Greater(int arg1, int arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.Greater(long arg1, long arg2) -> void
static NUnit.Framework.Assert.Greater(long arg1, long arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.Greater(uint arg1, uint arg2) -> void
static NUnit.Framework.Assert.Greater(uint arg1, uint arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.Greater(ulong arg1, ulong arg2) -> void
static NUnit.Framework.Assert.Greater(ulong arg1, ulong arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.GreaterOrEqual(System.IComparable arg1, System.IComparable arg2) -> void
static NUnit.Framework.Assert.GreaterOrEqual(System.IComparable arg1, System.IComparable arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.GreaterOrEqual(decimal arg1, decimal arg2) -> void
static NUnit.Framework.Assert.GreaterOrEqual(decimal arg1, decimal arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.GreaterOrEqual(double arg1, double arg2) -> void
static NUnit.Framework.Assert.GreaterOrEqual(double arg1, double arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.GreaterOrEqual(float arg1, float arg2) -> void
static NUnit.Framework.Assert.GreaterOrEqual(float arg1, float arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.GreaterOrEqual(int arg1, int arg2) -> void
static NUnit.Framework.Assert.GreaterOrEqual(int arg1, int arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.GreaterOrEqual(long arg1, long arg2) -> void
static NUnit.Framework.Assert.GreaterOrEqual(long arg1, long arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.GreaterOrEqual(uint arg1, uint arg2) -> void
static NUnit.Framework.Assert.GreaterOrEqual(uint arg1, uint arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.GreaterOrEqual(ulong arg1, ulong arg2) -> void
static NUnit.Framework.Assert.GreaterOrEqual(ulong arg1, ulong arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.Ignore() -> void
static NUnit.Framework.Assert.Ignore(string message) -> void
static NUnit.Framework.Assert.Ignore(string message, params object[] args) -> void
static NUnit.Framework.Assert.Inconclusive() -> void
static NUnit.Framework.Assert.Inconclusive(string message) -> void
static NUnit.Framework.Assert.Inconclusive(string message, params object[] args) -> void
static NUnit.Framework.Assert.IsAssignableFrom(System.Type expected, object actual) -> void
static NUnit.Framework.Assert.IsAssignableFrom(System.Type expected, object actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsAssignableFrom<TExpected>(object actual) -> void
static NUnit.Framework.Assert.IsAssignableFrom<TExpected>(object actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsEmpty(System.Collections.IEnumerable collection) -> void
static NUnit.Framework.Assert.IsEmpty(System.Collections.IEnumerable collection, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsEmpty(string aString) -> void
static NUnit.Framework.Assert.IsEmpty(string aString, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsFalse(bool condition) -> void
static NUnit.Framework.Assert.IsFalse(bool condition, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsFalse(bool? condition) -> void
static NUnit.Framework.Assert.IsFalse(bool? condition, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsInstanceOf(System.Type expected, object actual) -> void
static NUnit.Framework.Assert.IsInstanceOf(System.Type expected, object actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsInstanceOf<TExpected>(object actual) -> void
static NUnit.Framework.Assert.IsInstanceOf<TExpected>(object actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsNaN(double aDouble) -> void
static NUnit.Framework.Assert.IsNaN(double aDouble, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsNaN(double? aDouble) -> void
static NUnit.Framework.Assert.IsNaN(double? aDouble, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsNotAssignableFrom(System.Type expected, object actual) -> void
static NUnit.Framework.Assert.IsNotAssignableFrom(System.Type expected, object actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsNotAssignableFrom<TExpected>(object actual) -> void
static NUnit.Framework.Assert.IsNotAssignableFrom<TExpected>(object actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsNotEmpty(System.Collections.IEnumerable collection) -> void
static NUnit.Framework.Assert.IsNotEmpty(System.Collections.IEnumerable collection, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsNotEmpty(string aString) -> void
static NUnit.Framework.Assert.IsNotEmpty(string aString, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsNotInstanceOf(System.Type expected, object actual) -> void
static NUnit.Framework.Assert.IsNotInstanceOf(System.Type expected, object actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsNotInstanceOf<TExpected>(object actual) -> void
static NUnit.Framework.Assert.IsNotInstanceOf<TExpected>(object actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsNotNull(object anObject) -> void
static NUnit.Framework.Assert.IsNotNull(object anObject, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsNull(object anObject) -> void
static NUnit.Framework.Assert.IsNull(object anObject, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsTrue(bool condition) -> void
static NUnit.Framework.Assert.IsTrue(bool condition, string message, params object[] args) -> void
static NUnit.Framework.Assert.IsTrue(bool? condition) -> void
static NUnit.Framework.Assert.IsTrue(bool? condition, string message, params object[] args) -> void
static NUnit.Framework.Assert.Less(System.IComparable arg1, System.IComparable arg2) -> void
static NUnit.Framework.Assert.Less(System.IComparable arg1, System.IComparable arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.Less(decimal arg1, decimal arg2) -> void
static NUnit.Framework.Assert.Less(decimal arg1, decimal arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.Less(double arg1, double arg2) -> void
static NUnit.Framework.Assert.Less(double arg1, double arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.Less(float arg1, float arg2) -> void
static NUnit.Framework.Assert.Less(float arg1, float arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.Less(int arg1, int arg2) -> void
static NUnit.Framework.Assert.Less(int arg1, int arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.Less(long arg1, long arg2) -> void
static NUnit.Framework.Assert.Less(long arg1, long arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.Less(uint arg1, uint arg2) -> void
static NUnit.Framework.Assert.Less(uint arg1, uint arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.Less(ulong arg1, ulong arg2) -> void
static NUnit.Framework.Assert.Less(ulong arg1, ulong arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.LessOrEqual(System.IComparable arg1, System.IComparable arg2) -> void
static NUnit.Framework.Assert.LessOrEqual(System.IComparable arg1, System.IComparable arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.LessOrEqual(decimal arg1, decimal arg2) -> void
static NUnit.Framework.Assert.LessOrEqual(decimal arg1, decimal arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.LessOrEqual(double arg1, double arg2) -> void
static NUnit.Framework.Assert.LessOrEqual(double arg1, double arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.LessOrEqual(float arg1, float arg2) -> void
static NUnit.Framework.Assert.LessOrEqual(float arg1, float arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.LessOrEqual(int arg1, int arg2) -> void
static NUnit.Framework.Assert.LessOrEqual(int arg1, int arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.LessOrEqual(long arg1, long arg2) -> void
static NUnit.Framework.Assert.LessOrEqual(long arg1, long arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.LessOrEqual(uint arg1, uint arg2) -> void
static NUnit.Framework.Assert.LessOrEqual(uint arg1, uint arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.LessOrEqual(ulong arg1, ulong arg2) -> void
static NUnit.Framework.Assert.LessOrEqual(ulong arg1, ulong arg2, string message, params object[] args) -> void
static NUnit.Framework.Assert.Multiple(NUnit.Framework.AsyncTestDelegate testDelegate) -> void
static NUnit.Framework.Assert.Multiple(NUnit.Framework.TestDelegate testDelegate) -> void
static NUnit.Framework.Assert.Negative(decimal actual) -> void
static NUnit.Framework.Assert.Negative(decimal actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Negative(double actual) -> void
static NUnit.Framework.Assert.Negative(double actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Negative(float actual) -> void
static NUnit.Framework.Assert.Negative(float actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Negative(int actual) -> void
static NUnit.Framework.Assert.Negative(int actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Negative(long actual) -> void
static NUnit.Framework.Assert.Negative(long actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Negative(uint actual) -> void
static NUnit.Framework.Assert.Negative(uint actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Negative(ulong actual) -> void
static NUnit.Framework.Assert.Negative(ulong actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.NotNull(object anObject) -> void
static NUnit.Framework.Assert.NotNull(object anObject, string message, params object[] args) -> void
static NUnit.Framework.Assert.NotZero(decimal actual) -> void
static NUnit.Framework.Assert.NotZero(decimal actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.NotZero(double actual) -> void
static NUnit.Framework.Assert.NotZero(double actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.NotZero(float actual) -> void
static NUnit.Framework.Assert.NotZero(float actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.NotZero(int actual) -> void
static NUnit.Framework.Assert.NotZero(int actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.NotZero(long actual) -> void
static NUnit.Framework.Assert.NotZero(long actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.NotZero(uint actual) -> void
static NUnit.Framework.Assert.NotZero(uint actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.NotZero(ulong actual) -> void
static NUnit.Framework.Assert.NotZero(ulong actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Null(object anObject) -> void
static NUnit.Framework.Assert.Null(object anObject, string message, params object[] args) -> void
static NUnit.Framework.Assert.Pass() -> void
static NUnit.Framework.Assert.Pass(string message) -> void
static NUnit.Framework.Assert.Pass(string message, params object[] args) -> void
static NUnit.Framework.Assert.Positive(decimal actual) -> void
static NUnit.Framework.Assert.Positive(decimal actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Positive(double actual) -> void
static NUnit.Framework.Assert.Positive(double actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Positive(float actual) -> void
static NUnit.Framework.Assert.Positive(float actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Positive(int actual) -> void
static NUnit.Framework.Assert.Positive(int actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Positive(long actual) -> void
static NUnit.Framework.Assert.Positive(long actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Positive(uint actual) -> void
static NUnit.Framework.Assert.Positive(uint actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Positive(ulong actual) -> void
static NUnit.Framework.Assert.Positive(ulong actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.ReferenceEquals(object a, object b) -> void
static NUnit.Framework.Assert.That(NUnit.Framework.TestDelegate code, NUnit.Framework.Constraints.IResolveConstraint constraint) -> void
static NUnit.Framework.Assert.That(NUnit.Framework.TestDelegate code, NUnit.Framework.Constraints.IResolveConstraint constraint, System.Func<string> getExceptionMessage) -> void
static NUnit.Framework.Assert.That(NUnit.Framework.TestDelegate code, NUnit.Framework.Constraints.IResolveConstraint constraint, string message, params object[] args) -> void
static NUnit.Framework.Assert.That(System.Func<bool> condition) -> void
static NUnit.Framework.Assert.That(System.Func<bool> condition, System.Func<string> getExceptionMessage) -> void
static NUnit.Framework.Assert.That(System.Func<bool> condition, string message, params object[] args) -> void
static NUnit.Framework.Assert.That(bool condition) -> void
static NUnit.Framework.Assert.That(bool condition, System.Func<string> getExceptionMessage) -> void
static NUnit.Framework.Assert.That(bool condition, string message, params object[] args) -> void
static NUnit.Framework.Assert.That<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del, NUnit.Framework.Constraints.IResolveConstraint expr) -> void
static NUnit.Framework.Assert.That<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del, NUnit.Framework.Constraints.IResolveConstraint expr, System.Func<string> getExceptionMessage) -> void
static NUnit.Framework.Assert.That<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del, NUnit.Framework.Constraints.IResolveConstraint expr, string message, params object[] args) -> void
static NUnit.Framework.Assert.That<TActual>(TActual actual, NUnit.Framework.Constraints.IResolveConstraint expression) -> void
static NUnit.Framework.Assert.That<TActual>(TActual actual, NUnit.Framework.Constraints.IResolveConstraint expression, System.Func<string> getExceptionMessage) -> void
static NUnit.Framework.Assert.That<TActual>(TActual actual, NUnit.Framework.Constraints.IResolveConstraint expression, string message, params object[] args) -> void
static NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint expression, NUnit.Framework.TestDelegate code) -> System.Exception
static NUnit.Framework.Assert.Throws(NUnit.Framework.Constraints.IResolveConstraint expression, NUnit.Framework.TestDelegate code, string message, params object[] args) -> System.Exception
static NUnit.Framework.Assert.Throws(System.Type expectedExceptionType, NUnit.Framework.TestDelegate code) -> System.Exception
static NUnit.Framework.Assert.Throws(System.Type expectedExceptionType, NUnit.Framework.TestDelegate code, string message, params object[] args) -> System.Exception
static NUnit.Framework.Assert.Throws<TActual>(NUnit.Framework.TestDelegate code) -> TActual
static NUnit.Framework.Assert.Throws<TActual>(NUnit.Framework.TestDelegate code, string message, params object[] args) -> TActual
static NUnit.Framework.Assert.ThrowsAsync(NUnit.Framework.Constraints.IResolveConstraint expression, NUnit.Framework.AsyncTestDelegate code) -> System.Exception
static NUnit.Framework.Assert.ThrowsAsync(NUnit.Framework.Constraints.IResolveConstraint expression, NUnit.Framework.AsyncTestDelegate code, string message, params object[] args) -> System.Exception
static NUnit.Framework.Assert.ThrowsAsync(System.Type expectedExceptionType, NUnit.Framework.AsyncTestDelegate code) -> System.Exception
static NUnit.Framework.Assert.ThrowsAsync(System.Type expectedExceptionType, NUnit.Framework.AsyncTestDelegate code, string message, params object[] args) -> System.Exception
static NUnit.Framework.Assert.ThrowsAsync<TActual>(NUnit.Framework.AsyncTestDelegate code) -> TActual
static NUnit.Framework.Assert.ThrowsAsync<TActual>(NUnit.Framework.AsyncTestDelegate code, string message, params object[] args) -> TActual
static NUnit.Framework.Assert.True(bool condition) -> void
static NUnit.Framework.Assert.True(bool condition, string message, params object[] args) -> void
static NUnit.Framework.Assert.True(bool? condition) -> void
static NUnit.Framework.Assert.True(bool? condition, string message, params object[] args) -> void
static NUnit.Framework.Assert.Warn(string message) -> void
static NUnit.Framework.Assert.Warn(string message, params object[] args) -> void
static NUnit.Framework.Assert.Zero(decimal actual) -> void
static NUnit.Framework.Assert.Zero(decimal actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Zero(double actual) -> void
static NUnit.Framework.Assert.Zero(double actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Zero(float actual) -> void
static NUnit.Framework.Assert.Zero(float actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Zero(int actual) -> void
static NUnit.Framework.Assert.Zero(int actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Zero(long actual) -> void
static NUnit.Framework.Assert.Zero(long actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Zero(uint actual) -> void
static NUnit.Framework.Assert.Zero(uint actual, string message, params object[] args) -> void
static NUnit.Framework.Assert.Zero(ulong actual) -> void
static NUnit.Framework.Assert.Zero(ulong actual, string message, params object[] args) -> void
static NUnit.Framework.AssertionHelper.Exactly(int expectedCount) -> NUnit.Framework.Constraints.ItemsConstraintExpression
static NUnit.Framework.AssertionHelper.Expect<TActual>(TActual actual, NUnit.Framework.Constraints.IResolveConstraint expression) -> void
static NUnit.Framework.AssertionHelper.Expect<TActual>(TActual actual, NUnit.Framework.Constraints.IResolveConstraint expression, string message, params object[] args) -> void
static NUnit.Framework.Assume.Equals(object a, object b) -> bool
static NUnit.Framework.Assume.ReferenceEquals(object a, object b) -> void
static NUnit.Framework.Assume.That(NUnit.Framework.TestDelegate code, NUnit.Framework.Constraints.IResolveConstraint constraint) -> void
static NUnit.Framework.Assume.That(System.Func<bool> condition) -> void
static NUnit.Framework.Assume.That(System.Func<bool> condition, System.Func<string> getExceptionMessage) -> void
static NUnit.Framework.Assume.That(System.Func<bool> condition, string message, params object[] args) -> void
static NUnit.Framework.Assume.That(bool condition) -> void
static NUnit.Framework.Assume.That(bool condition, System.Func<string> getExceptionMessage) -> void
static NUnit.Framework.Assume.That(bool condition, string message, params object[] args) -> void
static NUnit.Framework.Assume.That<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del, NUnit.Framework.Constraints.IResolveConstraint expr) -> void
static NUnit.Framework.Assume.That<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del, NUnit.Framework.Constraints.IResolveConstraint expr, System.Func<string> getExceptionMessage) -> void
static NUnit.Framework.Assume.That<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del, NUnit.Framework.Constraints.IResolveConstraint expr, string message, params object[] args) -> void
static NUnit.Framework.Assume.That<TActual>(TActual actual, NUnit.Framework.Constraints.IResolveConstraint expression) -> void
static NUnit.Framework.Assume.That<TActual>(TActual actual, NUnit.Framework.Constraints.IResolveConstraint expression, System.Func<string> getExceptionMessage) -> void
static NUnit.Framework.Assume.That<TActual>(TActual actual, NUnit.Framework.Constraints.IResolveConstraint expression, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.IEnumerable collection, System.Type expectedType) -> void
static NUnit.Framework.CollectionAssert.AllItemsAreInstancesOfType(System.Collections.IEnumerable collection, System.Type expectedType, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.IEnumerable collection) -> void
static NUnit.Framework.CollectionAssert.AllItemsAreNotNull(System.Collections.IEnumerable collection, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.IEnumerable collection) -> void
static NUnit.Framework.CollectionAssert.AllItemsAreUnique(System.Collections.IEnumerable collection, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable expected, System.Collections.IEnumerable actual) -> void
static NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable expected, System.Collections.IEnumerable actual, System.Collections.IComparer comparer) -> void
static NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable expected, System.Collections.IEnumerable actual, System.Collections.IComparer comparer, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.AreEqual(System.Collections.IEnumerable expected, System.Collections.IEnumerable actual, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.IEnumerable expected, System.Collections.IEnumerable actual) -> void
static NUnit.Framework.CollectionAssert.AreEquivalent(System.Collections.IEnumerable expected, System.Collections.IEnumerable actual, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable expected, System.Collections.IEnumerable actual) -> void
static NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable expected, System.Collections.IEnumerable actual, System.Collections.IComparer comparer) -> void
static NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable expected, System.Collections.IEnumerable actual, System.Collections.IComparer comparer, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.AreNotEqual(System.Collections.IEnumerable expected, System.Collections.IEnumerable actual, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.IEnumerable expected, System.Collections.IEnumerable actual) -> void
static NUnit.Framework.CollectionAssert.AreNotEquivalent(System.Collections.IEnumerable expected, System.Collections.IEnumerable actual, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.Contains(System.Collections.IEnumerable collection, object actual) -> void
static NUnit.Framework.CollectionAssert.Contains(System.Collections.IEnumerable collection, object actual, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.IEnumerable collection, object actual) -> void
static NUnit.Framework.CollectionAssert.DoesNotContain(System.Collections.IEnumerable collection, object actual, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.Equals(object a, object b) -> bool
static NUnit.Framework.CollectionAssert.IsEmpty(System.Collections.IEnumerable collection) -> void
static NUnit.Framework.CollectionAssert.IsEmpty(System.Collections.IEnumerable collection, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.IsNotEmpty(System.Collections.IEnumerable collection) -> void
static NUnit.Framework.CollectionAssert.IsNotEmpty(System.Collections.IEnumerable collection, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.IEnumerable subset, System.Collections.IEnumerable superset) -> void
static NUnit.Framework.CollectionAssert.IsNotSubsetOf(System.Collections.IEnumerable subset, System.Collections.IEnumerable superset, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.IsNotSupersetOf(System.Collections.IEnumerable superset, System.Collections.IEnumerable subset) -> void
static NUnit.Framework.CollectionAssert.IsNotSupersetOf(System.Collections.IEnumerable superset, System.Collections.IEnumerable subset, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable collection) -> void
static NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable collection, System.Collections.IComparer comparer) -> void
static NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable collection, System.Collections.IComparer comparer, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.IsOrdered(System.Collections.IEnumerable collection, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.IEnumerable subset, System.Collections.IEnumerable superset) -> void
static NUnit.Framework.CollectionAssert.IsSubsetOf(System.Collections.IEnumerable subset, System.Collections.IEnumerable superset, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.IsSupersetOf(System.Collections.IEnumerable superset, System.Collections.IEnumerable subset) -> void
static NUnit.Framework.CollectionAssert.IsSupersetOf(System.Collections.IEnumerable superset, System.Collections.IEnumerable subset, string message, params object[] args) -> void
static NUnit.Framework.CollectionAssert.ReferenceEquals(object a, object b) -> void
static NUnit.Framework.Constraints.CollectionConstraint.IsEmpty(System.Collections.IEnumerable enumerable) -> bool
static NUnit.Framework.Constraints.ComparisonAdapter.Default.get -> NUnit.Framework.Constraints.ComparisonAdapter
static NUnit.Framework.Constraints.ComparisonAdapter.For(System.Collections.IComparer comparer) -> NUnit.Framework.Constraints.ComparisonAdapter
static NUnit.Framework.Constraints.ComparisonAdapter.For<T>(System.Collections.Generic.IComparer<T> comparer) -> NUnit.Framework.Constraints.ComparisonAdapter
static NUnit.Framework.Constraints.ComparisonAdapter.For<T>(System.Comparison<T> comparer) -> NUnit.Framework.Constraints.ComparisonAdapter
static NUnit.Framework.Constraints.Constraint.operator !(NUnit.Framework.Constraints.Constraint constraint) -> NUnit.Framework.Constraints.Constraint
static NUnit.Framework.Constraints.Constraint.operator &(NUnit.Framework.Constraints.Constraint left, NUnit.Framework.Constraints.Constraint right) -> NUnit.Framework.Constraints.Constraint
static NUnit.Framework.Constraints.Constraint.operator |(NUnit.Framework.Constraints.Constraint left, NUnit.Framework.Constraints.Constraint right) -> NUnit.Framework.Constraints.Constraint
static NUnit.Framework.Constraints.EqualityAdapter.For(System.Collections.IComparer comparer) -> NUnit.Framework.Constraints.EqualityAdapter
static NUnit.Framework.Constraints.EqualityAdapter.For(System.Collections.IEqualityComparer comparer) -> NUnit.Framework.Constraints.EqualityAdapter
static NUnit.Framework.Constraints.EqualityAdapter.For<T>(System.Collections.Generic.IComparer<T> comparer) -> NUnit.Framework.Constraints.EqualityAdapter
static NUnit.Framework.Constraints.EqualityAdapter.For<T>(System.Collections.Generic.IEqualityComparer<T> comparer) -> NUnit.Framework.Constraints.EqualityAdapter
static NUnit.Framework.Constraints.EqualityAdapter.For<T>(System.Comparison<T> comparer) -> NUnit.Framework.Constraints.EqualityAdapter
static NUnit.Framework.Constraints.EqualityAdapter.For<TExpected, TActual>(System.Func<TExpected, TActual, bool> comparison) -> NUnit.Framework.Constraints.EqualityAdapter
static NUnit.Framework.Constraints.NUnitComparer.Default.get -> NUnit.Framework.Constraints.NUnitComparer
static NUnit.Framework.Constraints.NUnitEqualityComparer.Default.get -> NUnit.Framework.Constraints.NUnitEqualityComparer
static NUnit.Framework.Constraints.Numerics.AreEqual(object expected, object actual, ref NUnit.Framework.Constraints.Tolerance tolerance) -> bool
static NUnit.Framework.Constraints.Numerics.Compare(object expected, object actual) -> int
static NUnit.Framework.Constraints.Numerics.IsFixedPointNumeric(object obj) -> bool
static NUnit.Framework.Constraints.Numerics.IsFloatingPointNumeric(object obj) -> bool
static NUnit.Framework.Constraints.Numerics.IsNumericType(object obj) -> bool
static NUnit.Framework.Constraints.ReusableConstraint.implicit operator NUnit.Framework.Constraints.ReusableConstraint(NUnit.Framework.Constraints.Constraint c) -> NUnit.Framework.Constraints.ReusableConstraint
static NUnit.Framework.Constraints.Tolerance.Default.get -> NUnit.Framework.Constraints.Tolerance
static NUnit.Framework.Constraints.Tolerance.Exact.get -> NUnit.Framework.Constraints.Tolerance
static NUnit.Framework.Contains.Item(object expected) -> NUnit.Framework.Constraints.SomeItemsConstraint
static NUnit.Framework.Contains.Key(object expected) -> NUnit.Framework.Constraints.DictionaryContainsKeyConstraint
static NUnit.Framework.Contains.Substring(string expected) -> NUnit.Framework.Constraints.SubstringConstraint
static NUnit.Framework.Contains.Value(object expected) -> NUnit.Framework.Constraints.DictionaryContainsValueConstraint
static NUnit.Framework.DirectoryAssert.AreEqual(System.IO.DirectoryInfo expected, System.IO.DirectoryInfo actual) -> void
static NUnit.Framework.DirectoryAssert.AreEqual(System.IO.DirectoryInfo expected, System.IO.DirectoryInfo actual, string message, params object[] args) -> void
static NUnit.Framework.DirectoryAssert.AreNotEqual(System.IO.DirectoryInfo expected, System.IO.DirectoryInfo actual) -> void
static NUnit.Framework.DirectoryAssert.AreNotEqual(System.IO.DirectoryInfo expected, System.IO.DirectoryInfo actual, string message, params object[] args) -> void
static NUnit.Framework.DirectoryAssert.DoesNotExist(System.IO.DirectoryInfo actual) -> void
static NUnit.Framework.DirectoryAssert.DoesNotExist(System.IO.DirectoryInfo actual, string message, params object[] args) -> void
static NUnit.Framework.DirectoryAssert.DoesNotExist(string actual) -> void
static NUnit.Framework.DirectoryAssert.DoesNotExist(string actual, string message, params object[] args) -> void
static NUnit.Framework.DirectoryAssert.Equals(object a, object b) -> bool
static NUnit.Framework.DirectoryAssert.Exists(System.IO.DirectoryInfo actual) -> void
static NUnit.Framework.DirectoryAssert.Exists(System.IO.DirectoryInfo actual, string message, params object[] args) -> void
static NUnit.Framework.DirectoryAssert.Exists(string actual) -> void
static NUnit.Framework.DirectoryAssert.Exists(string actual, string message, params object[] args) -> void
static NUnit.Framework.DirectoryAssert.ReferenceEquals(object a, object b) -> void
static NUnit.Framework.Does.Contain(object expected) -> NUnit.Framework.Constraints.SomeItemsConstraint
static NUnit.Framework.Does.Contain(string expected) -> NUnit.Framework.Constraints.ContainsConstraint
static NUnit.Framework.Does.ContainKey(object expected) -> NUnit.Framework.Constraints.DictionaryContainsKeyConstraint
static NUnit.Framework.Does.ContainValue(object expected) -> NUnit.Framework.Constraints.DictionaryContainsValueConstraint
static NUnit.Framework.Does.EndWith(string expected) -> NUnit.Framework.Constraints.EndsWithConstraint
static NUnit.Framework.Does.Exist.get -> NUnit.Framework.Constraints.FileOrDirectoryExistsConstraint
static NUnit.Framework.Does.Match(string pattern) -> NUnit.Framework.Constraints.RegexConstraint
static NUnit.Framework.Does.Not.get -> NUnit.Framework.Constraints.ConstraintExpression
static NUnit.Framework.Does.StartWith(string expected) -> NUnit.Framework.Constraints.StartsWithConstraint
static NUnit.Framework.FileAssert.AreEqual(System.IO.FileInfo expected, System.IO.FileInfo actual) -> void
static NUnit.Framework.FileAssert.AreEqual(System.IO.FileInfo expected, System.IO.FileInfo actual, string message, params object[] args) -> void
static NUnit.Framework.FileAssert.AreEqual(System.IO.Stream expected, System.IO.Stream actual) -> void
static NUnit.Framework.FileAssert.AreEqual(System.IO.Stream expected, System.IO.Stream actual, string message, params object[] args) -> void
static NUnit.Framework.FileAssert.AreEqual(string expected, string actual) -> void
static NUnit.Framework.FileAssert.AreEqual(string expected, string actual, string message, params object[] args) -> void
static NUnit.Framework.FileAssert.AreNotEqual(System.IO.FileInfo expected, System.IO.FileInfo actual) -> void
static NUnit.Framework.FileAssert.AreNotEqual(System.IO.FileInfo expected, System.IO.FileInfo actual, string message, params object[] args) -> void
static NUnit.Framework.FileAssert.AreNotEqual(System.IO.Stream expected, System.IO.Stream actual) -> void
static NUnit.Framework.FileAssert.AreNotEqual(System.IO.Stream expected, System.IO.Stream actual, string message, params object[] args) -> void
static NUnit.Framework.FileAssert.AreNotEqual(string expected, string actual) -> void
static NUnit.Framework.FileAssert.AreNotEqual(string expected, string actual, string message, params object[] args) -> void
static NUnit.Framework.FileAssert.DoesNotExist(System.IO.FileInfo actual) -> void
static NUnit.Framework.FileAssert.DoesNotExist(System.IO.FileInfo actual, string message, params object[] args) -> void
static NUnit.Framework.FileAssert.DoesNotExist(string actual) -> void
static NUnit.Framework.FileAssert.DoesNotExist(string actual, string message, params object[] args) -> void
static NUnit.Framework.FileAssert.Equals(object a, object b) -> bool
static NUnit.Framework.FileAssert.Exists(System.IO.FileInfo actual) -> void
static NUnit.Framework.FileAssert.Exists(System.IO.FileInfo actual, string message, params object[] args) -> void
static NUnit.Framework.FileAssert.Exists(string actual) -> void
static NUnit.Framework.FileAssert.Exists(string actual, string message, params object[] args) -> void
static NUnit.Framework.FileAssert.ReferenceEquals(object a, object b) -> void
static NUnit.Framework.Has.All.get -> NUnit.Framework.Constraints.ConstraintExpression
static NUnit.Framework.Has.Attribute(System.Type expectedType) -> NUnit.Framework.Constraints.ResolvableConstraintExpression
static NUnit.Framework.Has.Attribute<T>() -> NUnit.Framework.Constraints.ResolvableConstraintExpression
static NUnit.Framework.Has.Count.get -> NUnit.Framework.Constraints.ResolvableConstraintExpression
static NUnit.Framework.Has.Exactly(int expectedCount) -> NUnit.Framework.Constraints.ItemsConstraintExpression
static NUnit.Framework.Has.InnerException.get -> NUnit.Framework.Constraints.ResolvableConstraintExpression
static NUnit.Framework.Has.Length.get -> NUnit.Framework.Constraints.ResolvableConstraintExpression
static NUnit.Framework.Has.Member(object expected) -> NUnit.Framework.Constraints.SomeItemsConstraint
static NUnit.Framework.Has.Message.get -> NUnit.Framework.Constraints.ResolvableConstraintExpression
static NUnit.Framework.Has.No.get -> NUnit.Framework.Constraints.ConstraintExpression
static NUnit.Framework.Has.None.get -> NUnit.Framework.Constraints.ConstraintExpression
static NUnit.Framework.Has.One.get -> NUnit.Framework.Constraints.ItemsConstraintExpression
static NUnit.Framework.Has.Property(string name) -> NUnit.Framework.Constraints.ResolvableConstraintExpression
static NUnit.Framework.Has.Some.get -> NUnit.Framework.Constraints.ConstraintExpression
static NUnit.Framework.Interfaces.ResultState.operator !=(NUnit.Framework.Interfaces.ResultState left, NUnit.Framework.Interfaces.ResultState right) -> bool
static NUnit.Framework.Interfaces.ResultState.operator ==(NUnit.Framework.Interfaces.ResultState left, NUnit.Framework.Interfaces.ResultState right) -> bool
static NUnit.Framework.Interfaces.TNode.FromXml(string xmlText) -> NUnit.Framework.Interfaces.TNode
static NUnit.Framework.Internal.AssemblyHelper.GetAssemblyName(System.Reflection.Assembly assembly) -> System.Reflection.AssemblyName
static NUnit.Framework.Internal.AssemblyHelper.GetAssemblyPath(System.Reflection.Assembly assembly) -> string
static NUnit.Framework.Internal.AssemblyHelper.GetAssemblyPathFromCodeBase(string codeBase) -> string
static NUnit.Framework.Internal.AssemblyHelper.GetDirectoryName(System.Reflection.Assembly assembly) -> string
static NUnit.Framework.Internal.AssemblyHelper.Load(string name) -> System.Reflection.Assembly
static NUnit.Framework.Internal.ExceptionHelper.BuildMessage(System.Exception exception, bool excludeExceptionNames = false) -> string
static NUnit.Framework.Internal.ExceptionHelper.BuildStackTrace(System.Exception exception) -> string
static NUnit.Framework.Internal.ExceptionHelper.Rethrow(System.Exception exception) -> void
static NUnit.Framework.Internal.Execution.WorkItemBuilder.CreateWorkItem(NUnit.Framework.Interfaces.ITest test, NUnit.Framework.Interfaces.ITestFilter filter, bool recursive = false) -> NUnit.Framework.Internal.Execution.WorkItem
static NUnit.Framework.Internal.InternalTrace.GetLogger(System.Type type) -> NUnit.Framework.Internal.Logger
static NUnit.Framework.Internal.InternalTrace.GetLogger(string name) -> NUnit.Framework.Internal.Logger
static NUnit.Framework.Internal.InternalTrace.Initialize(System.IO.TextWriter writer, NUnit.Framework.Internal.InternalTraceLevel level) -> void
static NUnit.Framework.Internal.InternalTrace.Initialize(string logName, NUnit.Framework.Internal.InternalTraceLevel level) -> void
static NUnit.Framework.Internal.InternalTrace.Initialized.get -> bool
static NUnit.Framework.Internal.OSPlatform.CurrentPlatform.get -> NUnit.Framework.Internal.OSPlatform
static NUnit.Framework.Internal.Randomizer.CreateRandomizer() -> NUnit.Framework.Internal.Randomizer
static NUnit.Framework.Internal.Randomizer.GetRandomizer(System.Reflection.MemberInfo member) -> NUnit.Framework.Internal.Randomizer
static NUnit.Framework.Internal.Randomizer.GetRandomizer(System.Reflection.ParameterInfo parameter) -> NUnit.Framework.Internal.Randomizer
static NUnit.Framework.Internal.Randomizer.InitialSeed.get -> int
static NUnit.Framework.Internal.Randomizer.InitialSeed.set -> void
static NUnit.Framework.Internal.Reflect.Construct(System.Type type) -> object
static NUnit.Framework.Internal.Reflect.Construct(System.Type type, object[] arguments) -> object
static NUnit.Framework.Internal.Reflect.GetMethodsWithAttribute(System.Type fixtureType, System.Type attributeType, bool inherit) -> System.Reflection.MethodInfo[]
static NUnit.Framework.Internal.Reflect.GetUltimateShadowingProperty(System.Type type, string name, System.Reflection.BindingFlags bindingFlags) -> System.Reflection.PropertyInfo
static NUnit.Framework.Internal.Reflect.HasMethodWithAttribute(System.Type fixtureType, System.Type attributeType) -> bool
static NUnit.Framework.Internal.Reflect.InvokeMethod(System.Reflection.MethodInfo method, object fixture) -> object
static NUnit.Framework.Internal.Reflect.InvokeMethod(System.Reflection.MethodInfo method, object fixture, params object[] args) -> object
static NUnit.Framework.Internal.RuntimeFramework.CurrentFramework.get -> NUnit.Framework.Internal.RuntimeFramework
static NUnit.Framework.Internal.RuntimeFramework.Parse(string s) -> NUnit.Framework.Internal.RuntimeFramework
static NUnit.Framework.Internal.StackFilter.DefaultFilter -> NUnit.Framework.Internal.StackFilter
static NUnit.Framework.Internal.StringUtil.Compare(string strA, string strB, bool ignoreCase) -> int
static NUnit.Framework.Internal.StringUtil.StringsEqual(string strA, string strB, bool ignoreCase) -> bool
static NUnit.Framework.Internal.Test.IdPrefix.get -> string
static NUnit.Framework.Internal.Test.IdPrefix.set -> void
static NUnit.Framework.Internal.TestExecutionContext.CurrentContext.get -> NUnit.Framework.Internal.TestExecutionContext
static NUnit.Framework.Internal.TestFilter.FromXml(NUnit.Framework.Interfaces.TNode node) -> NUnit.Framework.Internal.TestFilter
static NUnit.Framework.Internal.TestFilter.FromXml(string xmlText) -> NUnit.Framework.Internal.TestFilter
static NUnit.Framework.Internal.TestListener.NULL.get -> NUnit.Framework.Interfaces.ITestListener
static NUnit.Framework.Internal.TestNameGenerator.DefaultTestNamePattern -> string
static NUnit.Framework.Internal.TypeHelper.CanDeduceTypeArgsFromArgs(System.Type type, object[] arglist, ref System.Type[] typeArgsOut) -> bool
static NUnit.Framework.Internal.TypeHelper.ConvertArgumentList(object[] arglist, NUnit.Framework.Interfaces.IParameterInfo[] parameters) -> void
static NUnit.Framework.Internal.TypeHelper.GetDeclaredInterfaces(System.Type type) -> System.Type[]
static NUnit.Framework.Internal.TypeHelper.GetDisplayName(System.Type type) -> string
static NUnit.Framework.Internal.TypeHelper.GetDisplayName(System.Type type, object[] arglist) -> string
static NUnit.Framework.Internal.TypeHelper.IsNumeric(System.Type type) -> bool
static NUnit.Framework.Internal.TypeHelper.IsTuple(System.Type type) -> bool
static NUnit.Framework.Internal.TypeHelper.IsValueTuple(System.Type type) -> bool
static NUnit.Framework.Internal.TypeHelper.TryGetBestCommonType(System.Type type1, System.Type type2, out System.Type bestCommonType) -> bool
static NUnit.Framework.Is.All.get -> NUnit.Framework.Constraints.ConstraintExpression
static NUnit.Framework.Is.AnyOf(params object[] expected) -> NUnit.Framework.Constraints.AnyOfConstraint
static NUnit.Framework.Is.AssignableFrom(System.Type expectedType) -> NUnit.Framework.Constraints.AssignableFromConstraint
static NUnit.Framework.Is.AssignableFrom<TExpected>() -> NUnit.Framework.Constraints.AssignableFromConstraint
static NUnit.Framework.Is.AssignableTo(System.Type expectedType) -> NUnit.Framework.Constraints.AssignableToConstraint
static NUnit.Framework.Is.AssignableTo<TExpected>() -> NUnit.Framework.Constraints.AssignableToConstraint
static NUnit.Framework.Is.AtLeast(object expected) -> NUnit.Framework.Constraints.GreaterThanOrEqualConstraint
static NUnit.Framework.Is.AtMost(object expected) -> NUnit.Framework.Constraints.LessThanOrEqualConstraint
static NUnit.Framework.Is.BinarySerializable.get -> NUnit.Framework.Constraints.BinarySerializableConstraint
static NUnit.Framework.Is.Empty.get -> NUnit.Framework.Constraints.EmptyConstraint
static NUnit.Framework.Is.EqualTo(object expected) -> NUnit.Framework.Constraints.EqualConstraint
static NUnit.Framework.Is.EquivalentTo(System.Collections.IEnumerable expected) -> NUnit.Framework.Constraints.CollectionEquivalentConstraint
static NUnit.Framework.Is.False.get -> NUnit.Framework.Constraints.FalseConstraint
static NUnit.Framework.Is.GreaterThan(object expected) -> NUnit.Framework.Constraints.GreaterThanConstraint
static NUnit.Framework.Is.GreaterThanOrEqualTo(object expected) -> NUnit.Framework.Constraints.GreaterThanOrEqualConstraint
static NUnit.Framework.Is.InRange(object from, object to) -> NUnit.Framework.Constraints.RangeConstraint
static NUnit.Framework.Is.InstanceOf(System.Type expectedType) -> NUnit.Framework.Constraints.InstanceOfTypeConstraint
static NUnit.Framework.Is.InstanceOf<TExpected>() -> NUnit.Framework.Constraints.InstanceOfTypeConstraint
static NUnit.Framework.Is.LessThan(object expected) -> NUnit.Framework.Constraints.LessThanConstraint
static NUnit.Framework.Is.LessThanOrEqualTo(object expected) -> NUnit.Framework.Constraints.LessThanOrEqualConstraint
static NUnit.Framework.Is.NaN.get -> NUnit.Framework.Constraints.NaNConstraint
static NUnit.Framework.Is.Negative.get -> NUnit.Framework.Constraints.LessThanConstraint
static NUnit.Framework.Is.Not.get -> NUnit.Framework.Constraints.ConstraintExpression
static NUnit.Framework.Is.Null.get -> NUnit.Framework.Constraints.NullConstraint
static NUnit.Framework.Is.Ordered.get -> NUnit.Framework.Constraints.CollectionOrderedConstraint
static NUnit.Framework.Is.Positive.get -> NUnit.Framework.Constraints.GreaterThanConstraint
static NUnit.Framework.Is.SameAs(object expected) -> NUnit.Framework.Constraints.SameAsConstraint
static NUnit.Framework.Is.SamePath(string expected) -> NUnit.Framework.Constraints.SamePathConstraint
static NUnit.Framework.Is.SamePathOrUnder(string expected) -> NUnit.Framework.Constraints.SamePathOrUnderConstraint
static NUnit.Framework.Is.SubPathOf(string expected) -> NUnit.Framework.Constraints.SubPathConstraint
static NUnit.Framework.Is.SubsetOf(System.Collections.IEnumerable expected) -> NUnit.Framework.Constraints.CollectionSubsetConstraint
static NUnit.Framework.Is.SupersetOf(System.Collections.IEnumerable expected) -> NUnit.Framework.Constraints.CollectionSupersetConstraint
static NUnit.Framework.Is.True.get -> NUnit.Framework.Constraints.TrueConstraint
static NUnit.Framework.Is.TypeOf(System.Type expectedType) -> NUnit.Framework.Constraints.ExactTypeConstraint
static NUnit.Framework.Is.TypeOf<TExpected>() -> NUnit.Framework.Constraints.ExactTypeConstraint
static NUnit.Framework.Is.Unique.get -> NUnit.Framework.Constraints.UniqueItemsConstraint
static NUnit.Framework.Is.XmlSerializable.get -> NUnit.Framework.Constraints.XmlSerializableConstraint
static NUnit.Framework.Is.Zero.get -> NUnit.Framework.Constraints.EqualConstraint
static NUnit.Framework.List.Map(System.Collections.ICollection actual) -> NUnit.Framework.ListMapper
static NUnit.Framework.StringAssert.AreEqualIgnoringCase(string expected, string actual) -> void
static NUnit.Framework.StringAssert.AreEqualIgnoringCase(string expected, string actual, string message, params object[] args) -> void
static NUnit.Framework.StringAssert.AreNotEqualIgnoringCase(string expected, string actual) -> void
static NUnit.Framework.StringAssert.AreNotEqualIgnoringCase(string expected, string actual, string message, params object[] args) -> void
static NUnit.Framework.StringAssert.Contains(string expected, string actual) -> void
static NUnit.Framework.StringAssert.Contains(string expected, string actual, string message, params object[] args) -> void
static NUnit.Framework.StringAssert.DoesNotContain(string expected, string actual) -> void
static NUnit.Framework.StringAssert.DoesNotContain(string expected, string actual, string message, params object[] args) -> void
static NUnit.Framework.StringAssert.DoesNotEndWith(string expected, string actual) -> void
static NUnit.Framework.StringAssert.DoesNotEndWith(string expected, string actual, string message, params object[] args) -> void
static NUnit.Framework.StringAssert.DoesNotMatch(string pattern, string actual) -> void
static NUnit.Framework.StringAssert.DoesNotMatch(string pattern, string actual, string message, params object[] args) -> void
static NUnit.Framework.StringAssert.DoesNotStartWith(string expected, string actual) -> void
static NUnit.Framework.StringAssert.DoesNotStartWith(string expected, string actual, string message, params object[] args) -> void
static NUnit.Framework.StringAssert.EndsWith(string expected, string actual) -> void
static NUnit.Framework.StringAssert.EndsWith(string expected, string actual, string message, params object[] args) -> void
static NUnit.Framework.StringAssert.Equals(object a, object b) -> bool
static NUnit.Framework.StringAssert.IsMatch(string pattern, string actual) -> void
static NUnit.Framework.StringAssert.IsMatch(string pattern, string actual, string message, params object[] args) -> void
static NUnit.Framework.StringAssert.ReferenceEquals(object a, object b) -> void
static NUnit.Framework.StringAssert.StartsWith(string expected, string actual) -> void
static NUnit.Framework.StringAssert.StartsWith(string expected, string actual, string message, params object[] args) -> void
static NUnit.Framework.TestContext.AddFormatter(NUnit.Framework.Constraints.ValueFormatterFactory formatterFactory) -> void
static NUnit.Framework.TestContext.AddFormatter<TSupported>(NUnit.Framework.Constraints.ValueFormatter formatter) -> void
static NUnit.Framework.TestContext.AddTestAttachment(string filePath, string description = null) -> void
static NUnit.Framework.TestContext.CurrentContext.get -> NUnit.Framework.TestContext
static NUnit.Framework.TestContext.Error -> System.IO.TextWriter
static NUnit.Framework.TestContext.Out.get -> System.IO.TextWriter
static NUnit.Framework.TestContext.Write(bool value) -> void
static NUnit.Framework.TestContext.Write(char value) -> void
static NUnit.Framework.TestContext.Write(char[] value) -> void
static NUnit.Framework.TestContext.Write(decimal value) -> void
static NUnit.Framework.TestContext.Write(double value) -> void
static NUnit.Framework.TestContext.Write(float value) -> void
static NUnit.Framework.TestContext.Write(int value) -> void
static NUnit.Framework.TestContext.Write(long value) -> void
static NUnit.Framework.TestContext.Write(object value) -> void
static NUnit.Framework.TestContext.Write(string format, object arg1) -> void
static NUnit.Framework.TestContext.Write(string format, object arg1, object arg2) -> void
static NUnit.Framework.TestContext.Write(string format, object arg1, object arg2, object arg3) -> void
static NUnit.Framework.TestContext.Write(string format, params object[] args) -> void
static NUnit.Framework.TestContext.Write(string value) -> void
static NUnit.Framework.TestContext.Write(uint value) -> void
static NUnit.Framework.TestContext.Write(ulong value) -> void
static NUnit.Framework.TestContext.WriteLine() -> void
static NUnit.Framework.TestContext.WriteLine(bool value) -> void
static NUnit.Framework.TestContext.WriteLine(char value) -> void
static NUnit.Framework.TestContext.WriteLine(char[] value) -> void
static NUnit.Framework.TestContext.WriteLine(decimal value) -> void
static NUnit.Framework.TestContext.WriteLine(double value) -> void
static NUnit.Framework.TestContext.WriteLine(float value) -> void
static NUnit.Framework.TestContext.WriteLine(int value) -> void
static NUnit.Framework.TestContext.WriteLine(long value) -> void
static NUnit.Framework.TestContext.WriteLine(object value) -> void
static NUnit.Framework.TestContext.WriteLine(string format, object arg1) -> void
static NUnit.Framework.TestContext.WriteLine(string format, object arg1, object arg2) -> void
static NUnit.Framework.TestContext.WriteLine(string format, object arg1, object arg2, object arg3) -> void
static NUnit.Framework.TestContext.WriteLine(string format, params object[] args) -> void
static NUnit.Framework.TestContext.WriteLine(string value) -> void
static NUnit.Framework.TestContext.WriteLine(uint value) -> void
static NUnit.Framework.TestContext.WriteLine(ulong value) -> void
static NUnit.Framework.Throws.ArgumentException.get -> NUnit.Framework.Constraints.ExactTypeConstraint
static NUnit.Framework.Throws.ArgumentNullException.get -> NUnit.Framework.Constraints.ExactTypeConstraint
static NUnit.Framework.Throws.Exception.get -> NUnit.Framework.Constraints.ResolvableConstraintExpression
static NUnit.Framework.Throws.InnerException.get -> NUnit.Framework.Constraints.ResolvableConstraintExpression
static NUnit.Framework.Throws.InstanceOf(System.Type expectedType) -> NUnit.Framework.Constraints.InstanceOfTypeConstraint
static NUnit.Framework.Throws.InstanceOf<TExpected>() -> NUnit.Framework.Constraints.InstanceOfTypeConstraint
static NUnit.Framework.Throws.InvalidOperationException.get -> NUnit.Framework.Constraints.ExactTypeConstraint
static NUnit.Framework.Throws.Nothing.get -> NUnit.Framework.Constraints.ThrowsNothingConstraint
static NUnit.Framework.Throws.TargetInvocationException.get -> NUnit.Framework.Constraints.ExactTypeConstraint
static NUnit.Framework.Throws.TypeOf(System.Type expectedType) -> NUnit.Framework.Constraints.ExactTypeConstraint
static NUnit.Framework.Throws.TypeOf<TExpected>() -> NUnit.Framework.Constraints.ExactTypeConstraint
static NUnit.Framework.Warn.Equals(object a, object b) -> bool
static NUnit.Framework.Warn.If(System.Func<bool> condition) -> void
static NUnit.Framework.Warn.If(System.Func<bool> condition, System.Func<string> getExceptionMessage) -> void
static NUnit.Framework.Warn.If(System.Func<bool> condition, string message, params object[] args) -> void
static NUnit.Framework.Warn.If(bool condition) -> void
static NUnit.Framework.Warn.If(bool condition, System.Func<string> getExceptionMessage) -> void
static NUnit.Framework.Warn.If(bool condition, string message, params object[] args) -> void
static NUnit.Framework.Warn.If<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del, NUnit.Framework.Constraints.IResolveConstraint expr) -> void
static NUnit.Framework.Warn.If<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del, NUnit.Framework.Constraints.IResolveConstraint expr, System.Func<string> getExceptionMessage) -> void
static NUnit.Framework.Warn.If<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del, NUnit.Framework.Constraints.IResolveConstraint expr, string message, params object[] args) -> void
static NUnit.Framework.Warn.If<TActual>(TActual actual, NUnit.Framework.Constraints.IResolveConstraint expression) -> void
static NUnit.Framework.Warn.If<TActual>(TActual actual, NUnit.Framework.Constraints.IResolveConstraint expression, System.Func<string> getExceptionMessage) -> void
static NUnit.Framework.Warn.If<TActual>(TActual actual, NUnit.Framework.Constraints.IResolveConstraint expression, string message, params object[] args) -> void
static NUnit.Framework.Warn.ReferenceEquals(object a, object b) -> void
static NUnit.Framework.Warn.Unless(NUnit.Framework.TestDelegate code, NUnit.Framework.Constraints.IResolveConstraint constraint) -> void
static NUnit.Framework.Warn.Unless(System.Func<bool> condition) -> void
static NUnit.Framework.Warn.Unless(System.Func<bool> condition, System.Func<string> getExceptionMessage) -> void
static NUnit.Framework.Warn.Unless(System.Func<bool> condition, string message, params object[] args) -> void
static NUnit.Framework.Warn.Unless(bool condition) -> void
static NUnit.Framework.Warn.Unless(bool condition, System.Func<string> getExceptionMessage) -> void
static NUnit.Framework.Warn.Unless(bool condition, string message, params object[] args) -> void
static NUnit.Framework.Warn.Unless<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del, NUnit.Framework.Constraints.IResolveConstraint expr) -> void
static NUnit.Framework.Warn.Unless<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del, NUnit.Framework.Constraints.IResolveConstraint expr, System.Func<string> getExceptionMessage) -> void
static NUnit.Framework.Warn.Unless<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del, NUnit.Framework.Constraints.IResolveConstraint expr, string message, params object[] args) -> void
static NUnit.Framework.Warn.Unless<TActual>(TActual actual, NUnit.Framework.Constraints.IResolveConstraint expression) -> void
static NUnit.Framework.Warn.Unless<TActual>(TActual actual, NUnit.Framework.Constraints.IResolveConstraint expression, System.Func<string> getExceptionMessage) -> void
static NUnit.Framework.Warn.Unless<TActual>(TActual actual, NUnit.Framework.Constraints.IResolveConstraint expression, string message, params object[] args) -> void
static readonly NUnit.Framework.Interfaces.ResultState.Cancelled -> NUnit.Framework.Interfaces.ResultState
static readonly NUnit.Framework.Interfaces.ResultState.ChildFailure -> NUnit.Framework.Interfaces.ResultState
static readonly NUnit.Framework.Interfaces.ResultState.ChildIgnored -> NUnit.Framework.Interfaces.ResultState
static readonly NUnit.Framework.Interfaces.ResultState.ChildWarning -> NUnit.Framework.Interfaces.ResultState
static readonly NUnit.Framework.Interfaces.ResultState.Error -> NUnit.Framework.Interfaces.ResultState
static readonly NUnit.Framework.Interfaces.ResultState.Explicit -> NUnit.Framework.Interfaces.ResultState
static readonly NUnit.Framework.Interfaces.ResultState.Failure -> NUnit.Framework.Interfaces.ResultState
static readonly NUnit.Framework.Interfaces.ResultState.Ignored -> NUnit.Framework.Interfaces.ResultState
static readonly NUnit.Framework.Interfaces.ResultState.Inconclusive -> NUnit.Framework.Interfaces.ResultState
static readonly NUnit.Framework.Interfaces.ResultState.NotRunnable -> NUnit.Framework.Interfaces.ResultState
static readonly NUnit.Framework.Interfaces.ResultState.SetUpError -> NUnit.Framework.Interfaces.ResultState
static readonly NUnit.Framework.Interfaces.ResultState.SetUpFailure -> NUnit.Framework.Interfaces.ResultState
static readonly NUnit.Framework.Interfaces.ResultState.Skipped -> NUnit.Framework.Interfaces.ResultState
static readonly NUnit.Framework.Interfaces.ResultState.Success -> NUnit.Framework.Interfaces.ResultState
static readonly NUnit.Framework.Interfaces.ResultState.TearDownError -> NUnit.Framework.Interfaces.ResultState
static readonly NUnit.Framework.Interfaces.ResultState.Warning -> NUnit.Framework.Interfaces.ResultState
static readonly NUnit.Framework.Internal.OSPlatform.MacOSXPlatformID -> System.PlatformID
static readonly NUnit.Framework.Internal.OSPlatform.UnixPlatformID_Microsoft -> System.PlatformID
static readonly NUnit.Framework.Internal.OSPlatform.UnixPlatformID_Mono -> System.PlatformID
static readonly NUnit.Framework.Internal.OSPlatform.XBoxPlatformID -> System.PlatformID
static readonly NUnit.Framework.Internal.PlatformHelper.RuntimePlatforms -> string
static readonly NUnit.Framework.Internal.RuntimeFramework.DefaultVersion -> System.Version
static readonly NUnit.Framework.Internal.TestFilter.Empty -> NUnit.Framework.Internal.TestFilter
static readonly NUnit.Framework.Internal.TextMessageWriter.Pfx_Actual -> string
static readonly NUnit.Framework.Internal.TextMessageWriter.Pfx_Expected -> string
static readonly NUnit.Framework.Internal.TextMessageWriter.PrefixLength -> int
static readonly NUnit.Framework.TestContext.Parameters -> NUnit.Framework.TestParameters
static readonly NUnit.Framework.TestContext.Progress -> System.IO.TextWriter
virtual NUnit.Framework.Constraints.Constraint.ApplyTo<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del) -> NUnit.Framework.Constraints.ConstraintResult
virtual NUnit.Framework.Constraints.Constraint.ApplyTo<TActual>(ref TActual actual) -> NUnit.Framework.Constraints.ConstraintResult
virtual NUnit.Framework.Constraints.Constraint.Description.get -> string
virtual NUnit.Framework.Constraints.Constraint.Description.set -> void
virtual NUnit.Framework.Constraints.Constraint.DisplayName.get -> string
virtual NUnit.Framework.Constraints.Constraint.GetStringRepresentation() -> string
virtual NUnit.Framework.Constraints.Constraint.GetTestObject<TActual>(NUnit.Framework.Constraints.ActualValueDelegate<TActual> del) -> object
virtual NUnit.Framework.Constraints.ConstraintOperator.LeftPrecedence.get -> int
virtual NUnit.Framework.Constraints.ConstraintOperator.RightPrecedence.get -> int
virtual NUnit.Framework.Constraints.ConstraintResult.IsSuccess.get -> bool
virtual NUnit.Framework.Constraints.ConstraintResult.WriteActualValueTo(NUnit.Framework.Constraints.MessageWriter writer) -> void
virtual NUnit.Framework.Constraints.ConstraintResult.WriteAdditionalLinesTo(NUnit.Framework.Constraints.MessageWriter writer) -> void
virtual NUnit.Framework.Constraints.ConstraintResult.WriteMessageTo(NUnit.Framework.Constraints.MessageWriter writer) -> void
virtual NUnit.Framework.Constraints.EqualityAdapter.CanCompare(object x, object y) -> bool
virtual NUnit.Framework.Constraints.StringConstraint.IgnoreCase.get -> NUnit.Framework.Constraints.StringConstraint
virtual NUnit.Framework.Internal.Execution.WorkItem.Cancel(bool force) -> void
virtual NUnit.Framework.Internal.Execution.WorkItem.Execute() -> void
virtual NUnit.Framework.Internal.Execution.WorkItem.ExecutionStrategy.get -> NUnit.Framework.Internal.Execution.ParallelExecutionStrategy
virtual NUnit.Framework.Internal.Execution.WorkItem.IsolateChildTests.get -> bool
virtual NUnit.Framework.Internal.Execution.WorkItem.Name.get -> string
virtual NUnit.Framework.Internal.Test.Fixture.get -> object
virtual NUnit.Framework.Internal.Test.Fixture.set -> void
virtual NUnit.Framework.Internal.Test.GetCustomAttributes<TAttr>(bool inherit) -> TAttr[]
virtual NUnit.Framework.Internal.Test.MethodName.get -> string
virtual NUnit.Framework.Internal.Test.TestCaseCount.get -> int
virtual NUnit.Framework.Internal.Test.TestType.get -> string
virtual NUnit.Framework.Internal.TestFilter.IsExplicitMatch(NUnit.Framework.Interfaces.ITest test) -> bool
virtual NUnit.Framework.Internal.TestFilter.MatchDescendant(NUnit.Framework.Interfaces.ITest test) -> bool
virtual NUnit.Framework.Internal.TestFilter.Pass(NUnit.Framework.Interfaces.ITest test) -> bool
virtual NUnit.Framework.Internal.TestResult.AddToXml(NUnit.Framework.Interfaces.TNode parentNode, bool recursive) -> NUnit.Framework.Interfaces.TNode
virtual NUnit.Framework.Internal.TestResult.FullName.get -> string
virtual NUnit.Framework.Internal.TestResult.Name.get -> string
virtual NUnit.Framework.Internal.TestResult.StackTrace.get -> string
virtual NUnit.Framework.Internal.TestSuite.Copy(NUnit.Framework.Interfaces.ITestFilter filter) -> NUnit.Framework.Internal.TestSuite
virtual NUnit.Framework.Internal.TestSuiteResult.AddResult(NUnit.Framework.Interfaces.ITestResult result) -> void
virtual NUnit.Framework.PropertyAttribute.ApplyToTest(NUnit.Framework.Internal.Test test) -> void
virtual NUnit.Framework.TestActionAttribute.AfterTest(NUnit.Framework.Interfaces.ITest test) -> void
virtual NUnit.Framework.TestActionAttribute.BeforeTest(NUnit.Framework.Interfaces.ITest test) -> void
virtual NUnit.Framework.TestActionAttribute.Targets.get -> NUnit.Framework.ActionTargets
virtual NUnit.Framework.TestContext.ResultAdapter.StackTrace.get -> string
